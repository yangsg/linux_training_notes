
machine
  hardware
  software
    os   kernel driver service other


cpu
cache
ROM RAM
disk
other



power on ->  BIOS(INT 13) -> boot loader -> kernel (or other boot loader) -> driver -> service ->


[root@basic ~]# ls -1 -F /boot/
config-3.10.0-693.el7.x86_64
efi/
grub/
grub2/
initramfs-0-rescue-cbf8b71be72d4602b4809bf8f00a636d.img
initramfs-3.10.0-693.el7.x86_64.img   <-- 有 boot loader 初始化的 内存文件系统, 如果是centos5, 可能叫 initrd-version-release.img
initrd-plymouth.img
symvers-3.10.0-693.el7.x86_64.gz
System.map-3.10.0-693.el7.x86_64
vmlinuz-0-rescue-cbf8b71be72d4602b4809bf8f00a636d*
vmlinuz-3.10.0-693.el7.x86_64*   <--  linux 内核

[root@basic ~]# ls -lh /boot/vmlinuz-3.10.0-693.el7.x86_64   # 查看 vmlinuz-3.10.0-693.el7.x86_64 文件大小
-rwxr-xr-x. 1 root root 5.7M Aug 23  2017 /boot/vmlinuz-3.10.0-693.el7.x86_64

[root@basic 02-other]# file /boot/vmlinuz-3.10.0-693.el7.x86_64   # 查看  vmlinuz-3.10.0-693.el7.x86_64 文件格式
/boot/vmlinuz-3.10.0-693.el7.x86_64: Linux kernel x86 boot executable bzImage, version 3.10.0-693.el7.x86_64 (builder@kbuilder.dev.centos.org) #1 SMP , RO-rootFS, swap_dev 0x5, Normal VGA


[root@basic ~]# ls /lib/modules
3.10.0-693.el7.x86_64   # <---注 这里 的目录名 与 vmlinuz-3.10.0-693.el7.x86_64  中的版本信息部分 是 相同的
[root@basic ~]# ls -l /lib/modules/$(uname -r)
total 3104
lrwxrwxrwx.  1 root root     38 Dec 23 07:44 build -> /usr/src/kernels/3.10.0-693.el7.x86_64
drwxr-xr-x.  2 root root      6 Aug 23  2017 extra
drwxr-xr-x. 12 root root    128 Dec 23 07:44 kernel
-rw-r--r--.  1 root root 790292 Dec 23 07:47 modules.alias
-rw-r--r--.  1 root root 758807 Dec 23 07:47 modules.alias.bin
-rw-r--r--.  1 root root   1334 Aug 23  2017 modules.block
-rw-r--r--.  1 root root   6457 Aug 23  2017 modules.builtin
-rw-r--r--.  1 root root   8263 Dec 23 07:47 modules.builtin.bin
-rw-r--r--.  1 root root 268794 Dec 23 07:47 modules.dep
-rw-r--r--.  1 root root 373800 Dec 23 07:47 modules.dep.bin
-rw-r--r--.  1 root root    361 Dec 23 07:47 modules.devname
-rw-r--r--.  1 root root    132 Aug 23  2017 modules.drm
-rw-r--r--.  1 root root    110 Aug 23  2017 modules.modesetting
-rw-r--r--.  1 root root   1689 Aug 23  2017 modules.networking
-rw-r--r--.  1 root root  93026 Aug 23  2017 modules.order
-rw-r--r--.  1 root root    218 Dec 23 07:47 modules.softdep
-rw-r--r--.  1 root root 374488 Dec 23 07:47 modules.symbols
-rw-r--r--.  1 root root 459123 Dec 23 07:47 modules.symbols.bin
lrwxrwxrwx.  1 root root      5 Dec 23 07:44 source -> build
drwxr-xr-x.  2 root root      6 Aug 23  2017 updates
drwxr-xr-x.  2 root root     95 Dec 23 07:44 vdso
drwxr-xr-x.  2 root root      6 Aug 23  2017 weak-updates
[root@basic ~]#

[root@basic ~]# ls /lib/modules/3.10.0-693.el7.x86_64/kernel/    # 查看内核相关模块
arch  crypto  drivers  fs  kernel  lib  mm  net  sound  virt

[root@basic ~]# ls /lib/modules/3.10.0-693.el7.x86_64/kernel/drivers/  # 查看驱动
acpi        base   bluetooth  cpufreq  dca   firewire  gpu  hwmon  infiniband  isdn  media     mfd   mtd  nvdimm   pci      platform  pps  rtc   staging  tty  uwb    video     xen
ata         bcma   cdrom      crypto   dma   firmware  hid  i2c    input       leds  memstick  misc  net  nvme     pcmcia   power     ptp  scsi  target   uio  vfio   virtio
auxdisplay  block  char       dax      edac  gpio      hv   idle   iommu       md    message   mmc   ntb  parport  pinctrl  powercap  pwm  ssb   thermal  usb  vhost  watchdog

[root@basic ~]# ls /lib/modules/3.10.0-693.el7.x86_64/kernel/drivers/net/  # 查看网络驱动模块
bonding      ethernet      hyperv      macsec.ko.xz   mdio.ko.xz        nlmon.ko.xz       ppp   tun.ko.xz   virtio_net.ko.xz  wan
can          fjes          ieee802154  macvlan.ko.xz  mii.ko.xz         ntb_netdev.ko.xz  slip  usb         vmxnet3           wireless
dummy.ko.xz  geneve.ko.xz  ifb.ko.xz   macvtap.ko.xz  netconsole.ko.xz  phy               team  veth.ko.xz  vxlan.ko.xz       xen-netfront.ko.xz

[root@basic ~]# du -sh /lib/modules/3.10.0-693.el7.x86_64/
38M     /lib/modules/3.10.0-693.el7.x86_64/


虚拟文件系统 (Initial RAM Disk 或 Initial RAM Filesystem) 一般使用的档名为 /boot/initrd 或 /boot/initramfs

man initrd

[root@basic ~]# lsinitrd /boot/initramfs-3.10.0-693.el7.x86_64.img


常见的操作环境 target 与兼容于 runlevel 的等级
[root@basic ~]# ll -d /usr/lib/systemd/system/runlevel*.target
lrwxrwxrwx. 1 root root 15 Dec 23 07:44 /usr/lib/systemd/system/runlevel0.target -> poweroff.target
lrwxrwxrwx. 1 root root 13 Dec 23 07:44 /usr/lib/systemd/system/runlevel1.target -> rescue.target
lrwxrwxrwx. 1 root root 17 Dec 23 07:44 /usr/lib/systemd/system/runlevel2.target -> multi-user.target
lrwxrwxrwx. 1 root root 17 Dec 23 07:44 /usr/lib/systemd/system/runlevel3.target -> multi-user.target
lrwxrwxrwx. 1 root root 17 Dec 23 07:44 /usr/lib/systemd/system/runlevel4.target -> multi-user.target
lrwxrwxrwx. 1 root root 16 Dec 23 07:44 /usr/lib/systemd/system/runlevel5.target -> graphical.target
lrwxrwxrwx. 1 root root 13 Dec 23 07:44 /usr/lib/systemd/system/runlevel6.target -> reboot.target

-------------|-----------------------------------------
SystemV      |     systemd
-------------|-----------------------------------------
init 0       |  systemctl poweroff
-------------|-----------------------------------------
init 1       |  systemctl rescue
-------------|-----------------------------------------
init [234]   |  systemctl isolate multi-user.target
-------------|-----------------------------------------
init 5       |  systemctl isolate graphical.target
-------------|-----------------------------------------
init 6       |  systemctl reboot
-------------|-----------------------------------------


[root@basic ~]# systemctl list-dependencies graphical.target
graphical.target
● ├─display-manager.service
● ├─network.service
● ├─systemd-update-utmp-runlevel.service
● └─multi-user.target
●   ├─atd.service
   略 略 略 略


基本上我们 CentOS 7.x 的 systemd 开机流程大约是这样：
1. local-fs.target + swap.target：这两个 target 主要在挂载本机 /etc/fstab 里面所规范的文件系统与相关的内存置换空间。
2. sysinit.target：这个 target 主要在侦测硬件，加载所需要的核心模块等动作。
3. basic.target：加载主要的外围硬件驱动程序与防火墙相关任务
4. multi-user.target 底下的其它一般系统或网络服务的加载
5. 图形界面相关服务如 gdm.service 等其他服务的加载

systemd 执行 sysinit.target 初始化系统、basic.target 准备系统




[root@basic ~]# systemctl list-dependencies graphical.target
graphical.target
● ├─display-manager.service
● ├─network.service
● ├─systemd-update-utmp-runlevel.service
● └─multi-user.target
●   ├─atd.service
●   ├─auditd.service
●   ├─brandbot.path
●   ├─chronyd.service
●   ├─crond.service
●   ├─dbus.service
●   ├─httpd.service
●   ├─irqbalance.service
●   ├─network.service
●   ├─NetworkManager.service
●   ├─plymouth-quit-wait.service
●   ├─plymouth-quit.service
●   ├─postfix.service

// **相容 systemV 的 rc-local.service
// 另外，过去用过 Linux 的朋友大概都知道，当系统完成开机后，还想要让系统额外执行某些程序的话，
// 可以将该程序指令或脚本的绝对路径名称写入到 /etc/rc.d/rc.local 这个档案去！新的 systemd 机制中，
// 它建议直接写一个 systemd 的启动脚本配置文件到 /etc/systemd/system 底下，
// 然后使用 systemctl enable 的方式来设定启用它，而不要直接使用 rc.local 这个档案啦！

// 但是像鸟哥这种老人家就是喜欢将开机后要立刻执行的许多管理员自己的脚本，将它写入到 /etc/rc.d/rc.local 去嘛！
// 新版的 systemd 有没有支援呢？ 当然有！那就是 rc-local.service 这个服务的功能了！这个服务不需要启动，
// 它会自己判断 /etc/rc.d/rc.local 是否具有可执行的权限来判断要不要启动这个服务！
// (所以通常要执行 chmod a+x /etc/rc.d/rc.local 给 rc.local 添加可执行权限)
●   ├─rc-local.service
●   ├─rsyslog.service
●   ├─sshd.service
●   ├─systemd-ask-password-wall.path
●   ├─systemd-logind.service
●   ├─systemd-readahead-collect.service
●   ├─systemd-readahead-replay.service
●   ├─systemd-update-utmp-runlevel.service
●   ├─systemd-user-sessions.service
●   ├─tuned.service
●   ├─vmtoolsd.service
●   ├─basic.target      <------------------
// 加载 CPU 的微指令功能
●   │ ├─microcode.service
●   │ ├─rhel-autorelabel-mark.service
●   │ ├─rhel-autorelabel.service
●   │ ├─rhel-configure.service
// 将目前的开机过程所产生的开机信息写入到 /var/log/dmesg 当中
●   │ ├─rhel-dmesg.service
// 由 /etc/sysconfig/modules/*.modules 及 /etc/rc.modules 加载管理员指定的模块！
●   │ ├─rhel-loadmodules.service
●   │ ├─selinux-policy-migrate-local-changes@targeted.service
●   │ ├─paths.target
●   │ ├─slices.target
●   │ │ ├─-.slice
●   │ │ └─system.slice
●   │ ├─sockets.target
●   │ │ ├─dbus.socket
●   │ │ ├─dm-event.socket
●   │ │ ├─systemd-initctl.socket
●   │ │ ├─systemd-journald.socket
●   │ │ ├─systemd-shutdownd.socket
●   │ │ ├─systemd-udevd-control.socket
●   │ │ └─systemd-udevd-kernel.socket
●   │ ├─sysinit.target <------------------
// 特殊文件系统装置的挂载, 主要在挂载跟巨量内存分页使用与消息队列的功能。
// 挂载成功后，会在 /dev 底下建立 /dev/hugepages/, /dev/mqueue/ 等目录
●   │ │ ├─dev-hugepages.mount
●   │ │ ├─dev-mqueue.mount
●   │ │ ├─kmod-static-nodes.service
// 特殊文件系统的启用：包括磁盘阵列、网络驱动器 (iscsi)、LVM 文件系统、
// 文件系统对照服务 (multipath) 等等，也会在这里被侦测与使用到！
●   │ │ ├─lvm2-lvmetad.socket
●   │ │ ├─lvm2-lvmpolld.socket
●   │ │ ├─lvm2-monitor.service
// 开机过程的讯息传递与动画执行：使用 plymouthd 服务搭配 plymouth 指令来传递动画与讯息
●   │ │ ├─plymouth-read-write.service
●   │ │ ├─plymouth-start.service
●   │ │ ├─proc-sys-fs-binfmt_misc.automount
●   │ │ ├─sys-fs-fuse-connections.mount
●   │ │ ├─sys-kernel-config.mount
●   │ │ ├─sys-kernel-debug.mount
●   │ │ ├─systemd-ask-password-console.path
●   │ │ ├─systemd-binfmt.service
●   │ │ ├─systemd-firstboot.service
●   │ │ ├─systemd-hwdb-update.service
●   │ │ ├─systemd-journal-catalog-update.service
●   │ │ ├─systemd-journal-flush.service
// 日志式登录文件的使用：就是 systemd-journald 这个服务的启用啊！
●   │ │ ├─systemd-journald.service
●   │ │ ├─systemd-machine-id-commit.service
// 加载额外的核心模块：透过 /etc/modules-load.d/*.conf 档案的设定，让核心额外加载管理员所需要的核心模块！
●   │ │ ├─systemd-modules-load.service
// 启动系统的随机数生成器：随机数生成器可以帮助系统进行一些密码加密演算的功能
●   │ │ ├─systemd-random-seed.service
// 加载额外的核心参数设定：包括 /etc/sysctl.conf 以及 /etc/sysctl.d/*.conf 内部设定！
●   │ │ ├─systemd-sysctl.service
●   │ │ ├─systemd-tmpfiles-setup-dev.service
●   │ │ ├─systemd-tmpfiles-setup.service
// 启动动态设备管理器：就是 udevd 这个家伙！用在动态对应实际装置存取与装置文件名对应的一个服务！相当重要喔！也是在这里启动的！
●   │ │ ├─systemd-udev-trigger.service
●   │ │ ├─systemd-udevd.service
●   │ │ ├─systemd-update-done.service
●   │ │ ├─systemd-update-utmp.service
// 设定终端机 (console) 字形
●   │ │ ├─systemd-vconsole-setup.service
●   │ │ ├─cryptsetup.target
●   │ │ ├─local-fs.target
●   │ │ │ ├─-.mount
●   │ │ │ ├─boot.mount
●   │ │ │ ├─rhel-import-state.service
●   │ │ │ ├─rhel-readonly.service
●   │ │ │ └─systemd-remount-fs.service
●   │ │ └─swap.target
●   │ │   └─dev-mapper-centos\x2dswap.swap
●   │ └─timers.target
●   │   └─systemd-tmpfiles-clean.timer
// 提供 tty 界面与登入的服务
// 在 multi-user.target 底下还有个 getty.target 的操作界面项目喔！
●   ├─getty.target
●   │ └─getty@tty1.service
●   └─remote-fs.target







19.1.7 开机过程会用到的主要配置文件
基本上， systemd 有自己的配置文件处理方式，不过为了兼容于 systemV ，
其实很多的服务脚本设定还是会读取位于 /etc/sysconfig/ 底下的环境配置文件！
底下我们就来谈谈几个常见的比较重要的配置文件啰！

关于模块： /etc/modprobe.d/*.conf 及 /etc/modules-load.d/*.conf

还记得我们在 sysinit.target 系统初始化 当中谈到的加载用户自定义模块的地方吗？
其实有两个地方可以处理模块加载的问题，包括：
  ** /etc/modules-load.d/*.conf：单纯要核心加载模块的位置；
  ** /etc/modprobe.d/*.conf：可以加上模块参数的位置

[root@study ~]# vim /etc/modules-load.d/vbird.conf   # /etc/modules-load.d/*.conf 为 单纯要核心加载模块的位置
# 一个模块 (驱动程序) 写一行
nf_conntrack_ftp

[root@study ~]# vim /etc/modprobe.d/vbird.conf    # /etc/modprobe.d/*.conf：可以加上模块参数的位置
options nf_conntrack_ftp ports=555

# 之后重新启动就能够顺利的载入并且处理好这个模块了。不过，如果你不想要开机测试，想现在处理呢？有个方式可以来进行看看：
[root@study ~]# systemctl restart systemd-modules-load.service


man lsmod
man 5 modules-load.d
man systemd-modules-load.service






/etc/sysconfig/*
还有哪些常见的环境配置文件呢？我们找几个比较重要的来谈谈：
[root@basic ~]# cat /etc/sysconfig/authconfig
CACHECREDENTIALS=yes
FAILLOCKARGS="deny=4 unlock_time=1200"
FORCELEGACY=no
FORCESMARTCARD=no
IPADOMAINJOINED=no
IPAV2NONTP=no
PASSWDALGORITHM=sha512
USEDB=no
USEECRYPTFS=no
USEFAILLOCK=no
USEFPRINTD=no
USEHESIOD=no
USEIPAV2=no
USEKERBEROS=no
USELDAP=no
USELDAPAUTH=no
USELOCAUTHORIZE=yes
USEMKHOMEDIR=no
USENIS=no
USEPAMACCESS=no
USEPASSWDQC=no
USEPWQUALITY=yes
USESHADOW=yes
USESMARTCARD=no
USESSSD=yes
USESSSDAUTH=no
USESYSNETAUTH=no
USEWINBIND=no
USEWINBINDAUTH=no
WINBINDKRB5=no


[root@basic ~]# cat /etc/sysconfig/cpupower
# See 'cpupower help' and cpupower(1) for more info
CPUPOWER_START_OPTS="frequency-set -g performance"
CPUPOWER_STOP_OPTS="frequency-set -g ondemand"

[root@basic ~]# cat /etc/sysconfig/firewalld
# firewalld command line args
# possible values: --debug
FIREWALLD_ARGS=


/etc/sysconfig/iptables-config
/etc/sysconfig/ebtables-config
/etc/sysconfig/network-scripts/

19.2 核心与核心模块

那么核心与核心模块放在哪？
    核心： /boot/vmlinuz 或 /boot/vmlinuz-version；
    核心解压缩所需 RAM Disk： /boot/initramfs (/boot/initramfs-version)；
    核心模块： /lib/modules/version/kernel 或 /lib/modules/$(uname -r)/kernel；
    核心原始码： /usr/src/linux 或 /usr/src/kernels/ (要安装才会有，预设不安装)

如果该核心被顺利的加载系统当中了，那么就会有几个信息纪录下来：
    核心版本： /proc/version
    系统核心功能： /proc/sys/kernel/

问题来啦，如果我有个新的硬件，偏偏我的操作系统不支持，该怎么办？很简单啊！
    重新编译核心，并加入最新的硬件驱动程序原始码；
    将该硬件的驱动程序编译成为模块，在开机时加载该模块


19.2.1 核心模块与相依性
[root@basic ~]# ls -1F /lib/modules/$(uname -r)/kernel/
arch/       与硬件平台有关的项目，例如 CPU 的等级等等；
crypto/     核心所支持的加密的技术，例如 md5 或者是 des 等等；
drivers/    一些硬件的驱动程序，例如显示适配器、网络卡、PCI 相关硬件等等；
fs/         核心所支持的 filesystems ，例如 vfat, reiserfs, nfs 等等；
kernel/
lib/        一些函式库
mm/
net/        与网络有关的各项协议数据，还有防火墙模块 (net/ipv4/netfilter/*) 等等；
sound/      与音效有关的各项模块；
virt/

[root@basic ~]# head -n 2 /lib/modules/$(uname -r)/modules.dep   # 帮助见 depmod(1), depmod.d(5), modprobe(8), modules.dep(5)
kernel/arch/x86/kernel/cpu/mcheck/mce-inject.ko.xz:
kernel/arch/x86/kernel/test_nx.ko.xz:

