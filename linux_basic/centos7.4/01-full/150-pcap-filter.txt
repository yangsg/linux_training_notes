
# keyword pcap-filter

man 7 pcap-filter


注: tcpdump 和 wireshark 都依赖 libpcap  库, 但 语法上 还有 有些不同


作用: pcap-filter - packet filter syntax


说明:
       pcap_compile()  is  used  to compile a string into a filter program.  The resulting filter program can then be applied to some stream of
       packets to determine which packets will be supplied to pcap_loop(), pcap_dispatch(), pcap_next(), or pcap_next_ex().

       The filter expression consists of one or more primitives.  Primitives usually consist of an id (name or number) preceded by one or  more
       qualifiers.  There are three different kinds of qualifier:

      ----------------------
      中文注释:
             type qualifier:
                      host (默认)  如: `host foo'
                      net          如: `net 128.3'
                      port         如: `port 20'
                      portrange    如: `portrange 6000-6008'
      ----------------------
       type   type  qualifiers  say  what  kind  of  thing the id name or number refers to.  Possible types are host, net , port and portrange.
              E.g., `host foo', `net 128.3', `port 20', `portrange 6000-6008'.  If there is no type qualifier, host is assumed.

      ----------------------
      中文注释:
             direction qualifier: (仅列出常用的)
                      src               如: `src foo'
                      dst               如: `dst net 128.3'
                      src or dst (默认) 如: `src or dst port ftp-data'
                      src and dst
      ----------------------
       dir    dir qualifiers specify a particular transfer direction to and/or from id.  Possible directions are src, dst, src or dst, src  and
              dst,  ra,  ta, addr1, addr2, addr3, and addr4.  E.g., `src foo', `dst net 128.3', `src or dst port ftp-data'.  If there is no dir
              qualifier, src or dst is assumed.  The ra, ta, addr1, addr2, addr3, and addr4 qualifiers are only valid for IEEE 802.11  Wireless
              LAN  link  layers.   For some link layers, such as SLIP and the ``cooked'' Linux capture mode used for the ``any'' device and for
              some other device types, the inbound and outbound qualifiers can be used to specify a desired direction.

          ----------------------
          中文注释:
                 protocol qualifier: (仅列出常用的) (默认 为 与 type 一致的的所有 协议)
                        ether     如: `ether src foo'
                        fddi  (注: 实际上 fddi 是 ether 的 别名)
                        tr
                        wlan      如: `wlan addr2 0:2:3:4:5:6'
                        ip
                        ip6
                        arp       如: `arp net 128.3',
                        rarp
                        decnet
                        tcp       如: `tcp port 21'
                        udp       如: `udp portrange 7000-7009'

                默认情况(即没有明确指定proto qualifier 的情况) 为 type 一致的 所有的 protocols
                    如 `src foo' 意为  `(ip or arp  or  rarp) src foo'
                    如 `net bar' 意为  `(ip or arp or rarp) net bar'
                    如 `port 53' 意为  `(tcp or udp) port 53'
          ----------------------
       proto  proto qualifiers restrict the match to a particular protocol.  Possible protos are: ether, fddi, tr, wlan, ip,  ip6,  arp,  rarp,
              decnet, tcp and udp.  E.g., `ether src foo', `arp net 128.3', `tcp port 21', `udp portrange 7000-7009', `wlan addr2 0:2:3:4:5:6'.
              If there is no proto qualifier, all protocols consistent with the type are assumed.  E.g., `src foo' means `(ip or arp  or  rarp)
              src foo' (except the latter is not legal syntax), `net bar' means `(ip or arp or rarp) net bar' and `port 53' means `(tcp or udp)
              port 53'.

       [`fddi' is actually an alias for `ether'; the parser treats them identically as meaning ``the data link level used on the specified net‐
       work interface.''  FDDI headers contain Ethernet-like source and destination addresses, and often contain Ethernet-like packet types, so
       you can filter on these FDDI fields just as with the analogous Ethernet fields.  FDDI headers also contain other fields, but you  cannot
       name them explicitly in a filter expression.

       Similarly,  `tr' and `wlan' are aliases for `ether'; the previous paragraph's statements about FDDI headers also apply to Token Ring and
       802.11 wireless LAN headers.  For 802.11 headers, the destination address is the DA field and the source address is the  SA  field;  the
       BSSID, RA, and TA fields aren't tested.]

          ----------------------
          中文注释:
                special `primitive' keywords:
                      gateway
                      broadcast
                      less
                      greater
                      (算术表达式) arithmetic expressions
          ----------------------
       In  addition  to the above, there are some special `primitive' keywords that don't follow the pattern: gateway, broadcast, less, greater
       and arithmetic expressions.  All of these are described below.


          ----------------------
          中文注释:
                逻辑运算符:
                    and
                    or
                    not

             示例:
                `host foo and not port ftp and  not  port  ftp-data'
                `tcp dst port ftp or ftp-data or domain'
                `tcp dst port ftp or tcp dst port ftp-data or tcp dst port domain'
          ----------------------
       More complex filter expressions are built up by using the words and, or and not to combine primitives.  E.g., `host foo and not port ftp
       and  not  port  ftp-data'.  To save typing, identical qualifier lists can be omitted.  E.g., `tcp dst port ftp or ftp-data or domain' is
       exactly the same as `tcp dst port ftp or tcp dst port ftp-data or tcp dst port domain'.


---------------------------------------------------------------------------------------------------
注: 此处并为全部列出, 完整的 请看 man 7 pcap-filter

       Allowable primitives are:

       dst host host
              True if the IPv4/v6 destination field of the packet is host, which may be either an address or a name.
                                                                         注: host 可以是 an address 或 a name

       dst net net
              True  if  the  IPv4/v6 destination address of the packet has a network number of net.  Net may be either a name from the networks
              database (/etc/networks, etc.) or a network number.  An IPv4 network number can be written as a dotted quad (e.g.,  192.168.1.0),
              dotted  triple  (e.g.,  192.168.1),  dotted pair (e.g, 172.16), or single number (e.g., 10); the netmask is 255.255.255.255 for a
              dotted quad (which means that it's really a host match), 255.255.255.0 for a dotted triple, 255.255.0.0 for  a  dotted  pair,  or
              255.0.0.0 for a single number.  An IPv6 network number must be written out fully; the netmask is ff:ff:ff:ff:ff:ff:ff:ff, so IPv6
              "network" matches are really always host matches, and a network match requires a netmask length.


       net net mask netmask
              True if the IPv4 address matches net with the specific netmask.  May be qualified with src or dst.  Note that this syntax is  not
              valid for IPv6 net.

       net net/len
              True if the IPv4/v6 address matches net with a netmask len bits wide.  May be qualified with src or dst.

       dst port port
              True if the packet is ip/tcp, ip/udp, ip6/tcp or ip6/udp and has a destination port value of port.  The port can be a number or a
              name used in /etc/services (see tcp(4P) and udp(4P)).  If a name is used, both the port number and protocol are  checked.   If  a
              number  or  ambiguous  name  is  used,  only the port number is checked (e.g., dst port 513 will print both tcp/login traffic and
              udp/who traffic, and port domain will print both tcp/domain and udp/domain traffic).

       dst portrange port1-port2
              True if the packet is ip/tcp, ip/udp, ip6/tcp or ip6/udp and has a destination port value between port1  and  port2.   port1  and
              port2 are interpreted in the same fashion as the port parameter for port.



       less length
              True if the packet has a length less than or equal to length.  This is equivalent to:
                   len <= length.

       greater length
              True if the packet has a length greater than or equal to length.  This is equivalent to:
                   len >= length.


       ip proto protocol
              True  if the packet is an IPv4 packet (see ip(4P)) of protocol type protocol.  Protocol can be a number or one of the names icmp,
              icmp6, igmp, igrp, pim, ah, esp, vrrp, udp, or tcp.  Note that the identifiers tcp, udp, and icmp are also keywords and  must  be
              escaped via backslash (\), which is \\ in the C-shell.  Note that this primitive does not chase the protocol header chain.

       ip6 proto protocol
              True  if  the  packet  is  an IPv6 packet of protocol type protocol.  Note that this primitive does not chase the protocol header
              chain.


       proto protocol
              True if the packet is an IPv4 or IPv6 packet of protocol type protocol.  Note that this primitive does  not  chase  the  protocol
              header chain.

       tcp, udp, icmp
              Abbreviations for:
                   proto p
              where p is one of the above protocols.

       ip6 protochain protocol
              True if the packet is IPv6 packet, and contains protocol header with type protocol in its protocol header chain.  For example,
                   ip6 protochain 6
              matches  any IPv6 packet with TCP protocol header in the protocol header chain.  The packet may contain, for example, authentica‐
              tion header, routing header, or hop-by-hop option header, between IPv6 header and TCP header.  The BPF code emitted by this prim‐
              itive is complex and cannot be optimized by the BPF optimizer code, so this can be somewhat slow.

       ip protochain protocol
              Equivalent to ip6 protochain protocol, but this is for IPv4.


       ether broadcast
              True if the packet is an Ethernet broadcast packet.  The ether keyword is optional.

       ip broadcast
              True if the packet is an IPv4 broadcast packet.  It checks for both the all-zeroes and all-ones broadcast conventions, and  looks
              up the subnet mask on the interface on which the capture is being done.

              If  the  subnet  mask of the interface on which the capture is being done is not available, either because the interface on which
              capture is being done has no netmask or because the capture is being done on the Linux "any" interface, which can capture on more
              than one interface, this check will not work correctly.

       ether multicast
              True if the packet is an Ethernet multicast packet.  The ether keyword is optional.  This is shorthand for `ether[0] & 1 != 0'.

       ip multicast
              True if the packet is an IPv4 multicast packet.

       ip6 multicast
              True if the packet is an IPv6 multicast packet.


       ip, ip6, arp, rarp, atalk, aarp, decnet, iso, stp, ipx, netbeui
              Abbreviations for:
                   ether proto p
              where p is one of the above protocols.



       expr relop expr
              True if the relation holds, where relop is one of >, <, >=, <=, =, !=, and expr is an arithmetic expression composed  of  integer
              constants  (expressed  in standard C syntax), the normal binary operators [+, -, *, /, &, |, <<, >>], a length operator, and spe‐
              cial packet data accessors.  Note that all comparisons are unsigned, so that, for example, 0x80000000 and 0xffffffff are > 0.  To
              access data inside the packet, use the following syntax:
                   proto [ expr : size ]
              Proto  is  one of ether, fddi, tr, wlan, ppp, slip, link, ip, arp, rarp, tcp, udp, icmp, ip6 or radio, and indicates the protocol
              layer for the index operation.  (ether, fddi, wlan, tr, ppp, slip and link all refer to the  link  layer.  radio  refers  to  the
              "radio  header"  added to some 802.11 captures.)  Note that tcp, udp and other upper-layer protocol types only apply to IPv4, not
              IPv6 (this will be fixed in the future).  The byte offset, relative to the indicated protocol layer, is given by expr.   Size  is
              optional  and  indicates  the  number of bytes in the field of interest; it can be either one, two, or four, and defaults to one.
              The length operator, indicated by the keyword len, gives the length of the packet.

              For example, `ether[0] & 1 != 0' catches all multicast traffic.  The expression `ip[0] & 0xf != 5' catches all IPv4 packets  with
              options.   The  expression `ip[6:2] & 0x1fff = 0' catches only unfragmented IPv4 datagrams and frag zero of fragmented IPv4 data‐
              grams.  This check is implicitly applied to the tcp and udp index operations.  For instance, tcp[0] always means the  first  byte
              of the TCP header, and never means the first byte of an intervening fragment.

              Some  offsets and field values may be expressed as names rather than as numeric values.  The following protocol header field off‐
              sets are available: icmptype (ICMP type field), icmpcode (ICMP code field), and tcpflags (TCP flags field).

              The following ICMP type field values are available: icmp-echoreply, icmp-unreach,  icmp-sourcequench,  icmp-redirect,  icmp-echo,
              icmp-routeradvert,  icmp-routersolicit,  icmp-timxceed, icmp-paramprob, icmp-tstamp, icmp-tstampreply, icmp-ireq, icmp-ireqreply,
              icmp-maskreq, icmp-maskreply.

              The following TCP flags field values are available: tcp-fin, tcp-syn, tcp-rst, tcp-push, tcp-ack, tcp-urg.



       Primitives may be combined using:

              A parenthesized group of primitives and operators (parentheses are special to the Shell and must be escaped).

              Negation (`!' or `not').

              Concatenation (`&&' or `and').

              Alternation (`||' or `or').

       Negation has highest precedence.  Alternation and concatenation have equal precedence and associate left to right.  Note  that  explicit
       and tokens, not juxtaposition, are now required for concatenation.

       If an identifier is given without a keyword, the most recent keyword is assumed.  For example,
            not host vs and ace
       is short for
            not host vs and host ace
       which should not be confused with
            not ( host vs or ace )


---------------------------------------------------------------------------------------------------
EXAMPLES
       To select all packets arriving at or departing from sundown:
              host sundown

       To select traffic between helios and either hot or ace:
              host helios and \( hot or ace \)

       To select all IP packets between ace and any host except helios:
              ip host ace and not helios

       To select all traffic between local hosts and hosts at Berkeley:
              net ucb-ether

       To select all ftp traffic through internet gateway snup:
              gateway snup and (port ftp or ftp-data)

       To  select  traffic  neither sourced from nor destined for local hosts (if you gateway to one other net, this stuff should never make it
       onto your local net).
              ip and not net localnet

       To select the start and end packets (the SYN and FIN packets) of each TCP conversation that involves a non-local host.
              tcp[tcpflags] & (tcp-syn|tcp-fin) != 0 and not src and dst net localnet

       To select all IPv4 HTTP packets to and from port 80, i.e. print only packets that contain data, not, for example, SYN  and  FIN  packets
       and ACK-only packets.  (IPv6 is left as an exercise for the reader.)
              tcp port 80 and (((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) != 0)

       To select IP packets longer than 576 bytes sent through gateway snup:
              gateway snup and ip[2:2] > 576

       To select IP broadcast or multicast packets that were not sent via Ethernet broadcast or multicast:
              ether[0] & 1 = 0 and ip[16] >= 224

       To select all ICMP packets that are not echo requests/replies (i.e., not ping packets):
              icmp[icmptype] != icmp-echo and icmp[icmptype] != icmp-echoreply


---------------------------------------------------------------------------------------------------

网上资料:

      在线 man page:
          http://www.manpagez.com/man/7/pcap-filter/
          https://www.wireshark.org/docs/man-pages/pcap-filter.html

      tcpdump example:
          https://hackertarget.com/tcpdump-examples/

      wireshark 中过滤器的语法(和这里的 语法 没太大关系):
          https://www.wireshark.org/docs/wsug_html_chunked/ChWorkBuildDisplayFilterSection.html
          https://wiki.wireshark.org/DisplayFilters
          https://www.wireshark.org/docs/man-pages/wireshark-filter.html



