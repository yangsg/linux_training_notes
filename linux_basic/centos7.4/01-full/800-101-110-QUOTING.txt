
# keyword QUOTING

man bash  #/^QUOTING


引用


Quoting 被用于 将 certain characters 或 words 的 对于 shell 的 特殊意义(special meaning).
Quoting 可以被用于 disable 掉 对 special characters 的 special treatment. 用于 prevent
reserved words 被识别为类似的特殊字符, 以及 prevent parameter expansion.

man bash 文档中 DEFINITIONS 小节中所列出的 metacharacters 的每一个 对于 shell 都有特殊的含义(special meaning) 且
当 其要表示其本省(represent itself) 时，其必须被 quoting.


当 command history expansion 正在被使用的时候(see HISTORY EXPANSION below), the history expansion character, usually !,
必须被 quoted 以阻止 expansion.


存在这 3 中引用机制(quoting mechanisms): the escape character, single quotes, and double quotes.

A non-quoted backslash (\) 是  转移字符(escape character). A non-quoted backslash (\) 保留了 紧随它之后的 next character
的 literal value, 但是 <newline> 是一个例外情况(注: 即 先按 \ 键，然后 仅接着按 enter 键的操作)。如果 a  \<newline>  pair
appears, 则 此时 the backslash is not itself quoted, \<newline> 被视为是 a line continuation
(即续行)(that is, it is removed from the input stream and effectively ignored).


[root@localhost ~]# echo abc\  <---注: 此处按 \ 键后直接再按 enter, 即被认为是续行(a line continuation)
> efg
abcefg



Enclosing characters in single quotes preserves the literal value of each character within the quotes.
A single quote may not occur between single quotes, even when preceded by a backslash.
//中文注释: 被 一对单引号(即 ') 引起来的 characters 保留了 该对单引号中 each character 的 literal value.
//          A single quote 不能出现在 single quotes 之间, 即使其前缀了 a backslash(即 \).
// 注释: 上面这句话意思其实是说 一对单引号中的每一个 character 都保留了自己的 字面值.
//       且 a single quotes 中不能在包含单引号，即使是写成 \' 这样的形式也不可以。
//   (注 ：如上这句话非常的重要, 除了在该 man bash 手册页上看到对该知识点的描述外，还真没发现其他的一些相关资料
///        有对这个知识点有提及或描述. 这也使得本人在初学 bash shell 时对这一知识点始终存在困扰和疑惑)

[root@localhost ~]# echo '===$PWD \"=$(date)===' #单引号原样保留其中的 characters 的字面value
===$PWD \"=$(date)===


[root@localhost ~]# echo 'abc''  <--注: 这里'abc'' 并非表示打印 abc', 而是先打印 abc, 后面还有一个没有完结的单引号 '
> def'
abc
def


[root@localhost 01-full]# echo 'a\'b'  <--注: 这里的 \'并不应该出现在 '' 中，或者说其含义已经有所不同了
cd'
a\b
cd


double quotes 中的 characters 保留该 quotes 中的 all characters 中的 the literal value, 但是例外情况是
$, `, \, 以及 history expansion 为 enabled  时的 !.
The characters $ and ` 在 double quotes 中时仍保留了其特殊含义(special meaning).
The backslash 仅当其后 跟随 characters 中的 $, `, ", \, 或 <newline> 任意一个 character 时 保留期特殊含义(special meaning)，

A double quote 可以被包含在 double quotes, 只要其前缀 a backslash 即可.
If enabled, history expansion will be performed unless an !   appearing
in double quotes is escaped using a backslash.  The backslash preceding the !  is not removed.




[root@localhost ~]# echo "=$PWD=${PWD}=$(date '+%F %T %z')=$((2+3))="
=/root=/root=2020-12-18 16:21:13 +0000=5=


[root@localhost ~]# echo "`cal`"
    December 2020
Su Mo Tu We Th Fr Sa
       1  2  3  4  5
 6  7  8  9 10 11 12
13 14 15 16 17 18 19
20 21 22 23 24 25 26
27 28 29 30 31


[root@localhost ~]# echo "a\"b"  #只要双引号 前缀一个 反斜线(\), 其就可以被包含在 一对双引号中,如类似 "\"" 这样的写法是被允许的
a"b



// history expansion
[root@localhost ~]# date
Fri Dec 18 17:00:34 UTC 2020
[root@localhost ~]# echo "!!"
echo "date"
date

[root@localhost ~]# date
Fri Dec 18 17:02:14 UTC 2020
[root@localhost ~]# "!!"
"date"
Fri Dec 18 17:02:18 UTC 2020





//特殊参数 * 和 @
The special parameters * 和 @ 在 double quotes 中时拥有特殊的含义(see PARAMETERS below).

//形如 $'string' 的 Words
形如 $'string' 的 Words 会被特殊的对待, The word expands to string,
with backslash-escaped characters replaced as specified by the ANSI C standard.
Backslash escape sequences, if present, are decoded as follows:

    \a     alert (bell)
    \b     backspace
    \e
    \E     an escape character
    \f     form feed
    \n     new line
    \r     carriage return
    \t     horizontal tab
    \v     vertical tab
    \\     backslash
    \'     single quote
    \"     double quote
    \nnn   the eight-bit character whose value is the octal value nnn (one to three digits)
    \xHH   the eight-bit character whose value is the hexadecimal value HH (one or two hex digits)
    \uHHHH the Unicode (ISO/IEC 10646) character whose value is the hexadecimal value HHHH (one to four hex digits)
    \UHHHHHHHH
           the Unicode (ISO/IEC 10646) character whose value is the hexadecimal value HHHHHHHH (one to eight hex digits)
    \cx    a control-x character



  The expanded result is single-quoted, as if the dollar sign had not been present.

  A double-quoted string preceded by a dollar sign ($"string") will
  cause the string to be translated according to the current locale.
  If the current locale is C  or  POSIX,  the dollar sign is ignored.
  If the string is translated and replaced, the replacement is double-quoted.




// 见 https://github.com/yangsg/linux_training_notes/blob/master/linux_basic/centos7.4/01-full/025-od.txt
[root@localhost ~]# IFS=$' \t\n' echo -n "$IFS" | od -t cxC   #注: 变量 IFS 的正确设置 对于 awk 命令非常重要
0000000      \t  \n
         20  09  0a
0000003




























