
# keywork ulimit

man bash    #/ulimit
help ulimit

man limits.conf   #相关文件 /etc/security/limits.conf 和 相关目录 /etc/security/limits.d


       ulimit [-HSTabcdefilmnpqrstuvx [limit]]
              Provides  control over the resources available to the shell and to processes started by it, on systems that
              allow such control.  The -H and -S options specify that the hard  or  soft  limit  is  set  for  the  given
              resource.   A  hard  limit  cannot  be  increased  by  a  non-root user once it is set; a soft limit may be
              increased up to the value of the hard limit.  If neither -H nor -S is specified, both  the  soft  and  hard
              limits  are  set.   The value of limit can be a number in the unit specified for the resource or one of the
              special values hard, soft, or unlimited, which stand for the current hard limit, the  current  soft  limit,
              and  no  limit,  respectively.  If limit is omitted, the current value of the soft limit of the resource is
              printed, unless the -H option is given.  When more than one resource is specified, the limit name and  unit
              are printed before the value.  Other options are interpreted as follows:
              -a     All current limits are reported
              -b     The maximum socket buffer size
              -c     The maximum size of core files created
              -d     The maximum size of a process's data segment
              -e     The maximum scheduling priority ("nice")
              -f     The maximum size of files written by the shell and its children
              -i     The maximum number of pending signals
              -l     The maximum size that may be locked into memory
              -m     The maximum resident set size (many systems do not honor this limit)
              -n     The maximum number of open file descriptors (most systems do not allow this value to be set)
              -p     The pipe size in 512-byte blocks (this may not be set)
              -q     The maximum number of bytes in POSIX message queues
              -r     The maximum real-time scheduling priority
              -s     The maximum stack size
              -t     The maximum amount of cpu time in seconds
              -u     The maximum number of processes available to a single user
              -v     The maximum amount of virtual memory available to the shell and, on some systems, to its children
              -x     The maximum number of file locks
              -T     The maximum number of threads

              If  limit  is  given, it is the new value of the specified resource (the -a option is display only).  If no
              option is given, then -f is assumed.  Values are in 1024-byte increments, except for -t, which is  in  sec‐
              onds,  -p,  which  is  in units of 512-byte blocks, and -T, -b, -n, and -u, which are unscaled values.  The
              return status is 0 unless an invalid option or argument is supplied, or an error occurs while setting a new
              limit.  In POSIX Mode 512-byte blocks are used for the `-c' and `-f' options.


---------------------------------------------------------------------------------------------------
示例: 显示 当前 所有相应资源的  limits (soft limits 或 hard limits)

[root@basic ~]# ulimit -a    # 显示当前所有 相应资源的 soft limit,  此命令等价于 ulimit -Sa
core file size          (blocks, -c) 0
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 0
file size               (blocks, -f) unlimited
pending signals                 (-i) 3818
max locked memory       (kbytes, -l) 64
max memory size         (kbytes, -m) unlimited
open files                      (-n) 1024
pipe size            (512 bytes, -p) 8
POSIX message queues     (bytes, -q) 819200
real-time priority              (-r) 0
stack size              (kbytes, -s) 8192
cpu time               (seconds, -t) unlimited
max user processes              (-u) 3818
virtual memory          (kbytes, -v) unlimited
file locks                      (-x) unlimited

[root@basic ~]# ulimit -Sa

[root@basic ~]# ulimit -Ha   # 显示当前所有 相应资源 的 hard limit
core file size          (blocks, -c) unlimited
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 0
file size               (blocks, -f) unlimited
pending signals                 (-i) 3818
max locked memory       (kbytes, -l) 64
max memory size         (kbytes, -m) unlimited
open files                      (-n) 4096
pipe size            (512 bytes, -p) 8
POSIX message queues     (bytes, -q) 819200
real-time priority              (-r) 0
stack size              (kbytes, -s) unlimited
cpu time               (seconds, -t) unlimited
max user processes              (-u) 3818
virtual memory          (kbytes, -v) unlimited
file locks                      (-x) unlimited


---------------------------------------------------------------------------------------------------
示例: 显示特定 资源的 soft limit 或 hard limit

[root@basic ~]# ulimit -Hn  # 显示当前 hard limit 值
4096

[root@basic ~]# ulimit -Sn  # 显示当前 soft limit 值, 等价于 `ulimit -n`, 即在显示相应 limit的 当前值 时, 如果没有明确指定 -H 或 -S 选项, 则默认为 -S
1024
[root@basic ~]# ulimit -n   # 显示当前 soft limit 值,  等价于  ulimit -Sn
1024


---------------------------------------------------------------------------------------------------
示例: 设置特定 资源的 soft limit 或  hard limit, 或 同时设置 soft limit 和 hard limit

[root@basic ~]# ulimit -Hn 8192    # 设置 hard limit
[root@basic ~]# ulimit -Hn
8192

[root@basic ~]# ulimit -Sn 2048    # 设置 soft limit
[root@basic ~]# ulimit -Sn
2048

[root@basic ~]# ulimit -n 5120     # 设置 hard limit 和 soft limit 为 5120, 即在 设置 相应的 limit 值时, 如果没有明确指定 -H 或 -S 选项, 则 同时设置 hard limit 和 soft limit
[root@basic ~]# ulimit -Hn
5120
[root@basic ~]# ulimit -Sn
5120

---------------------------------------------------------------------------------------------------
示例: 使用特殊含义的值 hard, soft, 和 unlimited 来对 相应资源的 limit 进行设置

[root@basic ~]# ulimit -Sn hard      # 将 soft limit 设置为 当前的 hard limit
[root@basic ~]# ulimit -Sn; ulimit -Hn
4096
4096

[root@basic ~]# ulimit -Sn 1024

[root@basic ~]# ulimit -Hn soft      # 将 hard limit 设置为 当前的 soft limit
[root@basic ~]# ulimit -Sn; ulimit -Hn
1024
1024

[root@basic ~]# ulimit -Su; ulimit -Su
3818
3818

[root@basic ~]# ulimit -u unlimited  # 同时将 soft limit 和 hard limit 设置为 unlimited
[root@basic ~]# ulimit -Su; ulimit -Su
unlimited
unlimited


---------------------------------------------------------------------------------------------------
网上资料:
      https://www.tecmint.com/increase-set-open-file-limits-in-linux/
      https://access.redhat.com/solutions/61334
      http://www.linuxhowtos.org/tips%20and%20tricks/ulimit.htm
      https://www.ibm.com/support/knowledgecenter/en/SSEP7J_11.0.0/com.ibm.swg.ba.cognos.inst_cr_winux.doc/c_inst_ulimitsettingsonunixandlinuxoperatingsystems.html
      http://www.landoflinux.com/linux_ulimit_command.html
      https://zhangxugg-163-com.iteye.com/blog/1108402

---------------------------------------------------------------------------------------------------
系统范围的修改(全局修改)

[root@basic ~]# cat /proc/sys/fs/file-max    # 查看系统上所有进程总共能打开的文件数量, 见 man proc
95856

注: 这里只是想演示 kernel 参数的修改方法, 具体各参数修改需要注意的事项 和 细节还需要参看 文档
[root@basic ~]# sysctl -w fs.file-max=500000   # 临时更改 /proc/sys/fs/file-max 中的值, 等价于 `echo  500000 > /proc/sys/fs/file-max`
fs.file-max = 500000

[root@basic ~]# cat /proc/sys/fs/file-max
500000

持久化修改内核参数:
[root@basic ~]# vim /etc/sysctl.conf
fs.file-max=500000

[root@basic ~]# sysctl -p
fs.file-max = 500000

---------------------------------------------------------------------------------------------------
用户级别的修改

[root@basic ~]# vim /etc/security/limits.conf  # 该文件的设置对 通过PAM的登录用户起作用, 对 system services 的 资源限制没有影响.
## Example hard limit for max opened files
marin        hard nofile 4096
## Example soft limit for max opened files
marin        soft nofile 1024


