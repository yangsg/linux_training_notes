
# keyword mkfs.ext4

man mkfs.ext4
man 5 ext4     # 可以找到 ext4 的 特性 及其 特定的 mount 选项, 通用的 mount 选项见 man mount


作用: mke2fs - create an ext2/ext3/ext4 filesystem

语法: mke2fs  [  -c  | -l filename ] [ -b block-size ] [ -D ] [ -f fragment-size ] [ -g blocks-per-group ] [ -G number-of-groups ] [ -i bytes-per-inode ] [ -I inode-size ] [ -j ] [ -J
       journal-options ] [ -N number-of-inodes ] [ -n ] [ -m reserved-blocks-percentage ] [ -o creator-os ] [ -O feature[,...]  ] [ -q ] [ -r fs-revision-level ] [ -E  extended-options
       ] [ -v ] [ -F ] [ -L volume-label ] [ -M last-mounted-directory ] [ -S ] [ -t fs-type ] [ -T usage-type ] [ -U UUID ] [ -V ] device [ blocks-count ]

       mke2fs -O journal_dev [ -b block-size ] [ -L volume-label ] [ -n ] [ -q ] [ -v ] external-journal [ blocks-count ]

说明:
       mke2fs  is  used to create an ext2, ext3, or ext4 filesystem, usually in a disk partition.  device is the special file corresponding to the device (e.g /dev/hdXX).  blocks-count
       is the number of blocks on the device.  If omitted, mke2fs automagically figures the file system size.  If called as mkfs.ext3 a journal is created as if the -j option was spec‐
       ified.

       The  defaults  of the parameters for the newly created filesystem, if not overridden by the options listed below, are controlled by the /etc/mke2fs.conf configuration file.  See
       the mke2fs.conf(5) manual page for more details.


---------------------------------------------------------------------------------------------------
示例: 创建 ext4 的文件系统

[root@basic ~]# mkfs.ext4 /dev/sdb3    # 在 分区 /dev/sdb3 上创建 ext4 文件系统
mke2fs 1.42.9 (28-Dec-2013)
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=0 blocks, Stripe width=0 blocks
65536 inodes, 262144 blocks
13107 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=268435456
8 block groups
32768 blocks per group, 32768 fragments per group
8192 inodes per group
Superblock backups stored on blocks:
        32768, 98304, 163840, 229376

Allocating group tables: done
Writing inode tables: done
Creating journal (8192 blocks): done
Writing superblocks and filesystem accounting information: done


[root@basic ~]# blkid /dev/sdb3     # 使用命令 blkid 查看 分区 /dev/sdb3 的文件系统类型
/dev/sdb3: UUID="6c13d2d8-2fe2-4ded-a4e0-9f1e00b86530" TYPE="ext4" PARTLABEL="primary" PARTUUID="28488f61-ad77-4780-9d30-7161d77e2c65"

[root@basic ~]# file -sL /dev/sdb3  # 使用命令 file 查看 分区 /dev/sdb3 的文件系统类型
/dev/sdb3: Linux rev 1.0 ext4 filesystem data, UUID=6c13d2d8-2fe2-4ded-a4e0-9f1e00b86530 (extents) (64bit) (large files) (huge files)


---------------------------------------------------------------------------------------------------

       -b block-size
              Specify the size of blocks in bytes.  Valid block-size values are 1024, 2048 and 4096 bytes per block.  If omitted, block-size is heuristically determined by the filesys‐
              tem  size  and the expected usage of the filesystem (see the -T option).  If block-size is preceded by a negative sign ('-'), then mke2fs will use heuristics to determine
              the appropriate block size, with the constraint that the block size will be at least block-size bytes.  This is useful for certain hardware devices which require that the
              blocksize be a multiple of 2k.

[root@basic ~]# mkfs.ext4 -b 1024 /dev/sdb1    # 创建 ext4 格式的文件系统时 明确指定 每个 block 大小为 1024 bytes. 其他的有效size值为 2048 和 4096, 即大小只能是 1K,2K,4K 之一
mke2fs 1.42.9 (28-Dec-2013)
Filesystem label=
OS type: Linux
Block size=1024 (log=0)
Fragment size=1024 (log=0)
Stride=0 blocks, Stripe width=0 blocks
65536 inodes, 1047552 blocks
52377 blocks (5.00%) reserved for the super user
First data block=1
Maximum filesystem blocks=34603008
128 block groups
8192 blocks per group, 8192 fragments per group
512 inodes per group
Superblock backups stored on blocks:
        8193, 24577, 40961, 57345, 73729, 204801, 221185, 401409, 663553,
        1024001

Allocating group tables: done
Writing inode tables: done
Creating journal (16384 blocks): done
Writing superblocks and filesystem accounting information: done

---------------------------------------------------------------------------------------------------


 -c     Check  the  device  for  bad blocks before creating the file system.  If this option is specified twice, then a slower read-write test is used instead of a fast read-only test.



[root@basic ~]# mkfs.ext4 -c /dev/sdb1   # 创建文件系统 之前 先 检查 bad blocks , 然后在 创建 文件系统
mke2fs 1.42.9 (28-Dec-2013)
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=0 blocks, Stripe width=0 blocks
65536 inodes, 261888 blocks
13094 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=268435456
8 block groups
32768 blocks per group, 32768 fragments per group
8192 inodes per group
Superblock backups stored on blocks:
        32768, 98304, 163840, 229376

Checking for bad blocks (read-only test): done   <--------------------- 在 分区之前先检查 bad blocks
Allocating group tables: done
Writing inode tables: done
Creating journal (4096 blocks): done
Writing superblocks and filesystem accounting information: done

[root@basic ~]# parted /dev/sdb print
Model: VMware, VMware Virtual S (scsi)
Disk /dev/sdb: 4295MB
Sector size (logical/physical): 512B/512B
Partition Table: gpt
Disk Flags:

Number  Start   End     Size    File system  Name     Flags
 1      1049kB  1074MB  1073MB  ext4         primary
 2      1074MB  2147MB  1074MB               primary
 3      2147MB  3221MB  1074MB               primary
 4      3221MB  4294MB  1073MB               primary

---------------------------------------------------------------------------------------------------

     -n     Causes mke2fs to not actually create a filesystem, but display what it would do if it were to create a filesystem.  This can be used to  determine  the  location  of  the
            backup superblocks for a particular filesystem, so long as the mke2fs parameters that were passed when the filesystem was originally created are used again.  (With the -n
            option added, of course!)


[root@basic ~]# mkfs.ext4 -n /dev/sdb2     # 模拟 文件系统 创建, 但不会实际真的去创建 文件系统
mke2fs 1.42.9 (28-Dec-2013)
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=0 blocks, Stripe width=0 blocks
65536 inodes, 262144 blocks
13107 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=268435456
8 block groups
32768 blocks per group, 32768 fragments per group
8192 inodes per group
Superblock backups stored on blocks:
        32768, 98304, 163840, 229376

[root@basic ~]# parted /dev/sdb print
Model: VMware, VMware Virtual S (scsi)
Disk /dev/sdb: 4295MB
Sector size (logical/physical): 512B/512B
Partition Table: gpt
Disk Flags:

Number  Start   End     Size    File system  Name     Flags
 1      1049kB  1074MB  1073MB  ext4         primary
 2      1074MB  2147MB  1074MB               primary   <----------------- 观察这里, 可以看到加了选项 -n 后并不会实际创建 文件系统
 3      2147MB  3221MB  1074MB               primary
 4      3221MB  4294MB  1073MB               primary

---------------------------------------------------------------------------------------------------
     -i bytes-per-inode
            Specify the bytes/inode ratio.  mke2fs creates an inode for every bytes-per-inode bytes of space on the disk.  The larger the bytes-per-inode ratio, the fewer inodes will
            be created.  This value generally shouldn't be smaller than the blocksize of the filesystem, since in that case more inodes would be made  than  can  ever  be  used.   Be
            warned  that it is not possible to change this ratio on a filesystem after it is created, so be careful deciding the correct value for this parameter.  Note that resizing
            a filesystem changes the numer of inodes to maintain this ratio.

     -I inode-size
            Specify the size of each inode in bytes.  The inode-size value must be a power of 2 larger or equal to 128.  The larger the inode-size the more space the inode table will
            consume,  and this reduces the usable space in the filesystem and can also negatively impact performance.  It is not possible to change this value after the filesystem is
            created.

            In kernels after 2.6.10 and some earlier vendor kernels it is possible to utilize inodes larger than 128 bytes to store  extended  attributes  for  improved  performance.
            Extended attributes stored in large inodes are not visible with older kernels, and such filesystems will not be mountable with 2.4 kernels at all.

            The  default  inode size is controlled by the mke2fs.conf(5) file.  In the mke2fs.conf file shipped with e2fsprogs, the default inode size is 256 bytes for most file sys‐
            tems, except for small file systems where the inode size will be 128 bytes.

       -N number-of-inodes
              Overrides the default calculation of the number of inodes that should be reserved for the filesystem (which is based on the  number  of  blocks  and  the  bytes-per-inode
              ratio).  This allows the user to specify the number of desired inodes directly.

       -T usage-type[,...]
              Specify how the filesystem is going to be used, so that mke2fs can choose optimal filesystem parameters for that use.  The usage types that are supported are  defined  in
              the configuration file /etc/mke2fs.conf.  The user may specify one or more usage types using a comma separated list.

              If  this  option is is not specified, mke2fs will pick a single default usage type based on the size of the filesystem to be created.  If the filesystem size is less than
              or equal to 3 megabytes, mke2fs will use the filesystem type floppy.  If the filesystem size is greater than 3 but less than or equal to 512 megabytes, mke2fs(8) will use
              the filesystem type small.  If the filesystem size is greater than or equal to 4 terabytes but less than 16 terabytes, mke2fs(8) will use the filesystem type big.  If the
              filesystem size is greater than or equal to 16 terabytes, mke2fs(8) will use the filesystem type huge.  Otherwise, mke2fs(8) will use the default filesystem type default.



[root@basic ~]# mkfs.ext4 -b 1024 -I 128 /dev/sdb2  # 指定每个 block 大小为 1024 bytes, 每个 inodes 的 大小为 128 bytes.
mke2fs 1.42.9 (28-Dec-2013)
Filesystem label=
OS type: Linux
Block size=1024 (log=0)
Fragment size=1024 (log=0)
Stride=0 blocks, Stripe width=0 blocks
65536 inodes, 1048576 blocks
52428 blocks (5.00%) reserved for the super user
First data block=1
Maximum filesystem blocks=34603008
128 block groups
8192 blocks per group, 8192 fragments per group
512 inodes per group
Superblock backups stored on blocks:
        8193, 24577, 40961, 57345, 73729, 204801, 221185, 401409, 663553,
        1024001

Allocating group tables: done
Writing inode tables: done
Creating journal (32768 blocks): done
Writing superblocks and filesystem accounting information: done


[root@basic ~]# tune2fs -l /dev/sdb2
tune2fs 1.42.9 (28-Dec-2013)
Filesystem volume name:   <none>
Last mounted on:          <not available>
Filesystem UUID:          23155879-3b89-4ab6-a192-8e7331d07af7
Filesystem magic number:  0xEF53
Filesystem revision #:    1 (dynamic)
Filesystem features:      has_journal ext_attr resize_inode dir_index filetype extent 64bit flex_bg sparse_super huge_file uninit_bg dir_nlink extra_isize
Filesystem flags:         signed_directory_hash
Default mount options:    user_xattr acl
Filesystem state:         clean
Errors behavior:          Continue
Filesystem OS type:       Linux
Inode count:              65536
Block count:              1048576
Reserved block count:     52428
Free blocks:              1004430
Free inodes:              65525
First block:              1
Block size:               1024
Fragment size:            1024
Group descriptor size:    64
Reserved GDT blocks:      256
Blocks per group:         8192
Fragments per group:      8192
Inodes per group:         512
Inode blocks per group:   64
Flex block group size:    16
Filesystem created:       Thu Jun 13 23:13:26 2019
Last mount time:          n/a
Last write time:          Thu Jun 13 23:13:27 2019
Mount count:              0
Maximum mount count:      -1
Last checked:             Thu Jun 13 23:13:26 2019
Check interval:           0 (<none>)
Lifetime writes:          32 MB
Reserved blocks uid:      0 (user root)
Reserved blocks gid:      0 (group root)
First inode:              11
Inode size:               128
Journal inode:            8
Default directory hash:   half_md4
Directory Hash Seed:      8c5494b7-64f3-4413-a65f-e12c96710b08
Journal backup:           inode blocks


---------------------------------------------------------------------------------------------------
网上资料:

/etc/mke2fs.conf

   inodes 数量:
      https://stackoverflow.com/questions/21397110/how-to-store-one-billion-files-on-ext4
      https://unix.stackexchange.com/questions/26598/how-can-i-increase-the-number-of-inodes-in-an-ext4-filesystem
      https://www.baishitou.cn/1180.html     (ext4最大inodes文件数)


    https://www.thegeekstuff.com/2013/01/mke2fs-examples/
    https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/5/html/deployment_guide/s1-filesystem-ext4-create
    https://wiki.archlinux.org/index.php/Ext4
    https://metebalci.com/blog/a-minimum-complete-tutorial-of-linux-ext4-file-system/


    https://stackoverflow.com/questions/12930380/how-to-destroy-a-filesystem
        dd if=/dev/zero of=/dev/sdb    # 该命令将整个磁盘 /dev/sdb 清零
        dd if=/dev/zero of=/dev/sdb1   # 该命令将整个分区 /dev/sdb1 清零


    https://www.thegeekdiary.com/how-to-find-the-inode-size-of-an-ext2ext3ext4-filesystem/


