
# keyword crontab

man crontab


作用: crontab - maintains crontab files for individual users

语法: crontab [-u user] file
语法: crontab [-u user] [-l | -r | -e] [-i] [-s]
语法: crontab -n [ hostname ]
语法: crontab -c

说明:
    crontab 是用于 install a crontab table file, remove or list the existing tables used to serve the cron(8) daemon 的程序.
    每个 user 能够 拥有 他们自己的 crontab, 同时尽管 这些都是 /var/spool/ 下的 files, 但它们不能被直接编辑.
    For SELinux in MLS mode, you can define more crontabs for each range.  For more information,


    在该版本的 cron 能够使用 a network-mounted shared /var/spool/cron across a cluster of hosts 并 指定 仅有 其中 1 个 host
    应该 运行 在任何时间的 特定目录下的 crontab jobs. 你 也可以 在其中任意 host 使用 crontab(1) 来编辑 the same shared set of crontab files,
    并 set 和 query 哪个 host 应该 运行 the crontab jobs.

    针对不同的 users 可以 允许(allowed) 或 禁止(disallowed) 其 运行 cron  jobs. 为达到此目的, 要使用 cron.allow and cron.deny 文件.
    如果
       文件 cron.allow 存在, 则只有 在 cron.allow 中被 列出(list) 的 user 才被允许 使用 cron.
    如果
      文件cron.allow 不存在 但是文件 cron.deny 存在, 则 user 要使用 cron 就 不应该 在文件 cron.deny 中被列出(listed).
    如果
      文件 cron.allow 和 文件 cron.deny 同时都不存在, 则只有 super user 被允许使用 cron.
    另一种限制 对 cron 的 访问的方式是使用   /etc/security/access.conf 中的 PAM authentication 来 设置 users,
    这些 users 被 允许(allowed) 或 禁止(disallowed) 使用 crontab 或 修改(modify) 目录 /etc/cron.d/ 下的 system cron jobs.

    The temporary directory 可以被设置在 an environment variable 中. 如果其没有被 user 设置(set), 则使用 /tmp 目录.


文件:
       /etc/cron.allow
       /etc/cron.deny

一般来说，系统默认是保留使用 /etc/cron.deny 的, 所以为了提高安全性, 也许可以改为使用 /etc/cron.allow 来严格明确限制 能够使用 cron 的用户.



其他信息见 man 5 crontab 和 man cron

       /etc/crontab
          system crontab. 现在该文件默认为 empty. 原本其 经常 被用于 运行 daily, weekly, monthly jobs. 而现在 默认 这些 jobs
          是通过 anacron 读取 /etc/anacrontab 配置文件 来运行的. 更多详细信息见 anacrontab(5).

       /etc/cron.d/
          包含不同 users 的 system cronjobs 的目录

       /var/spool/cron
          包含 通过 crontab 命令创建的 user crontables 的目录

       提示： crontab(1) 命令 会在每次修改 a crontab 是 更新 spool 目录 的  modtime.





[Bob@basic ~]$ crontab -e
# 用法:
#  更多信息见  https://github.com/yangsg/linux_training_notes/blob/master/linux_basic/centos7.4/01-full/007-58-crontab-config.txt
# 第一个非 non-whitespace 的 字符如果是 ‘#’, 则表示 注释。且 注释不能与command 放在同一行,否则其会被视为command 的一部分
# 字符 % 有特殊含义: 表示 newline(除非使用‘\’对其转义), 所有在第一个 '%' 之后的 data 都会被当做 standard input 发送给该命令
# 这些命令会以 crontab 的 owner 的身份执行
# 作用的行包括环境变量设置 和 cron comands   # 见 man 5 crontab
# 守护进程 cron(8) 每分钟 都会 检查一遍 cron entries
# 格式:
#    环境变量 赋值中 符号 '=' 两边的 white spaces 是可选的,
#    且 value 中 任何后续 的 non-leading white spaces 会 作为 value 的一部分 赋给 name.
#    可将 The value string 置于 引号中(单引 或 双引 都可以, 但必须要配对) 来 保留 leading or trailing white spaces.
#     某些 environment variables 会被 cron(8) daemon 自动 设置(如 SHELL 自动被设置为 /bin/sh).
# name = value
# 分 时 日 月 周   命令
#
#       The time and date fields are:
#
#              field          allowed values
#              -----          --------------
#              minute         0-59
#              hour           0-23
#              day of month   1-31
#              month          1-12 (or names, see below)
#              day of week    0-7 (0 or 7 is Sunday, or use names)
#
#  字段说明:  * 表示 代表 'first-last'
#             list, 即列表, 有逗号','分隔的数字或range   如: 1,2,5,9 或 0-4,8-12 或 1,3,6-10
#             range (如 8-11 表示 8,9,10,11)
#            步长值可以和 range 结合使用, 如 0-23/2  表示 0,2,4,6,8,10,12,14,16,18,20,22
#            步长值还可以和星号 * 结合使用, 如 对于 hour而言,  */2 和 0-23/2 效果是一样的
#        Names 可用于 'month' 和 'day of week' 字段, 使用 day 或 month 的 name 的前3个letter(大小写不重要)
#        range 和 list 是不支持 names
# month_name      : jan | feb | mar | apr | may | jun
#                 | jul | aug | sep | oct | nov | dec
# day_of_week     : sun | mon | tue | wed | thu | fri | sat
#
#  提示：
#      The day of a command's execution 可通过两个 字段来指定: 'day of month', 和 'day of week'.
#      如果这两个字段都严格指定了(即 两个字段都不包含星号 ‘*’ 字符), 则对应的command 在这两个字段中
#      任意一个 能与 当前时间 匹配成功时 将会被执行(如: 对于 "30 4 1,15 * 5" 会是 command 在 每月的 1日 和 15日 以及
#      每周五 的 4:30am 执行)
#
#
# 一些 example
# 默认 cron daemon 会自动设置环境变量 SHELL 为 /bin/sh, 即使用 /bin/sh 来 执行 crontab 中的 commands.
# 不过可以手动修改环境变 SHELL 的值 为 /bin/bash, 即指定使用 /bin/bash 来执行 crontab 中的 commands.
SHELL=/bin/bash
#  每分钟都向 /tmp/crontab_data.log 输出一个当前时间(注意 crontab 文件中 '%'为特殊字符, 所以这里使用 '\' 对其进行了转义)
* * * * *  /bin/date '+\%F \%T \%z' >> /tmp/crontab_data.log
# 每分钟显示当前 使用的 shell 是什么(如是 /bin/sh 还是 /bin/bash)
* * * * *  /bin/ps -p $$ -ocomm=  >> /tmp/crontab_data.log
#  更多例子见 man 5 crontab  #/EXAMPLE CRON FILE


[root@basic ~]# ls /var/spool/cron/
Bob

[Bob@basic ~]$ crontab -l   # -l     Displays the current crontab on standard output. # 将使用 'crontab -e' 编辑的内容都显示出来

[Bob@basic ~]$ crontab -r   # -r     Removes the current crontab. #删除当前用户的 crontab(即将/var/spool/cron/目录下 Bob 文件删掉) 注：-r 是删除整个文件, 如果是删除某一行, 需使用`crontab -e` 然后编辑删除

[Bob@basic ~]$ crontab -ri  # 删除当前用户的 crontab, 但会先询问确认 #使用 -i (interactive) 选项可以在实际删除当前用户的 crontab 前交互式的 询问 确认信息
crontab: really delete Bob's crontab?

