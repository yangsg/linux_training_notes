
# keyword anacron

man anacron


作用: anacron - runs commands periodically

语法: anacron [-s] [-f] [-n] [-d] [-q] [-t anacrontab] [-S spooldir] [job]
语法: anacron [-S spooldir] -u [-t anacrontab] [job]
语法: anacron [-V|-h]
语法: anacron -T [-t anacrontab]

说明:
anacron 用于 周期性地 执行 commands, 且 按 天(days) 来指定 频率. 不像 cron(8), anacron 不会假设 machine 一直 连续不断的运行.
因此, anacron 可以被用于 并非 一天 24 小时 都一直运行的 machines 上 来 控制 常规作业(regular jobs) 如 daily, weekly, 和 monthly jobs.

anacron 从 文件 /etc/anacrontab (see anacrontab(5))读取 a list of jobs. 该文件包含 anacron 控制管理 的  list of jobs.
每个 job entry 指定了 一个 周期 天数(a period in days), 一个延迟分钟数(a delay in minutes), 一个唯一的 job identifier 和 一个 shell command.

针对每个 job, anacron 检查其 最近 n 天 (in the last n days) 是否已经被执行了, 这里的 n 是 对应 job 的 时间周期.
如果 一个 job 没有在 最近 n 天 或 超过 n 天 被执行, anacron 会 在 等待 the delay parameter 指定的 分钟数 后 执行 该 job 的 shell command,

在 command 退出(exits) 之后, anacron 会在 该 job 特定的 timestamp 文件中 records 该 date(excludes the hour), 因此 anacron 知道 什么时候该再次执行该job.

当 没有更多的 jobs 需要被执行时, anacron 则会退出(exits).

anacron 仅 考虑 (considers) 在 anacrontab(5) 中指定的,其标识符(identifier) 与 the job command-line arguments 任何一个 匹配的 job.
The job command-line arguments 可以使用 shell wildcard patterns 来表示(be sure to protect them from your shell with adequate quoting).
不指定 job command-line arguments 等价于 指定 "*" (也就是说，anacron 会考虑(consider) 所有的 jobs).


除非 执行 anacron 是 使用了 -d 选项 (specified below), 否则 其 在 start 时 会 forks to the background, 任何 parent processes 会 立刻退出(exit).

除非 执行 anacron 时 使用了 -s 后 -n 选项, 否则 anacron 会在  它们的 delay 超过时立刻 starts jobs. 不同 jobs 的执行 是完全独立的.


如果 执行的 job 生成了 到 standard output 或 到 standard error 的输出(output),
则该 output 将会被 mailed 给 以 其指定的身份 运行 anacron的那个 user(通常为root),
或者 mailed 到 文件 /etc/anacrontab 中 MAILTO environment variable 指定的 address(如果其存在的话).
如果 设置了 LOGNAME environment variable, 则其 会被 用在 mail 的 From: 字段中.


在将 facility 设置为 cron 和 priority 设置为 notice 时, 任何由 anacron 生成的通知消息(informative messages) 会被 发送(sent) 到 syslogd(8) 或 rsyslogd(8),

"Active" jobs (如 anacron 已经决定 运行 其 现在正在等待其 delay 过去的 jobs, 和 当前正在 被 anacron 执行的 jobs),
会被 "locked", so that other copies of Anacron cannot run them at the same time.

FILES
       /etc/anacrontab
              Contains specifications of jobs.  See anacrontab(5) for a complete description.

       /var/spool/anacron
              This directory is used by Anacron for storing timestamp files.


[root@basic ~]# cat /etc/anacrontab
# /etc/anacrontab: configuration file for anacron

# See anacron(8) and anacrontab(5) for details.

SHELL=/bin/sh
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
# the maximal random delay added to the base delay of the jobs
RANDOM_DELAY=45
# the jobs will be started during the following hours only
START_HOURS_RANGE=3-22

#period in days   delay in minutes   job-identifier           command
1                    5                cron.daily              nice run-parts /etc/cron.daily
7                    25               cron.weekly             nice run-parts /etc/cron.weekly
@monthly             45               cron.monthly            nice run-parts /etc/cron.monthly




如下内容来自 《鸟哥的linux私房菜》

anacron 其实是一支程序并非一个服务！这支程序在 CentOS 当中已经进入 crontab 的排程喔！
同时 anacron 会每个小时被主动执行一次喔！ 咦！每个小时？
所以 anacron 的配置文件应该放置在 /etc/cron.hourly 吗？嘿嘿！您真内行～赶紧来瞧一瞧：

[root@basic ~]# cat /etc/cron.hourly/0anacron
#!/bin/sh
# Check whether 0anacron was run today already
if test -r /var/spool/anacron/cron.daily; then
    day=`cat /var/spool/anacron/cron.daily`
fi
if [ `date +%Y%m%d` = "$day" ]; then
    exit 0;
fi

# Do not run jobs when on battery power
if test -x /usr/bin/on_ac_power; then
    /usr/bin/on_ac_power >/dev/null 2>&1
    if test $? -eq 1; then
    exit 0
    fi
fi
/usr/sbin/anacron -s
[root@basic ~]#

在我们的 CentOS 中，anacron 的进行其实是在每个小时都会被抓出来执行一次，
但是为了担心 anacron 误判时间参数，因此 /etc/cron.hourly/ 里面的 anacron 才会在档名之前加个 0 (0anacron),
让 anacron 最先进行！就是为了让时间戳先更新！以避免 anacron 误判 crontab 尚未进行任何工作的意思。

[root@basic ~]# ls /var/spool/anacron/   # 该目录下放置的就是 anacron 存储 timestamp 的 files.
cron.daily  cron.monthly  cron.weekly


最后，我们来总结一下本章谈到的许多配置文件与目录的关系吧！这样我们才能了解 crond 与 anacron 的关系：
1. crond 会主动去读取 /etc/crontab, /var/spool/cron/*, /etc/cron.d/* 等配置文件，并依据『分、时、日、月、周』的时间设定去各项工作排程；
2. 根据 /etc/cron.d/0hourly 的设定，主动去 /etc/cron.hourly/ 目录下，执行所有在该目录下的执行文件；
3. 因为 /etc/cron.hourly/0anacron 这个脚本文件的缘故，主动的每小时执行 anacron ，并呼叫 /etc/anacrontab 的配置文件；
4. 根据 /etc/anacrontab 的设定，依据每天、每周、每月去分析 /etc/cron.daily/, /etc/cron.weekly/, /etc/cron.monthly/ 内的执行文件，以进行固定周期需要执行的指令。

