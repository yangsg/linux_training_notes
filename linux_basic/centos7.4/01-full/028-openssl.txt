
# keyword openssl

man openssl
man req
man rsa
man 5 x509v3_config
man 5 config
man x509
man version

/etc/pki/tls/openssl.cnf

man update-ca-trust

注: RSA非对称加密算法的 1024 位 key 已经不那么安全了, 所以最好使用 2048 位的

注: openssl 中 list-message-digest-commands 命令已经过时了, 所以最好避免使用这种命令

      https://www.madboa.com/geek/openssl/

---------------------------------------------------------------------------------------------------
// 利用 rsa 私钥 导出 rsa 公钥
[root@basic ~]# openssl rsa -in /etc/nginx/ssl/private/server.key -pubout
writing RSA key
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAv73oQwe5hZXYxgobGVWS
Z+zq2s24q3C2stX8ZMrZ4Kk4aCnzZbftTWcJ53kf77Kc6gFyZU2FMB8AQ2MgM9C8
sAH3vWZaF2q+OdmtJz/riyeHVQ9jK10wv3JCeT9VwTSHtYKX1w9hZAmHnmf9j0/z
G0llRMy0dzAh4b08gBDYxm2zupR1f76w7IB6OfXX0VcO9dHog+ltKUhNAFNp6iD2
et8TzOsNpQ1VakUFJg0nZpgG06DxdARDcuBzESVBWFK9P/+VG58L8IHegqNrcBjz
4Nb8sSnLOckUB+biM86pwHNlQN2o2VS6evcpLKfUR5kr/y8/G2iHL6eMQJcqoni8
0QIDAQAB
-----END PUBLIC KEY-----

---------------------------------------------------------------------------------------------------

[root@basic ~]# yum -y update openssl

[root@basic ~]# rpm -q openssl
    openssl-1.0.2k-16.el7_6.1.x86_64

---------------------------------------------------------------------------------------------------
示例: 一步到位 快速生成 自签名的证书 (包括生成 私钥)

[root@basic ~]# openssl req -x509 -nodes -days 3650 -sha256 -newkey rsa:2048 -keyout mycert.pem -out mycert.pem

    -x509:   生成自签名的证书 而非 生成证书请求
    -nodes:  不为 private key 设密码
    -days n:   证书的有效天数
    -newkey rsa:2048  生成一个新的 证书请求 和 私钥, rsa:2048 表示 2048 bits 的 rsa 私钥
    -keyout filename  将新生成的 私钥 存放在 filename 对应的文件中
    -out filename     此例 中 指的是 自签名的证书 存放的文件 (因为此例中明确使用了选项 -x509 来生成自签名证书)
    -[digest]         签名 证书请求的 摘要算法, 此例为 -sha256, 用于覆盖默认的对应设置(其实当前 /etc/pki/tls/openssl.cnf 中默认也是 sha256)

  此例中 将 私钥 和 证书 存放在了同一个文件中, 所有 如果将 文件的后缀名 命名为 .crt 或 .key 都不太 合适,
  所以命令为了 .pem , 因为 .pem 文件 可以同时包含 证书 和 私钥.


-----------
示例: 一步到位 快速生成 自签名的证书 (包括生成 私钥), 且 直接通过 选项 -subj 来指定 DN (即 Distinguished Name) 而 无需进入交互模式
[root@basic ~]# openssl req  -x509 -nodes -days 3650 -sha256 \
                 -subj '/C=CN/ST=Chongqing/L=Jiulongpo/CN=xintian.com' \
                 -newkey rsa:2048 -keyout mycert.pem -out mycert.pem


---------------------------------------------------------------------------------------------------
示例: 分步骤 生成 私钥, 证书请求 和 自签名证书文件

     注: 实际还应考虑 为 相关目录 和 生成文件 设置合适的权限

[root@basic ~]# mkdir -p /etc/nginx/ssl/private

// 01: 生成 私钥文件
[root@basic ~]# openssl genrsa 2048 > /etc/nginx/ssl/private/server.key

// 02: 生成 证书请求 文件 (利用 已存在的 私钥文件)
[root@basic ~]# openssl req -new -key /etc/nginx/ssl/private/server.key > /etc/nginx/ssl/server.csr
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:CN   <======= 国家
State or Province Name (full name) []:Chongqing   <========= 省份
Locality Name (eg, city) [Default City]:Jiulongpo  <======== 城市
Organization Name (eg, company) [Default Company Ltd]:Chongqing XinTian Network Co Ltd  <========= 公司名
Organizational Unit Name (eg, section) []:XinTian   <========= 单位名
Common Name (eg, your name or your server's hostname) []:xintian.com   <============= 域名
Email Address []:admin@163.com  <========== 邮箱地址

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:   <======== 直接回车
An optional company name []: <======== 直接回车

    ------------------------------
    可选操作(检查):
             验证 签名:
                [root@basic ~]# openssl req  -in /etc/nginx/ssl/server.csr -noout -verify -key /etc/nginx/ssl/private/server.key
                verify OK
              检查 证书请求 中的 信息:
                [root@basic ~]# openssl req -in /etc/nginx/ssl/server.csr -noout -text

    ------------------------------

// 03: 生成 自签名 证书
[root@basic ~]# openssl req -x509 -days 3650 -key /etc/nginx/ssl/private/server.key -in /etc/nginx/ssl/server.csr > /etc/nginx/ssl/server.crt

---------------------------------------------------------------------------------------------------
示例: 测试新证书: (本例假设 私钥 和 证书 都存放在 mycert.pem 文件中, 且 basic 主机的 ip 为 192.168.175.10)
[root@basic ~]# openssl s_server -cert mycert.pem -www  # 启动 test 服务, 则默认监听在 4433 端口, 注: 使用选项 -accept port 可以使其监听在 其他指定的 端口(port) 上

[root@basic ~]# netstat -anptu | grep openssl
tcp6       0      0 :::4433                 :::*                    LISTEN      1764/openssl

    然后打开浏览器, 访问 https://192.168.175.10:4433
    则可以看到 各种可用的 ciphers 和 一些 connection 的统计信息

    如下这行命令时是 证书 和 私钥 不再同一文件中的例子:
    [root@basic ~]# openssl s_server -cert /etc/nginx/ssl/server.crt  -key /etc/nginx/ssl/private/server.key  -www -accept 4433

// 提取 远程 证书
[root@basic ~]# echo | openssl s_client -connect 192.168.175.10:4433 2>&1 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p'
-----BEGIN CERTIFICATE-----
MIIEITCCAwmgAwIBAgIJAKwaZGMXubRmMA0GCSqGSIb3DQEBCwUAMIGmMQswCQYD
VQQGEwJDTjESMBAGA1UECAwJQ2hvbmdxaW5nMRIwEAYDVQQHDAlKaXVsb25ncG8x
KTAnBgNVBAoMIENob25ncWluZyBYaW5UaWFuIE5ldHdvcmsgQ28gTHRkMRAwDgYD
VQQLDAdYaW5UaWFuMRQwEgYDVQQDDAt4aW50aWFuLmNvbTEcMBoGCSqGSIb3DQEJ
ARYNYWRtaW5AMTYzLmNvbTAeFw0xOTA2MjExMTMzMThaFw0yOTA2MTgxMTMzMTha
MIGmMQswCQYDVQQGEwJDTjESMBAGA1UECAwJQ2hvbmdxaW5nMRIwEAYDVQQHDAlK
aXVsb25ncG8xKTAnBgNVBAoMIENob25ncWluZyBYaW5UaWFuIE5ldHdvcmsgQ28g
THRkMRAwDgYDVQQLDAdYaW5UaWFuMRQwEgYDVQQDDAt4aW50aWFuLmNvbTEcMBoG
CSqGSIb3DQEJARYNYWRtaW5AMTYzLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEP
ADCCAQoCggEBANBSOwvHK6LP2Mi831nU3OxANLC/s0E+cduugUxuyCBWgu+xtj3/
kb2JFVTZwd6unt0u64mfAML+m34yHdNQ4DWoXDrxXaFd8BIhsNrp1jXbgcNny3El
i7ccufOvDO1tHXWA2fvTD8LMigrUMwmtcNLN4oay9AjSvxqjvkAjSdZ8qGOB8NJS
Up4aKWr90cjzoQGIvIVepWOqpUluCDX1N1BMZCnL31VRnHhyt+rOWnl1rGc2Vl8A
fMmgLjB2HtyuhDNmdIcpF2koz0+mQ+X6km8KFrOGjIH6nlzIKglOnCnQe1efRdXy
yZ7lGkDm5N83u7fth0MqTtg+8Ni9okWkBOMCAwEAAaNQME4wHQYDVR0OBBYEFCLX
1iO/s4uf4YEYfFRwOF4kYzWEMB8GA1UdIwQYMBaAFCLX1iO/s4uf4YEYfFRwOF4k
YzWEMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAHFqGar8mi3t4riy
qtZAOSSZwzhJT9twtsgb7MQKLAb4Ebh9BSXLSD+ZfoBPsMnjwR0SQVPNaFvjo2s6
yvNYnx2qmfVuyf6+i0DVABQgMZkjXE0hQsRDaunqOJ8/xmSXEHyju+1jnm/y4ALr
CDy28PRNVTpWC8wIC8BlvMl8fNx/fTJlKBZs9YDAHMR+6y4u+LKQ830XGEJbnXyB
titeOn7lE65Eb7gjhQFcHQFcDXr/mUHwdwVEa4+R/zp5jxMe9+XYwi9FMpp2gOZ5
xmoeq0aFu/9iyquFDkuzy/sq2g8bdsVb2oVQmbuRq2ECtSNDqGlHRCd+EwmUaZkA
9cto/Nw=
-----END CERTIFICATE-----

// 检查 证书 有效 期限
[root@basic ~]# echo | openssl s_client -connect 192.168.175.10:4433 2>&1 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | openssl x509 -noout -subject -dates
subject= /C=CN/ST=Chongqing/L=Jiulongpo/O=Chongqing XinTian Network Co Ltd/OU=XinTian/CN=xintian.com/emailAddress=admin@163.com
notBefore=Jun 21 11:33:18 2019 GMT
notAfter=Jun 18 11:33:18 2029 GMT

---------------------------------------------------------------------------------------------------
示例: x509 命令的 作用之一 是 显示 证书 信息, 所以可以用它 来 提取出 某些 证书信息


[root@basic ~]# openssl x509 -text -in mycert.pem     # 显示 证书所有信息

[root@basic ~]# openssl x509 -noout -in mycert.pem -issuer   # 谁办法的证书?
issuer= /C=CN/ST=Chongqing/L=Jiulongpo/CN=xintian.com     <---- 自己给自己颁发的证书

[root@basic ~]# openssl x509 -noout -in mycert.pem -subject  # 颁发给谁的证书?
subject= /C=CN/ST=Chongqing/L=Jiulongpo/CN=xintian.com   <------- 颁发给自己的证书

[root@basic ~]# openssl x509 -noout -in mycert.pem -dates    # 证书的有效期限?
notBefore=Jun 21 10:50:54 2019 GMT
notAfter=Jun 18 10:50:54 2029 GMT

[root@basic ~]# openssl x509 -noout -in mycert.pem -issuer -subject -dates   # 一次性显示 如上提到的 多个信息
issuer= /C=CN/ST=Chongqing/L=Jiulongpo/CN=xintian.com
subject= /C=CN/ST=Chongqing/L=Jiulongpo/CN=xintian.com
notBefore=Jun 21 10:50:54 2019 GMT
notAfter=Jun 18 10:50:54 2029 GMT

[root@basic ~]# openssl x509 -noout -in mycert.pem -hash   # what is its hash value?
e126bc89

[root@basic ~]# openssl x509 -noout -in mycert.pem -fingerprint   # what is its MD5 fingerprint?
SHA1 Fingerprint=70:DC:C7:0D:45:73:08:1D:85:F6:5C:F7:33:E9:73:A6:02:2E:22:AC

---------------------------------------------------------------------------------------------------
示例: 导出 或 导入 PKCS#12 证书 (export or import a PKCS#12 certificate)
    关于 PKCS#12 的网上资料:
        https://baike.baidu.com/item/PKCS%2312/3158673?fr=aladdin
        https://www.ibm.com/support/knowledgecenter/zh/SSMNED_5.0.0/com.ibm.apic.apionprem.doc/task_apionprem_generate_pkcs_certificate.html
        https://baike.baidu.com/item/PKCS/1042350
        https://blog.csdn.net/github_37567324/article/details/79883685


// 创建 私钥 和 自签名证书 (导出 PKCS#12 文件所需要)
[root@basic ~]# openssl req -x509 -sha256 -nodes -days 3650 -newkey rsa:2048 -keyout server.key -out server.crt

// 利用 证书 和 私钥 导出(创建) pkcs12 文件(即 server.pfx 文件)
[root@basic ~]# openssl pkcs12 -export -out server.pfx -in server.crt -inkey server.key -name "xintian Certificate"
Enter Export Password:    <============== 直接回车, 不需要 password
Verifying - Enter Export Password: <============== 直接回车, 不需要 password

// 利用 mycert.pem (该文件同时包含 私钥 和 证书) 导出(创建) 为 pkcs12 文件(没有 passphrase)
[root@basic ~]# openssl pkcs12 -export -out mycert.pfx -in mycert.pem -name "My Certificate"
Enter Export Password: <============== 直接回车, 不需要 password
Verifying - Enter Export Password: <============== 直接回车, 不需要 password


// 利用 pkcs12 文件 导出 创建 pem 文件(同时包含 证书 和 私钥)
[root@basic ~]# openssl pkcs12 -in mycert.pfx -out mycert.pem -nodes
Enter Import Password:  <====== 直接回车
MAC verified OK


---------------------------------------------------------------------------------------------------
示例:
      使用 openssl 校验证书链 (以 淘宝 证书为例)
      参考:  https://blog.51cto.com/ipcpu/1982109
             https://raymii.org/s/articles/OpenSSL_manually_verify_a_certificate_against_a_CRL.html
             https://stackoverflow.com/questions/25482199/verify-a-certificate-chain-using-openssl-verify


// 取得淘宝证书信息
[root@basic ~]# openssl s_client -showcerts -connect www.taobao.com:443

// 分析淘宝的证书信息, 提取相应的证书 (注: 但是根证书需要自己从网上下载)

// 获取根证书 (注: 验证用的证书必须是 pem 格式的)
        https://support.globalsign.com/customer/portal/articles/1426602-globalsign-root-certificates

[root@basic ~]# vim Root-R1.crt     # 这里直接复制保存 根证书信息(GlobalSign Root CA), 其实可以在文件 /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem 中找到
-----BEGIN CERTIFICATE-----
MIIDdTCCAl2gAwIBAgILBAAAAAABFUtaw5QwDQYJKoZIhvcNAQEFBQAwVzELMAkG
A1UEBhMCQkUxGTAXBgNVBAoTEEdsb2JhbFNpZ24gbnYtc2ExEDAOBgNVBAsTB1Jv
b3QgQ0ExGzAZBgNVBAMTEkdsb2JhbFNpZ24gUm9vdCBDQTAeFw05ODA5MDExMjAw
MDBaFw0yODAxMjgxMjAwMDBaMFcxCzAJBgNVBAYTAkJFMRkwFwYDVQQKExBHbG9i
YWxTaWduIG52LXNhMRAwDgYDVQQLEwdSb290IENBMRswGQYDVQQDExJHbG9iYWxT
aWduIFJvb3QgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDaDuaZ
jc6j40+Kfvvxi4Mla+pIH/EqsLmVEQS98GPR4mdmzxzdzxtIK+6NiY6arymAZavp
xy0Sy6scTHAHoT0KMM0VjU/43dSMUBUc71DuxC73/OlS8pF94G3VNTCOXkNz8kHp
1Wrjsok6Vjk4bwY8iGlbKk3Fp1S4bInMm/k8yuX9ifUSPJJ4ltbcdG6TRGHRjcdG
snUOhugZitVtbNV4FpWi6cgKOOvyJBNPc1STE4U6G7weNLWLBYy5d4ux2x8gkasJ
U26Qzns3dLlwR5EiUWMWea6xrkEmCMgZK9FGqkjWZCrXgzT/LCrBbBlDSgeF59N8
9iFo7+ryUp9/k5DPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8E
BTADAQH/MB0GA1UdDgQWBBRge2YaRQ2XyolQL30EzTSo//z9SzANBgkqhkiG9w0B
AQUFAAOCAQEA1nPnfE920I2/7LqivjTFKDK1fPxsnCwrvQmeU79rXqoRSLblCKOz
yj1hTdNGCbM+w6DjY1Ub8rrvrTnhQ7k4o+YviiY776BQVvnGCv04zcQLcFGUl5gE
38NflNUVyRRBnMRddWQVDf9VMOyGj/8N7yy5Y0b2qvzfvGn9LhJIZJrglfCm7ymP
AbEVtQwdpf5pLGkkeB6zpxxxYu7KyJesF12KwvhHhm4qxFYxldBniYUr+WymXUad
DKqC5JlR3XC321Y9YeRq4VzW9v493kHMB65jUr9TU/Qr6cf9tveCX4XSQRjbgbME
HMUfpIBvFSDJ3gyICh3WZlXi/EjJKSZp4A==
-----END CERTIFICATE-----

// 保存 GlobalSign Organization Validation CA 的证书
[root@basic ~]# vim globalsign.crt
-----BEGIN CERTIFICATE-----
MIIEaTCCA1GgAwIBAgILBAAAAAABRE7wQkcwDQYJKoZIhvcNAQELBQAwVzELMAkG
A1UEBhMCQkUxGTAXBgNVBAoTEEdsb2JhbFNpZ24gbnYtc2ExEDAOBgNVBAsTB1Jv
b3QgQ0ExGzAZBgNVBAMTEkdsb2JhbFNpZ24gUm9vdCBDQTAeFw0xNDAyMjAxMDAw
MDBaFw0yNDAyMjAxMDAwMDBaMGYxCzAJBgNVBAYTAkJFMRkwFwYDVQQKExBHbG9i
YWxTaWduIG52LXNhMTwwOgYDVQQDEzNHbG9iYWxTaWduIE9yZ2FuaXphdGlvbiBW
YWxpZGF0aW9uIENBIC0gU0hBMjU2IC0gRzIwggEiMA0GCSqGSIb3DQEBAQUAA4IB
DwAwggEKAoIBAQDHDmw/I5N/zHClnSDDDlM/fsBOwphJykfVI+8DNIV0yKMCLkZc
C33JiJ1Pi/D4nGyMVTXbv/Kz6vvjVudKRtkTIso21ZvBqOOWQ5PyDLzm+ebomchj
SHh/VzZpGhkdWtHUfcKc1H/hgBKueuqI6lfYygoKOhJJomIZeg0k9zfrtHOSewUj
mxK1zusp36QUArkBpdSmnENkiN74fv7j9R7l/tyjqORmMdlMJekYuYlZCa7pnRxt
Nw9KHjUgKOKv1CGLAcRFrW4rY6uSa2EKTSDtc7p8zv4WtdufgPDWi2zZCHlKT3hl
2pK8vjX5s8T5J4BO/5ZS5gIg4Qdz6V0rvbLxAgMBAAGjggElMIIBITAOBgNVHQ8B
Af8EBAMCAQYwEgYDVR0TAQH/BAgwBgEB/wIBADAdBgNVHQ4EFgQUlt5h8b0cFilT
HMDMfTuDAEDmGnwwRwYDVR0gBEAwPjA8BgRVHSAAMDQwMgYIKwYBBQUHAgEWJmh0
dHBzOi8vd3d3Lmdsb2JhbHNpZ24uY29tL3JlcG9zaXRvcnkvMDMGA1UdHwQsMCow
KKAmoCSGImh0dHA6Ly9jcmwuZ2xvYmFsc2lnbi5uZXQvcm9vdC5jcmwwPQYIKwYB
BQUHAQEEMTAvMC0GCCsGAQUFBzABhiFodHRwOi8vb2NzcC5nbG9iYWxzaWduLmNv
bS9yb290cjEwHwYDVR0jBBgwFoAUYHtmGkUNl8qJUC99BM00qP/8/UswDQYJKoZI
hvcNAQELBQADggEBAEYq7l69rgFgNzERhnF0tkZJyBAW/i9iIxerH4f4gu3K3w4s
32R1juUYcqeMOovJrKV3UPfvnqTgoI8UV6MqX+x+bRDmuo2wCId2Dkyy2VG7EQLy
XN0cvfNVlg/UBsD84iOKJHDTu/B5GqdhcIOKrwbFINihY9Bsrk8y1658GEV1BSl3
30JAZGSGvip2CTFvHST0mdCF/vIhCPnG9vHQWe3WVjwIKANnuvD58ZAWR65n5ryA
SOlCdjSXVWkkDoPWoC209fN5ikkodBpBocLTJIg1MGCUF7ThBCIxPTsvFwayuJ2G
K1pp74P1S8SqtCr4fKGxhZSM9AyHDPSsQPhZSZg=
-----END CERTIFICATE-----

[root@basic ~]# echo | openssl s_client -connect www.taobao.com:443 2>&1 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p'  > taobao.crt

[root@basic ~]# openssl verify Root-R1.crt   # 验证根证书
Root-R1.crt: OK

[root@basic ~]# openssl verify -CAfile Root-R1.crt globalsign.crt   # 验证 GlobalSign Organization Validation CA 的证书
globalsign.crt: OK

[root@basic ~]# openssl verify -CAfile <(cat Root-R1.crt globalsign.crt) taobao.crt   # 验证淘宝证书
taobao.crt: OK

              // 利用 -CApath directory 选项来 验证淘宝证书
              [root@basic ~]# yum -y install openssl-perl    # 安装包含 c_rehash 命令 的 package
              [root@basic ~]# mkdir dir01
              [root@basic ~]# cp Root-R1.crt globalsign.crt dir01/
              [root@basic ~]# c_rehash ./dir01/  # 扫描并创建 filename 为 hash value 的 文件(其实是对原本证书的符号链接)
              Doing ./dir01/
              [root@basic ~]# tree dir01/
                    dir01/
                    ├── 5ad8a5d6.0 -> Root-R1.crt    <------ 观察, 查看证书文件对应的hash值可用 `openssl x509 -noout -hash -in Root-R1.crt`
                    ├── b85455c4.0 -> globalsign.crt <------ 观察
                    ├── globalsign.crt
                    └── Root-R1.crt

              [root@basic ~]# openssl verify -CApath dir01/ taobao.crt  # 使用选项 -CApath 指定目录 来 验证 taobao.crt
              taobao.crt: OK

              [root@basic ~]# openssl x509 -noout -hash -in Root-R1.crt   # 查看 证书 Root-R1.crt 对应的 hash 值
              5ad8a5d6

---------------------------------------------------------------------------------------------------
OpenSSL 所识别的 certificate authorities, 详细信息见 https://www.madboa.com/geek/openssl/#what-certificate-authorities-does-openssl-recognize

[root@basic ~]# openssl version -d
OPENSSLDIR: "/etc/pki/tls"  <------- system 信任的 证书颁发机构 信息 所在目录

[root@basic ~]# tree /etc/pki/tls/
/etc/pki/tls/
├── cert.pem -> /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem   <----该文件包含了被识别的许多权威认证机构的 证书的集合
├── certs
│   ├── ca-bundle.crt -> /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem
│   ├── ca-bundle.trust.crt -> /etc/pki/ca-trust/extracted/openssl/ca-bundle.trust.crt
│   ├── localhost.crt
│   ├── make-dummy-cert
│   ├── Makefile
│   └── renew-dummy-cert
├── misc
│   ├── CA
│   ├── c_hash
│   ├── c_info
│   ├── c_issuer
│   └── c_name
├── openssl.cnf
└── private
    └── localhost.key


---------------------------------------------------------------------------------------------------
添加信任证书:

      https://stackoverflow.com/questions/37043442/how-to-add-certificate-authority-file-in-centos-7
      https://www.happyassassin.net/2015/01/14/trusting-additional-cas-in-fedora-rhel-centos-dont-append-to-etcpkitlscertsca-bundle-crt-or-etcpkitlscert-pem/

      https://access.redhat.com/errata/RHEA-2013:1596
      https://fedoraproject.org/wiki/Features/SharedSystemCertificates


      https://manuals.gfi.com/en/kerio/connect/content/server-configuration/ssl-certificates/adding-trusted-root-certificates-to-the-server-1605.html


      How to reset the list of trusted CA certificates in RHEL 6 & RHEL 7
      https://access.redhat.com/solutions/1549003


      [root@basic ~]# rpm -q ca-certificates
      ca-certificates-2017.2.14-71.el7.noarch

      /etc/pki/ca-trust/source        <--- 包含一些子目录, 其中存放了 系统特定的认证机构的证书和 信任设置, 且格式为 pem 的文件 (其优先级更高)
      /usr/share/pki/ca-trust-source  <--- 包含一些子目录, 其中存放了 系统默认的认证机构的证书和 信任设置, 且格式为 pem 的文件 (其优先级更低)

      /etc/pki/ca-trust/extracted  <---- 该目录下存放了 update-ca-trust 或 `ca-certificates extract` 命令从其他 资源目录下的配置文件中 动态提取生成的 配置文件

      命令 update-ca-trust 与 命令 `ca-certificates extract` 的作用相同, 只是 update-ca-trust 的警告信息会少一些,
      因为其 会在 rpm package 安装时被执行,此时非致命的警告通常是不期望被看到的.

      注意事项:
           1. 永远不要手动修改目录 /etc/pki/ca-trust/extracted 下的文件
           2. 修改目录 /etc/pki/ca-trust/source 或 /usr/share/pki/ca-trust-source 或它们任意子目录中 的文件中,
               一定要执行命令 `ca-certificates extract` 使这些修改被自动更新到目录 /etc/pki/ca-trust/extracted 下 自动生成的 各文件中

---------------------------------------------------------------------------------------------------

// 连接使用了 SNI(即 Server Name Indication) 的 web 服务器 (通过 -servername name 选项指定 host)
[root@basic ~]# openssl s_client -connect www.massivehost.com:443 -servername www.myhost.com


---------------------------------------------------------------------------------------------------
摘要 Digests

// 查看实际 可用 的摘要 算法
[root@basic ~]# openssl dgst -h
unknown option '-h'
options are
-c              to output the digest with separating colons
-r              to output the digest in coreutils format
-d              to output debug info
-hex            output as hex dump
-binary         output in binary form
-hmac arg       set the HMAC key to arg
-non-fips-allow allow use of non FIPS digest
-sign   file    sign digest using private key in file
-verify file    verify a signature using public key in file
-prverify file  verify a signature using private key in file
-keyform arg    key file format (PEM or ENGINE)
-out filename   output to filename rather than stdout
-signature file signature to verify
-sigopt nm:v    signature parameter
-hmac key       create hashed MAC with key
-mac algorithm  create MAC (not neccessarily HMAC)
-macopt nm:v    MAC algorithm parameters or key
-engine e       use engine e, possibly a hardware device.
-md4            to use the md4 message digest algorithm
-md5            to use the md5 message digest algorithm
-ripemd160      to use the ripemd160 message digest algorithm
-sha            to use the sha message digest algorithm
-sha1           to use the sha1 message digest algorithm
-sha224         to use the sha224 message digest algorithm
-sha256         to use the sha256 message digest algorithm
-sha384         to use the sha384 message digest algorithm
-sha512         to use the sha512 message digest algorithm
-whirlpool      to use the whirlpool message digest algorithm

// MD5 digest
[root@basic ~]# openssl dgst -md5 /etc/fstab
MD5(/etc/fstab)= cc030f399acf8caaecf2c66958475304

// SHA1 digest
[root@basic ~]# openssl dgst -sha1 /etc/fstab
SHA1(/etc/fstab)= 3503b404be99e5e8ffd0e6208389777a8808205f

// SHA256 digest
[root@basic ~]# openssl dgst -sha256 /etc/fstab
SHA256(/etc/fstab)= de5b5a1ab3ffc3f78fa6c73a8c66e0c216efa11f378da6a49e1def425b131fb5

# 其实命令 md5sum 和 命令 `openssl dgst -md5` 命令求值的结果是一样的, 只是输出格式不同而已
[root@basic ~]# md5sum /etc/fstab
cc030f399acf8caaecf2c66958475304  /etc/fstab

# 其实命令 sha1sum 和 命令 `openssl dgst -sha1` 命令求值的结果是一样的, 只是输出格式不同而已
[root@basic ~]# sha1sum /etc/fstab
3503b404be99e5e8ffd0e6208389777a8808205f  /etc/fstab

-----
// 使用 私钥 对 文件的 摘要 进行签名
[root@basic ~]# openssl dgst -sha256 -sign my.key -out fstab.sha1 /etc/fstab

// 查看 fstab.sha1 的文件类型
[root@basic ~]# file fstab.sha1
fstab.sha1: data

// 利用 rsa 的私钥 生成 rsa 的公钥
[root@basic ~]# openssl rsa -in my.key -pubout >  pubkey.pem
writing RSA key

// 利用 对应的 公钥 验证 签名的 指摘
[root@basic ~]# openssl dgst -sha256 -verify pubkey.pem -signature fstab.sha1 /etc/fstab
Verified OK


---------------------------------------------------------------------------------------------------
(对称)加密/解密  Encryption/Decryption

[root@basic ~]# echo helloworld > a.txt

// 使用 base64 对 a.txt 文件内容进行编码
[root@basic ~]# openssl enc -base64 -in a.txt
aGVsbG93b3JsZAo=

// 同上, 使用 base64 对 a.txt 文件内容进行编码, 当将结果保存到指定文件中
[root@basic ~]# openssl enc -base64 -in a.txt -out a.txt.enc

// 直接对字符换进行编码
[root@basic ~]# echo "encode me" | openssl enc -base64     # 注意 echo 默认会自动在 最后加 '\n' 字符.
ZW5jb2RlIG1lCg==

[root@basic ~]# echo -n "encode me" | openssl enc -base64  # 使用 echo -n 避免 echo 自动在 结尾加 '\n' 字符\n
ZW5jb2RlIG1l

// 使用 -d (decode) 选项执行逆向操作 (即 解码)
[root@basic ~]# echo "ZW5jb2RlIG1lCg==" | openssl enc -base64 -d
encode me

---------------------------------------------------------------------------------------------------
// encrypt a.txt to a.enc using 256-bit AES in CBC mode
[root@basic ~]# openssl enc -aes-256-cbc -salt -in a.txt -out a.enc
enter aes-256-cbc encryption password:
Verifying - enter aes-256-cbc encryption password:
[root@basic ~]# file a.enc
a.enc: data  <----- 观察: 二进制文件

// the same, only the output is base64 encoded for, e.g., e-mail (先加密,在以 base64 编码, 便于直接邮件传输)
[root@basic ~]# openssl enc -aes-256-cbc -base64 -salt -in a.txt -out a.enc
enter aes-256-cbc encryption password:
Verifying - enter aes-256-cbc encryption password:
[root@basic ~]# file a.enc
a.enc: ASCII text <---- 观察: 字符编码文件

要解密,需要 记住 加密算法 和 加密口令

// decrypt binary a.enc (解密 二进制文件)
[root@basic ~]# openssl enc -d -aes-256-cbc -in a.enc
enter aes-256-cbc decryption password:
helloworld

// decrypt base64-encoded version (解密 base64 编码的文件)
[root@basic ~]# openssl enc -d -aes-256-cbc -base64 -in a.enc
enter aes-256-cbc decryption password:
helloworld


// 加密时 可以直接在 命令行 中 提供口令 (通过使用 -pass arg 参数选项指定), 更多详细信息见 man openssl #/^PASS PHRASE ARGUMENTS
[root@basic ~]# openssl enc -aes-256-cbc -salt -in a.txt -out file.enc -pass pass:1234567


---------------------------------------------------------------------------------------------------
错误: error, 将 日志 中的 error code 解释为 可读性更好的 error message

如有日志:
  sshd[31784]: error: RSA_public_decrypt failed: error:0407006A:lib(4):func(112):reason(106)

[root@basic ~]# openssl errstr 0407006A
error:0407006A:rsa routines:RSA_padding_check_PKCS1_type_1:block type is not 01



---------------------------------------------------------------------------------------------------
去除口令密钥中的 口令 (remove a passphrase from a key)

// 创建一个 带口令的 rsa 密钥
[root@basic ~]# openssl genrsa -des3 -out key.pem 2048
Generating RSA private key, 2048 bit long modulus
................+++
.+++
e is 65537 (0x10001)
Enter pass phrase for key.pem:
Verifying - Enter pass phrase for key.pem:

// 删除 带口令的 rsa 密钥 中的口令 (即利用 带口令的 rsa 密钥版本生成一个新的 无口令的 rsa 密钥版本)
[root@basic ~]# openssl rsa -in key.pem -out newkey.pem
Enter pass phrase for key.pem:
writing RSA key

// 针对 同时包含 私钥(带口令) 和 证书的 mycert.pem 文件, 利用如下 2 条命令生成器对应的 不带口令的 版本

[root@basic ~]# openssl rsa -in mycert.pem -out newcert.pem   # 提取出 不带口令的 私钥
Enter pass phrase for mycert.pem:
writing RSA key
[root@basic ~]# openssl x509 -in mycert.pem >>newcert.pem     # 提取出 证书


---------------------------------------------------------------------------------------------------
密码散列 Password hashes

使用 passwd 选项, 你能够生成 与 传统的 /etc/passwd 文件, 新风格的 /etc/shadow 文件 以及 Apache 密码问价 交互的 password hashes.

// 生成 crypt 风格的 password hash
[root@basic ~]# openssl passwd MySecret
c72ERLtONIsE.


// 生成 指定盐(salt) 的 crypt 风格的 password hash
[root@basic ~]# openssl passwd -salt 8E MySecret
8E4vqBR4UOYF.

----------------
生成 shadow 风格的 password hash
Newer Unix systems use a more secure MD5-based hashing mechanism that uses an eight-character salt
(as compared to the two-character salt in traditional crypt()-style hashes).
Generating them is still straightforward using the -1 option:

// 生成 基于 md5 的 password hash
[root@basic ~]# openssl passwd -1 MySecret
$1$rLo7u2Up$HjIAU7.iFM8tJlPqo.9kt0

// 生成 指定盐(salt) 的 基于 md5 的 password hash
[root@basic ~]# openssl passwd -1 -salt sXiKzkus MySecret
$1$sXiKzkus$haDZ9JpVrRHBznY5OxB82.


---------------------------------------------------------------------------------------------------
素数(质素) prime   始于 openssl 的 0.9.7e 版本
[root@basic ~]# openssl  prime -h
Unknown option '-h'
options are
-hex           hex
-checks <n>    number of checks

[root@basic ~]# openssl prime 13  # 测试 13 是否是 素数
D is prime  <-------- 注意: 这里返回的是其 hex(16进制) 形式
[root@basic ~]# openssl prime 16  # 测试 16 是否是 素数
10 is not prime <-------- 注意: 这里返回的是其 hex(16进制) 形式

// 如下 的 使用方式 始于 openssl 的 1.0.0 版本
[root@basic ~]# openssl prime -hex D   # 直接传递 hex 形式的 number
D is prime
[root@basic ~]# openssl prime -hex 10  # 直接传递 hex 形式的 number
10 is not prime

[root@basic ~]# openssl prime -generate -bits 64   # 生成 长度 为 64 bits 的 素数, 结果以 十进制 表示
17861720624648851109
[root@basic ~]# openssl prime -generate -bits 64 -hex # 生成 长度 为 64 bits 的 素数, 结果以 十六进制 表示
E1919671DE6C04D3


---------------------------------------------------------------------------------------------------
随机数据 Random data

  使用 rand 选项 能够 生成 binary 或 base64-encoded 的 data

// 生成 长度为 128 的随机 bytes, 并 进过 base64 编码后输出
[root@basic ~]# openssl rand -base64 128
6CIanSgvJ5K/rghYXw8MM2ny8ZnMRug8EnaBwOmXKT66A3io5qco6tHHK8lTK02l
JZSS0wXjCvphA+0uygKAwnqfxze4gIEatWcUVIIBCa7uFOnRNzvgayhfvCd4Vuki
PjO1pq0aKOGl/H6CmtcRCa4mF06BVJMoosR39pfjNEc=

 // 生成 长度为 1024 的随机 bytes 并 写入到 指定 文件中
[root@basic ~]# openssl rand -out random-data.bin 1024

On a Unix box with a /dev/urandom device and a copy of GNU head, or
a recent version of BSD head, you can achieve a similar effect, often with better entropy:

// 使用 head 从 /dev/urandom 中获取 32 bytes, 并 使用 base64 对其 编码
[root@basic ~]# head -c 32 /dev/urandom | openssl enc -base64
XgTacolm8FEE2YoDK3W2baJdOfLMoLHALwaa4Y+xHGc=


You can get a wider variety of characters than what’s offered using Base64 encoding by using strings:o
// get 32 bytes from /dev/urandom, grab printable characters, and
// strip whitespace. using echo and the shell's command substitution
// will nicely strip out newlines.
[root@basic ~]# echo $(head -c 32 /dev/urandom | strings -1) | sed 's/[[:space:]]//g'
C4E<Yo+Sft\

与随机数相关的设备文件有 /dev/random  /dev/urandom
---------------------------------------------------------------------------------------------------
关于 S/MIME 的 处理 见 https://www.madboa.com/geek/openssl/#s-mime

man smime

---------------------------------------------------------------------------------------------------


// 查看 openssl 版本
[root@basic ~]# openssl version
OpenSSL 1.0.2k-fips  26 Jan 2017


// 显示 openssl 的 所有 version 信息
[root@basic ~]# openssl version -a    # 获取更详细的信息
OpenSSL 1.0.2k-fips  26 Jan 2017
built on: reproducible build, date unspecified
platform: linux-x86_64
options:  bn(64,64) md2(int) rc4(16x,int) des(idx,cisc,16,int) idea(int) blowfish(idx)
compiler: gcc -I. -I.. -I../include  -fPIC -DOPENSSL_PIC -DZLIB -DOPENSSL_THREADS -D_REENTRANT -DDSO_DLFCN -DHAVE_DLFCN_H -DKRB5_MIT -m64 -DL_ENDIAN -Wall -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches   -m64 -mtune=generic -Wa,--noexecstack -DPURIFY -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DRC4_ASM -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DMD5_ASM -DAES_ASM -DVPAES_ASM -DBSAES_ASM -DWHIRLPOOL_ASM -DGHASH_ASM -DECP_NISTZ256_ASM
OPENSSLDIR: "/etc/pki/tls"
engines:  rdrand dynamic


// 显示 openssl 目录
[root@basic ~]# openssl version -d
OPENSSLDIR: "/etc/pki/tls"

---------------------------------------------------------------------------------------------------

// 显示可用的 命令列表 (非常规的技巧: 这里使用的是一个非法的 help 命令 或 -h 选项, 通过 stderr 显示所有的 有效命令)
[root@basic ~]# openssl help
openssl:Error: 'help' is an invalid command.

Standard commands
asn1parse         ca                ciphers           cms
crl               crl2pkcs7         dgst              dh
dhparam           dsa               dsaparam          ec
ecparam           enc               engine            errstr
gendh             gendsa            genpkey           genrsa
nseq              ocsp              passwd            pkcs12
pkcs7             pkcs8             pkey              pkeyparam
pkeyutl           prime             rand              req
rsa               rsautl            s_client          s_server
s_time            sess_id           smime             speed
spkac             ts                verify            version
x509

Message Digest commands (see the `dgst' command for more details)
md2               md4               md5               rmd160
sha               sha1

Cipher commands (see the `enc' command for more details)
aes-128-cbc       aes-128-ecb       aes-192-cbc       aes-192-ecb
aes-256-cbc       aes-256-ecb       base64            bf
bf-cbc            bf-cfb            bf-ecb            bf-ofb
camellia-128-cbc  camellia-128-ecb  camellia-192-cbc  camellia-192-ecb
camellia-256-cbc  camellia-256-ecb  cast              cast-cbc
cast5-cbc         cast5-cfb         cast5-ecb         cast5-ofb
des               des-cbc           des-cfb           des-ecb
des-ede           des-ede-cbc       des-ede-cfb       des-ede-ofb
des-ede3          des-ede3-cbc      des-ede3-cfb      des-ede3-ofb
des-ofb           des3              desx              idea
idea-cbc          idea-cfb          idea-ecb          idea-ofb
rc2               rc2-40-cbc        rc2-64-cbc        rc2-cbc
rc2-cfb           rc2-ecb           rc2-ofb           rc4
rc4-40            rc5               rc5-cbc           rc5-cfb
rc5-ecb           rc5-ofb           seed              seed-cbc
seed-cfb          seed-ecb          seed-ofb          zlib

// 类似的技巧(trick):
[root@basic ~]# openssl dgst -h


---------------------------------------------------------------------------------------------------
网上资料：

    https://stackoverflow.com/questions/13732826/convert-pem-to-crt-and-key
    https://serverfault.com/questions/9708/what-is-a-pem-file-and-how-does-it-differ-from-other-openssl-generated-key-file
    https://crypto.stackexchange.com/questions/43697/what-is-the-difference-between-pem-csr-key-and-crt
    https://www.madboa.com/geek/openssl/
    https://www.shellhacks.com/openssl-find-ssl-key-length-linux-command-line/


    https://www.digicert.com/ssl-certificate-country-codes.htm
    https://stackoverflow.com/questions/8075274/is-it-possible-making-openssl-skipping-the-country-common-name-prompts
    https://security.stackexchange.com/questions/150770/are-certificate-sans-case-sensitive

    私钥相关权限设置:
        https://superuser.com/questions/215504/permissions-on-private-key-in-ssh-folder
        https://stackoverflow.com/questions/9270734/ssh-permissions-are-too-open-error
        https://support.rackspace.com/how-to/logging-in-with-an-ssh-private-key-on-linuxmac/
        https://superuser.com/questions/556493/permissions-for-ssl-key
        https://unix.stackexchange.com/questions/115838/what-is-the-right-file-permission-for-a-pem-file-to-ssh-and-scp

    私钥位置:
        https://serverfault.com/questions/259302/best-location-for-ssl-certificate-and-private-keys-on-ubuntu

    HTTPS 安全最佳实践:
          https://blog.myssl.com/ssl-and-tls-deployment-best-practices/
          https://blog.myssl.com/https-security-best-practices/
          https://blog.myssl.com/https-security-best-practices-2/

    使用 openssl 校验证书链
          https://blog.51cto.com/ipcpu/1982109
          https://raymii.org/s/articles/OpenSSL_manually_verify_a_certificate_against_a_CRL.html
          https://stackoverflow.com/questions/25482199/verify-a-certificate-chain-using-openssl-verify


关于证书类型: AlphaSSL, DomainSSL, OrganizationSSL, ExtendedSSL
    https://www.fodytechnologies.com/ssl-certificates/alphassl/
    https://www.globalsign.com/en/ssl-information-center/types-of-ssl-certificate/


    https://www.sslcertificateshop.com/brands/digicert/
    https://www.fodytechnologies.com/ssl-certificates/overview/
    https://help.aliyun.com/document_detail/28548.html?spm=5176.7968328.1266638.5.35321232zS9vAk
    https://help.aliyun.com/document_detail/28543.html?spm=a2c4g.11186623.6.549.10b4549corXfhy
    https://www.alphassl.com/ssl-certificates/

.pem SSL Creation Instructions
    https://www.digicert.com/ssl-support/pem-ssl-creation.htm

中文:
    https://www.cnblogs.com/hnxxcxg/p/7610582.html
    https://www.cnblogs.com/gordon0918/p/5409286.html
    https://www.cnblogs.com/f-ck-need-u/p/7113610.html?utm_source=itdadao&utm_medium=referral

    DES、AES、RSA等常用加密算法介绍与比较
        https://yq.aliyun.com/articles/156277


