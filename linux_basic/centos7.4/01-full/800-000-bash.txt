
# keyword bash

man bash

作用: bash - GNU Bourne-Again SHell

语法: bash [options] [file]

说明: bash 是一个兼容于 sh 的 命令语言 解释器，用于执行从标准输入或文件中读取的命令, bash 同时还合并了一些 ksh 和 csh 中的有用的特性。


OPTIONS
  All  of  the  single-character shell options documented in the description of the set builtin command can be used as options when the shell is invoked.
  根据上面这句话，可以知道，所有在 bash 内置的 set 命令的文档(见 `help set | less`)中 描述的 single-character shell options 都可以用作调用 shell 时的 options.
      bash -n hello.sh   # 选项-n 可用于检查shell script语法错误 # -n  Read commands but do not execute them.
      bash -x hello.sh   # -x  Print commands and their arguments as they are executed.

// --        A -- signals the end of options and disables further option processing.  Any arguments after the -- are treated as filenames and arguments.
//           An argument of - is equivalent to --.


[root@localhost 01-full]# bash -x -c 'echo $PATH'  #有时可以利用选项 -x 观察 shell expansion 的结果
+ echo /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin



[root@basic ~]# bash -c 'echo hello'
hello

[root@basic ~]# echo 'date' | bash
Fri Apr 26 18:13:06 CST 2019



ARGUMENTS   // 注：通常 argument 被认为是实参(actual parameter), parameter 表示形参(formal parameter)
    如果option处理后面仍存在argumentsa , 且既没有提供-c选项，也没有提供-s 选项，则第一个参数被认定为是包含 shell commands 的文件的文件名(即shell 脚本名).
    如果 bash 按各种风格被调用， 则 $0 被设定为 文件名, 同时其他位置形参 被设为 剩余的实参，bash 从文件中读取命令并执行，然后退出. bash 的 exit status 即为
    脚本中最后执行命令的exit status. 如果没有命令被执行，则 exit status 为 0. bash 会尝试首先在当前目录下打开这个文件，如果该文件没有被找到，那么shell则在
    PATH 变量指定的目录下寻找该脚本


INVOCATION
      A login shell is one whose first character of argument zero is a -, or one started with the --login option.
      login shell 形如 `bash -` 或 `bash --login`

      如下命令打开的是 登录(login) shell
      [root@basic ~]# bash -            # login shell
      [root@basic ~]# bash --login      # login shell


      如下命令打开的都是交互式(interactive) shell
      [root@basic ~]# bash -i           # interactive shell
      [root@basic ~]# bash              # interactive shell


       交互式的 bash 中, PS1 会被设置， 且 $- 会包含 i, 这就可以让 shell script 或 startup file 来测试其状态(是否为交互式模式)
      [root@basic ~]# echo $PS1
      [\u@\h \W]\$
      [root@basic ~]# echo $-
      himBH
      [root@basic ~]#


  字符 PS 即  prompt string
    https://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html



      ########
    #试验:简单的测试是否为交互式shell的语句(注：该文档为txt文档，如果在vim编辑器中想看shell的语法高亮，可以在vim中执行设置命令: set syn=sh , 则vim的syntax highlight即为 shell语言风格)：
          if echo $- | grep  i > /dev/null; then
            echo '交互式shell'
          else
            echo '非交互式shell'
          fi
      ########


      下面描述了 bash 执行 startup files 的概要。如果这些 files 其中任何一个存在但是不可读，则 bash 将报告 error.

          当 bash 被作为 交互式的登录shell(interactive login shell) 被调用，或 带有 --login 选项的 非交互式的shell(non-interactive shell) 被调用时，
          bash 会
               首先 如果 /etc/profile 读取并执行 /etc/profile 中的命令,
               然后依次搜索文件 ~/.bash_profile, ~/.bash_login, and ~/.profile, 并读取执行这3个文件中第一个存在且可读的文件
          如果想要禁止该行为, 可以在启动 shell 时指定 --noprofile 选项.

      ########
        # 试验: 简单测试观察一下上面语句描述的规则
          [root@basic ~]# echo 'echo /etc/profile' >> /etc/profile
          [root@basic ~]# echo 'echo ~/.bash_profile' >> ~/.bash_profile
          [root@basic ~]# echo 'echo ~/.bash_login' >> ~/.bash_login
          [root@basic ~]# echo 'echo ~/.profile' >> ~/.profile
          [root@basic ~]# bash --login   # 观察结果, 可发现按指定的规则读取和执行了相应的startup files文件
          /etc/profile
          /root/.bash_profile
          [root@basic ~]# bash --login --noprofile  # 观察结果，可发现没有读取 startup files 文件
          bash-4.2#

      ########
          当login shell 退出(exit) 时, bash 会读取并执行 ~/.bash_logout 和 /etc/bash.bash_logout (如果这些文件存在的话)中的命令.

        # 试验
            [root@basic ~]# echo 'echo ~/.bash_logout' >> ~/.bash_logout
            [root@basic ~]# echo 'echo /etc/bash.bash_logout' >> /etc/bash.bash_logout
            [root@basic ~]# bash --login
            [root@basic ~]# exit    # 观察结果，可发现确实读取执行了 ~/.bash_logout 和 /etc/bash.bash_logout 这两个文件
            logout
            /root/.bash_logout
            /etc/bash.bash_logout


      ########
        当一个交互式(interactive) 但非登录shell(not a login shell) 被启动时, bash 会读取并执行 ~/.bashrc (如果文件 ~/.bashrc 存在的话)中的命令.
        该行为可以使用 --norc 选项来禁止.  而选项 --rcfile 可用来强制 bash 读取执行指定的文件而非 ~/.bashrc

        # 试验
        [root@basic ~]# echo 'echo ~/.bashrc' >> ~/.bashrc
        [root@basic ~]# bash     # 观察结果, 可发现读取执行了 ~/.bashrc
        /root/.bashrc
        [root@basic ~]# bash --norc  # 观察结果, 可发现 --norc 选项确实禁止了默认读取执行  ~/.bashrc 文件的行为
        bash-4.2#

        [root@basic ~]# echo 'echo ~/customize.sh' >> ~/customize.sh
        [root@basic ~]# bash --rcfile  ~/customize.sh   # 观察结果，可发现 --rcfile 确实可用于强制 bash 读取执行了指定的文件而非默认的 ~/.bashrc 文件.
        /root/customize.sh
        bash-4.2#

      ########

         注：关于变量 BASH_ENV , sh, --posix 的信息就此略过(因为实际可能很少使用它们), 具体见 man bash #/^INVOCATION
             bash 和 sh 区别见 #/^INVOCATION：
                其中bash 和 sh 的一个区别是: 如果通过  remote shell  daemon,  usually  rshd,  or  the secure  shell  daemon sshd 启动 shell 是,
                如果启动的是 bash shell, 则 bash 默认会 读取执行 ~/.bashrc 文件, 如果启动的是 sh shell, 则 sh 默认 不会 读取执行 ~/.bashrc

            # 试验
            [root@basic ~]# echo 'echo ~/.bashrc' >> ~/.bashrc
            [root@basic ~]# bash   # 观察结果，可以发现 bash 读取执行了 ~/.bashrc 文件
            /root/.bashrc
            [root@basic ~]# sh     # 观察结果，可以发现 sh 没有读取执行 ~/.bashrc 文件
            sh-4.2# source ~/.bashrc
            /root/.bashrc
            [root@basic ~]#

      ########

        如果启动时 effective user (group) id 与  real user (group) id 不相等, 同时 -p 选项没有被指定，则 不会有 startup files 被读取
        原文如下：
     If  the  shell is started with the effective user (group) id not equal to the real user (group) id, and the -p option is not supplied, no startup files are read, shell functions
     are not inherited from the environment, the SHELLOPTS, BASHOPTS, CDPATH, and GLOBIGNORE variables, if they appear in the environment, are ignored, and the effective user  id  is
     set to the real user id.  If the -p option is supplied at invocation, the startup behavior is the same, but the effective user id is not reset.


DEFINITIONS 定义
       The following definitions are used throughout the rest of this document.
       blank  A space or tab.
       word   A sequence of characters considered as a single unit by the shell.  Also known as a token.
       name   A word consisting only of alphanumeric characters and underscores, and beginning with an alphabetic character or an underscore.  Also referred to as an identifier.
       metacharacter  元字符
              A character that, when unquoted, separates words.  One of the following:
              |  & ; ( ) < > space tab
       control operator 控制操作符
              A token that performs a control function.  It is one of the following symbols:
              || & && ; ;; ( ) | |& <newline>


RESERVED WORDS  保留字
       Reserved  words  are  words that have a special meaning to the shell.  The following words are recognized as reserved when unquoted and either the first word of a simple command
       (see SHELL GRAMMAR below) or the third word of a case or for command:

       ! case  do done elif else esac fi for function if in select then until while { } time [[ ]]


