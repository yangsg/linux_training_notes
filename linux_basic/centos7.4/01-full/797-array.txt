
# keyword array

man bash #/^   Arrays

参考
https://www.tecmint.com/working-with-arrays-in-linux-shell-scripting/

Arrays (原汁原味的描述见 man bash)
  Bash 提供 一维  indexed  和  associative 的 array 变量. 任何变量可被用作 indexed array; 内置的 declare 命令 将显示的声明 array.
  不存在 array 大小的 最大限制，也不存在 索引 或 赋值 数组成员时 必须 连续 的要求.  Indexed arrays 使用 integers 来引用(包括算术表达式)
  且基于 0, associative arrays 使用任意的 strings 来引用.

  任何变量如果使用形如 name[subscript]=value 这样的语法来赋值, 则其会被自动的创建成为 indexed array, 下标(subscript) 会被当做 其值必须为 number
  的算术表达式(arithmetic expression) 来对待，如果 subscript 求得的值 小于 0, 则其会当做相对于 该 数组的 maximum index + 1 的偏移量来使用(
  因此如果 subscript 的值为 -1, 就表示其引用的是 该数组的最后1个元素 ).
  想要显示的声明 一个 indexed array, 可以使用形如 'declare -a name' 的命令.  declare -a name[subscript] 也是可接受的; 此时subscript 会被忽略.

  关联数组(Associative arrays) 可使用 'declare -A name' 命令来创建.
  可通过shell 的内置命令 declare 和 readonly 来为 array variable 指定 Attributes, 每个 attribute 会被应用到 array 的所有成员上.

  Arrays 可使用 如 name=(value1 ... valuen) 这样的复合赋值形式来赋值，其中每个 value 具有 [subscript]=string 这样的形式.
  不过，对于 Indexed array 类型的 arrays 赋值  来说, bracket 和 subscript 不是必须的. 当为 indexed arrays 赋值时，如果提供了可选的
  brackets and subscript, 则会赋到对应的 index; 否则，元素所 赋到的 index 为 array 的 last index + 1. Indexing 起始于 0 .

  当给 associative array 赋值 时， subscript 则是 必须的.

  该语法也是被shell 的内置命令 declare 所接受的. 单独的 数组元素 可以使用 前面介绍的 name[subscript]=value 这种语法来赋值.

  数组的任何元素 都可以使用 ${name[subscript]} 这种形式来引用. 这里的括号'{}'是必须的，其是为了避免与 pathname expansion 相冲突.
  如果下标(subscript) 为 符号 @ 或 * , 则其 会被扩展开为 name 的所有元素(原文: If subscript is @ or *, the word expands to all members of name).
  这两个下标(即 @ 和 *) 只有其出现在双引号(double quotes)中时才会有区别. 如果 其 被双引号引了起来，则 ${name[*]} 会展开为一个 single word,
  其值 由 特殊变量 IFS 的第 1 个 字符分隔起来的每个数组元素组成. 而 ${name[@]} 会将 name 的每个元素 展开 为 各自单独的 word.
  如果不存在数组元素，则 ${name[@]} 展开为 nothing (空). If the double-quoted expansion occurs within a word, the expansion of
  the first parameter is joined with the beginning part of the original word, and the expansion of the last parameter is joined
  with the last part of the original word. This is analogous to the expansion of the special parameters * and @ (see Special Parameters above).

  ${#name[subscript]} 会被展开为 ${name[subscript]} 的 length. If subscript is * or @, the expansion is the number of elements in the  array.
  Referencing an array variable without a subscript is equivalent to referencing the array with a subscript of 0.

         An array variable is considered set if a subscript has been assigned a value.  The null string is a valid value.

  shell 内置命令 unset 用于 销毁 arrays.  unset name[subscript] 用于销毁 index 为 subscript 上的 元素.
  必须小心 避免意外的 有 pathname expansion 造成的 副作用.
  unset name(这里name是一个数组), 或 unset name[*] 或 unset name[@], 都会 删除 整个 array.

  shell 内置命令 declare, local, and readonly 都可分别接受  -a 选项来指定 an indexed array 和 -A 选项来指定 associative array.
  如果 -a 和 -A 选项同时提供，则 -A 具有高优先级. shell 内置命令 read 接受 -a 选项 来 将从 standard input 中读取的 words 序列
  赋给 一个 数组.  The set and declare builtins display array values in a way that allows them to be reused as assignments.

[root@basic ~]# array=(one two three four)  # 定义一个 indexed array, 即有 integer 索引的数组
[root@basic ~]# declare -p array            # 使用 shell 内置命令 declare 显示 数组的内容(该内容可以作为一个 assignments 来重用)
declare -a array='([0]="one" [1]="two" [2]="three" [3]="four")'
[root@basic ~]# set | grep array           # 使用 shell 内置命令 set 显示 数组的内容(该内容可以作为一个 assignments 来重用)
array=([0]="one" [1]="two" [2]="three" [3]="four")



[root@basic ~]# echo "${array[@]}"   # 显示数组所有元素
one two three four
[root@basic ~]# echo "${array[*]}"   # 显示数组所有元素
one two three four

[root@basic ~]# echo "${#array[@]}"   # 显示数组元素个数
4
[root@basic ~]# echo "${#array[*]}"   # 显示数组元素个数
4

[root@basic ~]# echo "${#array[2]}"   # 显示array 中在索引 2 上的元素的长度，即这里(one two three four) 中的 three 的长度
5

[root@basic ~]# echo ${array}   # 等价于 `echo ${array[0]}`, 因为在引用数组元素时如果没提供subscript时，则默认认为是提供了值为 0 的 subscript.
one
[root@basic ~]# echo ${#array}  # 等价于 `echo ${#array[0]}`, 因为在引用数组元素时如果没提供subscript时，则默认认为是提供了值为 0 的 subscript.
3

[root@basic ~]# unset array[2]    # 销毁 array 中在索引 2 上的元素
[root@basic ~]# echo ${array[@]}
one two four
[root@basic ~]# echo ${#array[@]}
3

[root@basic ~]# unset array       # 销毁整个数组, 等价于 `unset array[@]`  或 `unset array[*]`
[root@basic ~]# declare -p array
bash: declare: array: not found
[root@basic ~]# set | grep array
_=array


[root@basic ~]# array=([2]=two [4]=four)   # 定义一个 索引非连续的 indexed array
[root@basic ~]# declare -p array
declare -a array='([2]="two" [4]="four")'
[root@basic ~]# echo "${#array[@]}"        # 注：数组 array=([2]=two [4]=four) 的长度(即元素个数)为 2
2

[root@basic ~]# echo "${array[1+3]}"       # 显示索引4 上的元素, 注：这里 ${array[1+3]} 中的 1+3 会自动被当做一个 其值类型为一个 number 的算术表达式来对待
four

[root@basic ~]# echo "${array[-1]}"     # 显示数组的最后1个元素, 因为引用数组元素时如果下标(subscript)取值为负数时，该下标被认为是一个偏移量(即下标-n的对应的索引为 last_index + 1 - n).
four
[root@basic ~]# echo "${array[-2]}"     # 注意, 因为数组 array=([2]=two [4]=four) 中索引 3 及其对应的元素 并不存在, 所以此处 echo 输出了 nothing (空).

[root@basic ~]# echo -n "${array[-2]}" | od -t cxC     # 使用 od 命令可视化确认一下
0000000
[root@basic ~]# echo "${array[-3]}"     # 注意，虽然数组中 array=([2]=two [4]=four) 元素个数只有2个, 当 元素 two 的偏移量仍然是 -3
two



https://riptutorial.com/bash/example/6886/associative-arrays

关联数组必须先使用 declare -A 来先声明,否则如果只是简单的使用形如 array=([xx]=value)来定义，那么array 还是一个indexed array, 其key 无法包含空格字符
[root@basic ~]# declare -A cities     # 使用 declare -A 声明一个关联数组 associative array.
[root@basic ~]# cities=(['Bei Jing']=bj ['Shang Hai']=sh ['Chong Qing']=cq)   # 初始化关联数组
[root@basic ~]# declare -p cities        # 使用 shell 内置命令 declare 显示 数组的内容(该内容可以作为一个 assignments 来重用)
declare -A cities='(["Chong Qing"]="cq" ["Bei Jing"]="bj" ["Shang Hai"]="sh" )'

[root@basic ~]# echo "${cities[@]}"
cq bj sh
[root@basic ~]# echo "${cities[*]}"
cq bj sh

[root@basic ~]# echo "${#cities[@]}"   # 显示关联数组 (associative array) 元素个数(注: 此例中 语法与 indexed array的语法一样 )
3
[root@basic ~]# echo "${#cities[*]}"   # 显示关联数组 (associative array) 元素个数(注: 此例中 语法与 indexed array的语法一样 )
3

[root@basic ~]# echo "${cities['Chong Qing']}"  # 根据指定的 key 访问关联数组(associative array)中其对应的 value
cq
[root@basic ~]# unset cities['Chong Qing']   # 销毁 关联数组 (associative array)中指定key对应的元素(或 entry 或 key-value 键值对)
[root@basic ~]# declare -p cities
declare -A cities='(["Bei Jing"]="bj" ["Shang Hai"]="sh" )'

[root@basic ~]# unset cities         # 销毁整个关联数组(associative array), 等价于 `unset cities[@]`  或 `unset cities[*]`, 其实与销毁整个indexed array 的语法是一样的
[root@basic ~]# declare -p cities
bash: declare: cities: not found





如下是使用for 循环 迭代遍历数组的一些例子(脚本)

#!/bin/bash

declare -a array=(one two three four)  # 声明并初始化一个 indexed array
for value in "${array[@]}"; do
  echo $value
done

for index in "${!array[@]}"; do
  echo "$index  :  ${array[$index]}"
done

unset array      # 这里必须要 unset array, 因为下面声明了一个同名但类型为关联数组的变量，否者下面一行会报error: "array: cannot convert indexed to associative array"
declare -A array=(['Bei Jing']=bj ['Shang Hai']=sh ['Chong Qing']=cq) # 声明并初始化一个 associative array
for value in "${array[@]}"; do  # 注：这里的array 是一个关联数组
  echo $value
done

for key in "${!array[@]}"; do   # 注：这里的array 是一个关联数组
  echo "$key  :  ${array[$key]}"
done

