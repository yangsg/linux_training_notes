

# keyword iptables

man iptables
man iptables-extensions

man iptables-save
man iptables-restore



参考:
https://help.ubuntu.com/community/IptablesHowTo
https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html
https://blog.csdn.net/sdytlm/article/details/6544913   (中文翻译版)
https://netfilter.org/documentation/
https://netfilter.org/documentation/HOWTO/packet-filtering-HOWTO-7.html

http://www.zsythink.net/archives/1199/

http://www.linuxhomenetworking.com/wiki/index.php/Quick_HOWTO_:_Ch14_:_Linux_Firewalls_Using_iptables#.XOkvXFwzZPY

https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/security_guide/sect-security_guide-iptables
https://fatmin.com/2011/10/20/rhel6-simple-iptables-how-to/

https://www.cyberciti.biz/tips/linux-iptables-examples.html




https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html
很重要的一点需要记住:
iptables 主要工作于 网络层 和 运输层 的 headers 上, 尽管它也可以在 应用层 或 网络访问层上执行一些基本的过滤,
但这并不是其设计目的, 其也不太适合这些应用场景.(例如：字符串匹配, iptables 可以做, 但最好别这么干, 因为iptables 是work on a per packet basis,
如果字符串被分片到了多个不同的packets中, iptables将无法看到该完整的字符串, 所以 这样的任务放在应用层的某些应用(如一些proxy中, 如 Squid, nginx等)中处理比较好一些)

学习iptables 时 可以将主要的注意力集中在 ip, icmp, tcp, udp 协议上。

ip
port
socket = ip:port

Linux kernel 2.4 版本以前, 链路层的 mtu (最大传输单元) 太小时 会对 iptables 读取 packets 中的 headers 和 data 造成问题,
但从 Linux kernel 2.4 版本开始, 对大多数 linux 防火墙来说 这都已经不再是问题了, 因为 The connection tracking system(连接跟踪系统)
used by iptables for state matching and NAT'ing etc must be able to read the packet defragmented.
Because of this, conntrack automatically defragments all packets before they reach the netfilter/iptables structure in the kernel.


https://www.rfc-editor.org/

---------------------------------------------------------------------------------------------------
http://www.tcpipguide.com/free/t_IPDatagramGeneralFormat.htm
https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#IPHEADERS
https://www.frozentux.net/iptables-tutorial/other/rfc791.txt
ip header format:
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |Version|  IHL  |Type of Service|          Total Length         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Identification        |Flags|      Fragment Offset    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  Time to Live |    Protocol   |         Header Checksum       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       Source Address                          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    Destination Address                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    Options                    |    Padding    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                    Example Internet Datagram Header

                               Figure 4.
---------------------------------------------------------------------------------------------------
hooks 的位置:
https://www.netfilter.org/documentation/HOWTO//netfilter-hacking-HOWTO-3.html#ss3.2
https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TRAVERSINGOFTABLES

 --网络-网卡->PRE------->[ROUTE]--------->FWD------------------------------------->POST-----网卡---网络->
              Raw          |              Mangle                    ^             Mangle
              Conntrack    |              Filter                    |             NAT (Src)
              Mangle       |                                     [ROUTE]          Conntrack
              Nat (Dst)    v                                        |
              (QDisc)      IN Mangle                               OUT Raw
                           |  Filter                                |  Conntrack
                           |                                        ^  Mangle
                           v                                        |  NAT (Dst)
                           |                                        |  Filter
                           |                                        |

---------------------------------------------------------------------------------------------------

icmp 类型:
https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#ICMPTYPES

---------------------------------------------------------------------------------------------------
[root@basic ~]# man iptables   # 注: iptables 涉及的知识点很多, 有些参数 还需要查看 man iptables-extensions

作用: iptables/ip6tables — administration tool for IPv4/IPv6 packet filtering and NAT

语法:       iptables [-t table] {-A|-C|-D} chain rule-specification
语法:       ip6tables [-t table] {-A|-C|-D} chain rule-specification
语法:       iptables [-t table] -I chain [rulenum] rule-specification
语法:       iptables [-t table] -R chain rulenum rule-specification
语法:       iptables [-t table] -D chain rulenum
语法:       iptables [-t table] -S [chain [rulenum]]
语法:       iptables [-t table] {-F|-L|-Z} [chain [rulenum]] [options...]
语法:       iptables [-t table] -N chain
语法:       iptables [-t table] -X [chain]
语法:       iptables [-t table] -P chain target
语法:       iptables [-t table] -E old-chain-name new-chain-name
语法:       rule-specification = [matches...] [target]
语法:       match = -m matchname [per-match-options]
语法:       target = -j targetname [per-target-options]


说明:
    iptables  和  ip6tables 用户 设置, 维护 和 观察 linux 内核中 IPv4 and IPv6 packet filter rules 的 tables. 可以定义 多个 不同的 tables.
    每个 table 可以包含 许多 内置的 chains 和 可以包含 用户定义的 chains.

    每个 chain 是 一个 rules 的 列表, 可以与 一组 packets 匹配. 每个 rule 指定了 对其匹配的 packet 的动作.
    这被称为 a `target', which may be a jump to  a user-defined chain in the same table.


TARGETS
    A  firewall  rule 指定了 针对 a packet 和 a target 的 条件(criteria).
    如果 the packet 不匹配, 则 the next rule in the chain is examined;
    如果匹配, 则 the next rule is specified by the value of the target,
    which can be the name of a user-defined chain, one of the targets described in iptables-extensions(8),
    or one of the special values ACCEPT, DROP or RETURN.

      ACCEPT 表示 允许 packet 通过
      DROP 表示 将 packet 丢弃
      RETURN 表示 停止 遍历(traversing) chain 并 resume at the next rule in the previous (calling) chain.
      如果 the end of a built-in chain is reached or a rule in a built-in chain with target RETURN is matched,
      the target specified by the chain policy determines the  fate of the packet.

TABLES
      当前存在 5 个独立的 tables (那些 tables 存在 依赖于 内核的配置选项 和 那些 modules 存在)
       -t, --table table :  指定 command 应作用于 的 与 packet 匹配的 tables. 如果内核 配置为 automatic module loading, 如果该 table 的 module 尚不存在, 则会自动加载相应的 module.

            支持的表有: raw mangle nat filter security

            关于 table 和 chain 的 作用和匹配流程 最好结合其他资料 或 图片 来 参考着学习.

OPTIONS
       iptables 和 ip6tables 识别的选项可被分为不同的组: command, parameters 和 other options.





// 禁用 firewalld
[root@basic ~]# systemctl stop firewalld
[root@basic ~]# systemctl disable firewalld
[root@basic ~]# systemctl mask firewalld

[root@basic ~]# systemctl status firewalld
● firewalld.service
   Loaded: masked (/dev/null; bad)
   Active: inactive (dead)






[root@basic ~]# iptables -h | less   # -h     : Help. 查看简要的帮助信息


[root@basic ~]# iptables --version
iptables v1.4.21

[root@basic ~]# ls /etc/sysconfig/iptables-config
/etc/sysconfig/iptables-config


查看 iptables 规则的常用选项:

     -L, --list [chain] : 命令选项, 列出 指定 chain 的所有规则, 如果没有指定 chain, 则会列出所有 chains.
                          类似所有 其他的 iptables 命令(command), 其会应用于指定的 table(filter 为默认表),
                          因此 获取 NAT 表的 rule list 可以使用:
                          iptables -t nat -n -L
                          注意通过会结合使用 -n 选项, 为的是 防止 长时间的 DNS 的反向查找(reverse DNS lookups).
                          It is legal to specify the -Z (zero) option as well, in which case  the chain(s) will be atomically listed and zeroed.
                          精确的output 受 给定的 其他 arguments 的影响, The exact rules 会被 suppressed 直到你使用
                          iptables -L -v

     -n, --numeric : Numeric  output. IP addresses 和 port numbers 会以 number 格式显示. 默认 该 program 会尝试将其显示 host names, network names, or services (whenever applicable).
     --line-numbers : When listing rules, add line numbers to the beginning of each rule, corresponding to that rule's position in the chain.
     -v, --verbose
            Verbose output. 该选项 会使 the list command 显示 the interface name, the rule options (if any), and the TOS masks. The packet and byte counters are also  listed,
            with  the  suffix 'K', 'M' or 'G' for 1000, 1,000,000 and 1,000,000,000 multipliers respectively (but see the -x flag to change this).  For appending, insertion, deletion
            and replacement, this causes detailed information on the rule or rules to be printed. -v may be specified multiple times to possibly emit more detailed debug statements.
     -x, --exact
            Expand numbers.  Display the exact value of the packet and byte counters, instead of only the rounded number in K's (multiples of 1000) M's (multiples of  1000K)  or  G's
            (multiples of 1000M).  This option is only relevant for the -L command.


[root@basic ~]# iptables -t nat -nL --line-numbers
[root@basic ~]# iptables -t nat -nL --line-numbers -v
[root@basic ~]# iptables -t nat -nL --line-numbers -v -x

[root@basic ~]# alias ipts='iptables -nL --line-numbers'    # 命令 iptables 查看的选项实在太长了, 可以使用 alias 为其定义 命令别名.
[root@basic ~]# ipts -t nat
[root@basic ~]# ipts -t nat -v -x



     -A, --append chain rule-specification
            Append  one or more rules to the end of the selected chain.  When the source and/or destination names resolve to more than one address,
            a rule will be added for each possible address combination.

[root@basic ~]# man iptables-extensions
[root@basic ~]# iptables -A INPUT  -p tcp -s 192.168.175.1   -d 192.168.175.10 --dport 22 -j ACCEPT   # 放行 进入 sshd 服务(默认tcp:22) 的 packet
[root@basic ~]# iptables -A OUTPUT -p tcp -s 192.168.175.10  -d 192.168.175.1  --sport 22 -j ACCEPT   # 放行 流出 sshd 服务(默认tcp:22) 的 packet

[root@basic ~]# iptables -A INPUT  -p tcp -s 192.168.175.20  -d 192.168.175.10 --dport 22 -j ACCEPT
[root@basic ~]# iptables -A OUTPUT -p tcp -s 192.168.175.10  -d 192.168.175.20 --sport 22 -j ACCEPT

[root@basic ~]# iptables -nL --line-numbers
Chain INPUT (policy ACCEPT)
num  target     prot opt source               destination
1    ACCEPT     tcp  --  192.168.175.1        192.168.175.10       tcp dpt:22
2    ACCEPT     tcp  --  192.168.175.20       192.168.175.10       tcp dpt:22

Chain FORWARD (policy ACCEPT)
num  target     prot opt source               destination

Chain OUTPUT (policy ACCEPT)
num  target     prot opt source               destination
1    ACCEPT     tcp  --  192.168.175.10       192.168.175.1        tcp spt:22
2    ACCEPT     tcp  --  192.168.175.10       192.168.175.20       tcp spt:22



     -P, --policy chain target
            Set the policy for the chain to the given target.  See the section TARGETS for the legal targets.
            Only built-in (non-user-defined) chains can have policies, and  neither built-in nor user-defined chains can be policy targets.

设置默认策略语法: iptables [-t nat] -P [INPUT,OUTPUT,FORWARD] [ACCEPT,DROP]
    参数：
    -P ：定义政策( Policy )。注意，这个 P 为大写啊！
    ACCEPT ：该封包可接受
    DROP   ：该封包直接丢弃，不会让 client 端知道为何被丢弃。

  一般生产服务器上 最好将默认的安全策略设置为 DROP, 然后仅针对 开放的 service(包括管理员的远程登录服务sshd,注意不要将自己"锁在门外") 放行其 packet
[root@basic ~]# iptables -P INPUT DROP
[root@basic ~]# iptables -P OUTPUT DROP
[root@basic ~]# iptables -P FORWARD DROP
[root@basic ~]# iptables -nL --line-numbers    # 查看 filter 表中的规则
Chain INPUT (policy DROP)
num  target     prot opt source               destination
1    ACCEPT     tcp  --  192.168.175.1        192.168.175.10       tcp dpt:22
2    ACCEPT     tcp  --  192.168.175.20       192.168.175.10       tcp dpt:22

Chain FORWARD (policy DROP)
num  target     prot opt source               destination

Chain OUTPUT (policy DROP)
num  target     prot opt source               destination
1    ACCEPT     tcp  --  192.168.175.10       192.168.175.1        tcp spt:22
2    ACCEPT     tcp  --  192.168.175.10       192.168.175.20       tcp spt:22

[root@basic ~]# iptables -nL --line-numbers -v    # 查看 详细的 filter 表中的规则
      Chain INPUT (policy DROP 6 packets, 468 bytes)
      num   pkts bytes target     prot opt in     out     source               destination
      1      952 77824 ACCEPT     tcp  --  *      *       192.168.175.1        192.168.175.10       tcp dpt:22
      2        0     0 ACCEPT     tcp  --  *      *       192.168.175.20       192.168.175.10       tcp dpt:22

      Chain FORWARD (policy DROP 0 packets, 0 bytes)
      num   pkts bytes target     prot opt in     out     source               destination

      Chain OUTPUT (policy DROP 0 packets, 0 bytes)
      num   pkts bytes target     prot opt in     out     source               destination
      1      458  256K ACCEPT     tcp  --  *      *       192.168.175.10       192.168.175.1        tcp spt:22
      2        0     0 ACCEPT     tcp  --  *      *       192.168.175.10       192.168.175.20       tcp spt:22
[root@basic ~]# iptables -nL --line-numbers -v -x  # 查看 详细的 filter 表中的规则, pkts 和 bytes 显示精确的数字, 而不是带 round 后的单位.
      Chain INPUT (policy DROP 6 packets, 468 bytes)
      num      pkts      bytes target     prot opt in     out     source               destination
      1         962    78544 ACCEPT     tcp  --  *      *       192.168.175.1        192.168.175.10       tcp dpt:22
      2           0        0 ACCEPT     tcp  --  *      *       192.168.175.20       192.168.175.10       tcp dpt:22

      Chain FORWARD (policy DROP 0 packets, 0 bytes)
      num      pkts      bytes target     prot opt in     out     source               destination

      Chain OUTPUT (policy DROP 0 packets, 0 bytes)
      num      pkts      bytes target     prot opt in     out     source               destination
      1         464   257888 ACCEPT     tcp  --  *      *       192.168.175.10       192.168.175.1        tcp spt:22
      2           0        0 ACCEPT     tcp  --  *      *       192.168.175.10       192.168.175.20       tcp spt:22



   -I, --insert chain [rulenum] rule-specification
          Insert one or more rules in the selected chain as the given rule number.
          So, if the rule number is 1, the rule or rules are inserted at the head of the chain.   This  is also the default if no rule number is specified.

[root@basic ~]# iptables -m tcp -h  # 查看 tcp 扩展匹配模块的 帮助说明，较详细一点的说明见  man iptables-extensions   #/^   tcp

// 放行 http 协议(即tcp:80, 此处没包含https协议, 即tcp:443)的 web 服务的 packet
[root@basic ~]# iptables -I INPUT -p tcp -d 192.168.175.10 --dport 80 -j ACCEPT      # 放行 http 协议(默认tcp:80)的 进入的 数据包
[root@basic ~]# iptables -I OUTPUT -p tcp -s 192.168.175.10 --sport 80 -j ACCEPT     # 放行 http 协议(默认tcp:80)的 出去的 数据包

[root@basic ~]# iptables -nL --line-numbers
      Chain INPUT (policy DROP)
      num  target     prot opt source               destination
      1    ACCEPT     tcp  --  0.0.0.0/0            192.168.175.10       tcp dpt:80
      2    ACCEPT     tcp  --  192.168.175.1        192.168.175.10       tcp dpt:22
      3    ACCEPT     tcp  --  192.168.175.20       192.168.175.10       tcp dpt:22

      Chain FORWARD (policy DROP)
      num  target     prot opt source               destination

      Chain OUTPUT (policy DROP)
      num  target     prot opt source               destination
      1    ACCEPT     tcp  --  192.168.175.10       0.0.0.0/0            tcp spt:80
      2    ACCEPT     tcp  --  192.168.175.10       192.168.175.1        tcp spt:22
      3    ACCEPT     tcp  --  192.168.175.10       192.168.175.20       tcp spt:22


// 放行 https 协议(默认 tcp:443) 的 web 服务的 packet
[root@basic ~]# iptables -I INPUT  2 -p tcp -d 192.168.175.10 --dport 443 -j ACCEPT   # 放行 https 协议(默认tcp:443) 的 进入的 数据包
[root@basic ~]# iptables -I OUTPUT 2 -p tcp -s 192.168.175.10 --sport 443 -j ACCEPT   # 放行 https 协议(默认tcp:443) 的 出去的 数据包
[root@basic ~]# iptables -nL --line-numbers
      Chain INPUT (policy DROP)
      num  target     prot opt source               destination
      1    ACCEPT     tcp  --  0.0.0.0/0            192.168.175.10       tcp dpt:80
      2    ACCEPT     tcp  --  0.0.0.0/0            192.168.175.10       tcp dpt:443
      3    ACCEPT     tcp  --  192.168.175.1        192.168.175.10       tcp dpt:22
      4    ACCEPT     tcp  --  192.168.175.20       192.168.175.10       tcp dpt:22

      Chain FORWARD (policy DROP)
      num  target     prot opt source               destination

      Chain OUTPUT (policy DROP)
      num  target     prot opt source               destination
      1    ACCEPT     tcp  --  192.168.175.10       0.0.0.0/0            tcp spt:80
      2    ACCEPT     tcp  --  192.168.175.10       0.0.0.0/0            tcp spt:443
      3    ACCEPT     tcp  --  192.168.175.10       192.168.175.1        tcp spt:22
      4    ACCEPT     tcp  --  192.168.175.10       192.168.175.20       tcp spt:22



关于 icmp type 的列表见:
    https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#ICMPTYPES
    https://baike.baidu.com/item/ICMP/572452?fr=aladdin

[root@basic ~]# iptables -m icmp -h  # 查看 icmp 扩展匹配模块的 帮助说明, 较详细说明见 man iptables-extensions   #/^   icmp

// 放行 client 主动对 server 的 ping 操作的 packet
[root@basic ~]# iptables -A INPUT  -s 192.168.175.1  -d 192.168.175.10 -p icmp --icmp-type 8 -j ACCEPT   # 放行 client 给 server 的 echo-request 的 packet
[root@basic ~]# iptables -A OUTPUT -s 192.168.175.10 -d 192.168.175.1  -p icmp --icmp-type 0 -j ACCEPT   # 放行 server 给 client 的 echo-reply 的 packet

[root@basic ~]# iptables -nL --line-numbers
      Chain INPUT (policy DROP)
      num  target     prot opt source               destination
      1    ACCEPT     tcp  --  0.0.0.0/0            192.168.175.10       tcp dpt:80
      2    ACCEPT     tcp  --  0.0.0.0/0            192.168.175.10       tcp dpt:443
      3    ACCEPT     tcp  --  192.168.175.1        192.168.175.10       tcp dpt:22
      4    ACCEPT     tcp  --  192.168.175.20       192.168.175.10       tcp dpt:22
      5    ACCEPT     icmp --  192.168.175.1        192.168.175.10       icmptype 8

      Chain FORWARD (policy DROP)
      num  target     prot opt source               destination

      Chain OUTPUT (policy DROP)
      num  target     prot opt source               destination
      1    ACCEPT     tcp  --  192.168.175.10       0.0.0.0/0            tcp spt:80
      2    ACCEPT     tcp  --  192.168.175.10       0.0.0.0/0            tcp spt:443
      3    ACCEPT     tcp  --  192.168.175.10       192.168.175.1        tcp spt:22
      4    ACCEPT     tcp  --  192.168.175.10       192.168.175.20       tcp spt:22
      5    ACCEPT     icmp --  192.168.175.10       192.168.175.1        icmptype 0

// 放行 server 主动 ping 其他 remote host 的 packet
[root@basic ~]# iptables -A OUTPUT -s 192.168.175.10 -p icmp --icmp-type 8 -j ACCEPT   # 放行 server 给 其他 remote host 发送的 icmp type 的 echo-request 的 packet
[root@basic ~]# iptables -A INPUT  -d 192.168.175.10 -p icmp --icmp-type 0 -j ACCEPT   # 放行 其他 remote host 给 server 发送的 icmp type 的 echo-reply 的 packet



   [!] -i, --in-interface name
          Name of an interface via which a packet was received (only for packets entering the INPUT, FORWARD and PREROUTING chains).  When the  "!"  argument  is  used  before  the
          interface  name,  the  sense is inverted.  If the interface name ends in a "+", then any interface which begins with this name will match.  If this option is omitted, any
          interface name will match.

   [!] -o, --out-interface name
          Name of an interface via which a packet is going to be sent (for packets entering the FORWARD, OUTPUT and POSTROUTING chains).  When the "!" argument is used  before  the
          interface  name,  the  sense is inverted.  If the interface name ends in a "+", then any interface which begins with this name will match.  If this option is omitted, any
          interface name will match.


// 允许 server 访问 自身的所有服务 (因为此时数据 走的是虚拟的 回环网卡(loopback , 名为'lo'), 而非实际的 物理网卡, 所以需要通过 iptables 的 -i 或 -o 选项指定 网卡 来实现 packet 的匹配)
// 此时 也就可以 自己 ping 自己了
[root@basic ~]# iptables -A INPUT  -i lo -j ACCEPT
[root@basic ~]# iptables -A OUTPUT -o lo -j ACCEPT

[root@basic ~]# iptables -nL --line-numbers -v
      Chain INPUT (policy DROP 0 packets, 0 bytes)
      num   pkts bytes target     prot opt in     out     source               destination
      1        0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            192.168.175.10       tcp dpt:80
      2        0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            192.168.175.10       tcp dpt:443
      3     4088  324K ACCEPT     tcp  --  *      *       192.168.175.1        192.168.175.10       tcp dpt:22
      4        0     0 ACCEPT     tcp  --  *      *       192.168.175.20       192.168.175.10       tcp dpt:22
      5        4   240 ACCEPT     icmp --  *      *       192.168.175.1        192.168.175.10       icmptype 8
      6        8   672 ACCEPT     icmp --  *      *       0.0.0.0/0            192.168.175.10       icmptype 0
      7       15  1260 ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0

      Chain FORWARD (policy DROP 0 packets, 0 bytes)
      num   pkts bytes target     prot opt in     out     source               destination

      Chain OUTPUT (policy DROP 0 packets, 0 bytes)
      num   pkts bytes target     prot opt in     out     source               destination
      1        0     0 ACCEPT     tcp  --  *      *       192.168.175.10       0.0.0.0/0            tcp spt:80
      2        0     0 ACCEPT     tcp  --  *      *       192.168.175.10       0.0.0.0/0            tcp spt:443
      3     2696  827K ACCEPT     tcp  --  *      *       192.168.175.10       192.168.175.1        tcp spt:22
      4        0     0 ACCEPT     tcp  --  *      *       192.168.175.10       192.168.175.20       tcp spt:22
      5        4   240 ACCEPT     icmp --  *      *       192.168.175.10       192.168.175.1        icmptype 0
      6       20  1680 ACCEPT     icmp --  *      *       192.168.175.10       0.0.0.0/0            icmptype 8
      7       15  1260 ACCEPT     all  --  *      lo      0.0.0.0/0            0.0.0.0/0


[root@basic ~]# iptables-save  > /etc/iptables-save.rules
[root@basic ~]# iptables-restore < /etc/iptables-save.rules  #iptables-restore默认会 flush (delete) all previous contents of the respective table.当然可以使用 -n, --noflush 修改这一行为



       -F, --flush [chain]
              Flush the selected chain (all the chains in the table if none is given).  This is equivalent to deleting all the rules one by one.

[root@basic ~]# iptables -F        # 清空, 删除所有 chains 中的规则
[root@basic ~]# iptables -F INPUT  # 清空, 删除 指定的 INPUT chain 中的 规则

[root@basic ~]# iptables -F && iptables-restore < /etc/iptables-save.rules   # 清空 并 还原 iptables 的规则, 注意一定要作为 一条(复合)命令来执行, 避免将自己'锁在门外'

[root@basic ~]# iptables -nL --line-numbers -v
      Chain INPUT (policy DROP 0 packets, 0 bytes)
      num   pkts bytes target     prot opt in     out     source               destination
      1        0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            192.168.175.10       tcp dpt:80
      2        0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            192.168.175.10       tcp dpt:443
      3       86  5792 ACCEPT     tcp  --  *      *       192.168.175.1        192.168.175.10       tcp dpt:22
      4        0     0 ACCEPT     tcp  --  *      *       192.168.175.20       192.168.175.10       tcp dpt:22
      5        0     0 ACCEPT     icmp --  *      *       192.168.175.1        192.168.175.10       icmptype 8
      6        0     0 ACCEPT     icmp --  *      *       0.0.0.0/0            192.168.175.10       icmptype 0
      7        0     0 ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0

      Chain FORWARD (policy DROP 0 packets, 0 bytes)
      num   pkts bytes target     prot opt in     out     source               destination

      Chain OUTPUT (policy DROP 0 packets, 0 bytes)
      num   pkts bytes target     prot opt in     out     source               destination
      1        0     0 ACCEPT     tcp  --  *      *       192.168.175.10       0.0.0.0/0            tcp spt:80
      2        0     0 ACCEPT     tcp  --  *      *       192.168.175.10       0.0.0.0/0            tcp spt:443
      3       60 19824 ACCEPT     tcp  --  *      *       192.168.175.10       192.168.175.1        tcp spt:22
      4        0     0 ACCEPT     tcp  --  *      *       192.168.175.10       192.168.175.20       tcp spt:22
      5        0     0 ACCEPT     icmp --  *      *       192.168.175.10       192.168.175.1        icmptype 0
      6        0     0 ACCEPT     icmp --  *      *       192.168.175.10       0.0.0.0/0            icmptype 8
      7        0     0 ACCEPT     all  --  *      lo      0.0.0.0/0            0.0.0.0/0



     -D, --delete chain rule-specification
     -D, --delete chain rulenum
            Delete one or more rules from the selected chain.  There are two versions of this command:
            the rule can be specified as a number in the chain (starting at 1 for the first rule) or a rule to match.

// 删除指定的 规则
[root@basic ~]# iptables -D INPUT  4   # 删除 filter 表中 INPUT  chain 中当前 line-number (序号, 从1开始) 为 4 的 rule
[root@basic ~]# iptables -D OUTPUT 4   # 删除 filter 表中 OUTPUT chain 中当前 line-number (序号, 从1开始) 为 4 的 rule
[root@basic ~]# iptables -nL --line-numbers
      Chain INPUT (policy DROP)
      num  target     prot opt source               destination
      1    ACCEPT     tcp  --  0.0.0.0/0            192.168.175.10       tcp dpt:80
      2    ACCEPT     tcp  --  0.0.0.0/0            192.168.175.10       tcp dpt:443
      3    ACCEPT     tcp  --  192.168.175.1        192.168.175.10       tcp dpt:22
      4    ACCEPT     icmp --  192.168.175.1        192.168.175.10       icmptype 8
      5    ACCEPT     icmp --  0.0.0.0/0            192.168.175.10       icmptype 0
      6    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0

      Chain FORWARD (policy DROP)
      num  target     prot opt source               destination

      Chain OUTPUT (policy DROP)
      num  target     prot opt source               destination
      1    ACCEPT     tcp  --  192.168.175.10       0.0.0.0/0            tcp spt:80
      2    ACCEPT     tcp  --  192.168.175.10       0.0.0.0/0            tcp spt:443
      3    ACCEPT     tcp  --  192.168.175.10       192.168.175.1        tcp spt:22
      4    ACCEPT     icmp --  192.168.175.10       192.168.175.1        icmptype 0
      5    ACCEPT     icmp --  192.168.175.10       0.0.0.0/0            icmptype 8
      6    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0




     -R, --replace chain rulenum rule-specification
            Replace a rule in the selected chain.  If the source and/or destination names resolve to multiple addresses, the command will fail.  Rules are numbered starting at 1.

// 替换(修改) 规则
// 允许 所有的 client 端访问 tcp:22 端口
[root@basic ~]# iptables -R INPUT  3 -d 192.168.175.10 -p tcp --dport 22 -j ACCEPT   # 替换 filter 表的 INPUT  chain 中的 当前 line-number 为 3 的 rule
[root@basic ~]# iptables -R OUTPUT 3 -s 192.168.175.10 -p tcp --sport 22 -j ACCEPT   # 替换 filter 表的 OUTPUT chain 中的 当前 line-number 为 3 的 rule

[root@basic ~]# iptables -nL --line-numbers
    Chain INPUT (policy DROP)
    num  target     prot opt source               destination
    1    ACCEPT     tcp  --  0.0.0.0/0            192.168.175.10       tcp dpt:80
    2    ACCEPT     tcp  --  0.0.0.0/0            192.168.175.10       tcp dpt:443
    3    ACCEPT     tcp  --  0.0.0.0/0            192.168.175.10       tcp dpt:22
    4    ACCEPT     icmp --  192.168.175.1        192.168.175.10       icmptype 8
    5    ACCEPT     icmp --  0.0.0.0/0            192.168.175.10       icmptype 0
    6    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0

    Chain FORWARD (policy DROP)
    num  target     prot opt source               destination

    Chain OUTPUT (policy DROP)
    num  target     prot opt source               destination
    1    ACCEPT     tcp  --  192.168.175.10       0.0.0.0/0            tcp spt:80
    2    ACCEPT     tcp  --  192.168.175.10       0.0.0.0/0            tcp spt:443
    3    ACCEPT     tcp  --  192.168.175.10       0.0.0.0/0            tcp spt:22
    4    ACCEPT     icmp --  192.168.175.10       192.168.175.1        icmptype 0
    5    ACCEPT     icmp --  192.168.175.10       0.0.0.0/0            icmptype 8
    6    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0






   -m, --match match
          Specifies a match to use, that is, an extension module that tests for a specific property. The set of matches make up the condition  under  which  a  target  is  invoked.
          Matches are evaluated first to last as specified on the command line and work in short-circuit fashion, i.e. if one extension yields false, evaluation will stop.

模块(module):  -m multiport  离散多端口
[root@basic ~]# iptables -m multiport -h
                  multiport match options:
                  [!] --source-ports port[,port:port,port...]
                   --sports ...
                                                  match source port(s)
                  [!] --destination-ports port[,port:port,port...]
                   --dports ...
                                                  match destination port(s)
                  [!] --ports port[,port:port,port]
                                                  match both source and destination port(s)



// 利用 multiport 可以减少某些规则的 数量, 好处是 优化了 iptables 匹配的 性能, 也 增强了 规则定义 的 可读性
[root@basic ~]# iptables -I INPUT  -d 192.168.175.10 -p tcp -m multiport --dports 80,443,22 -j ACCEPT
[root@basic ~]# iptables -I OUTPUT -s 192.168.175.10 -p tcp -m multiport --sports 80,443,22 -j ACCEPT

[root@basic ~]# iptables -nL --line-numbers -v
      Chain INPUT (policy DROP 0 packets, 0 bytes)
      num   pkts bytes target     prot opt in     out     source               destination
      1      224 19696 ACCEPT     tcp  --  *      *       0.0.0.0/0            192.168.175.10       multiport dports 80,443,22
      2        0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            192.168.175.10       tcp dpt:80
      3        0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            192.168.175.10       tcp dpt:443
      4      739 58536 ACCEPT     tcp  --  *      *       0.0.0.0/0            192.168.175.10       tcp dpt:22
      5        0     0 ACCEPT     icmp --  *      *       192.168.175.1        192.168.175.10       icmptype 8
      6        0     0 ACCEPT     icmp --  *      *       0.0.0.0/0            192.168.175.10       icmptype 0
      7        0     0 ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0

      Chain FORWARD (policy DROP 0 packets, 0 bytes)
      num   pkts bytes target     prot opt in     out     source               destination

      Chain OUTPUT (policy DROP 0 packets, 0 bytes)
      num   pkts bytes target     prot opt in     out     source               destination
      1       40 22000 ACCEPT     tcp  --  *      *       192.168.175.10       0.0.0.0/0            multiport sports 80,443,22
      2        0     0 ACCEPT     tcp  --  *      *       192.168.175.10       0.0.0.0/0            tcp spt:80
      3        0     0 ACCEPT     tcp  --  *      *       192.168.175.10       0.0.0.0/0            tcp spt:443
      4      504  120K ACCEPT     tcp  --  *      *       192.168.175.10       0.0.0.0/0            tcp spt:22
      5        0     0 ACCEPT     icmp --  *      *       192.168.175.10       192.168.175.1        icmptype 0
      6        0     0 ACCEPT     icmp --  *      *       192.168.175.10       0.0.0.0/0            icmptype 8
      7        0     0 ACCEPT     all  --  *      lo      0.0.0.0/0            0.0.0.0/0

[root@basic ~]# iptables -D INPUT  2
[root@basic ~]# iptables -D INPUT  2
[root@basic ~]# iptables -D INPUT  2
[root@basic ~]# iptables -D OUTPUT 2
[root@basic ~]# iptables -D OUTPUT 2
[root@basic ~]# iptables -D OUTPUT 2

[root@basic ~]# iptables -nL --line-numbers
      Chain INPUT (policy DROP)
      num  target     prot opt source               destination
      1    ACCEPT     tcp  --  0.0.0.0/0            192.168.175.10       multiport dports 80,443,22
      2    ACCEPT     icmp --  192.168.175.1        192.168.175.10       icmptype 8
      3    ACCEPT     icmp --  0.0.0.0/0            192.168.175.10       icmptype 0
      4    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0

      Chain FORWARD (policy DROP)
      num  target     prot opt source               destination

      Chain OUTPUT (policy DROP)
      num  target     prot opt source               destination
      1    ACCEPT     tcp  --  192.168.175.10       0.0.0.0/0            multiport sports 80,443,22
      2    ACCEPT     icmp --  192.168.175.10       192.168.175.1        icmptype 0
      3    ACCEPT     icmp --  192.168.175.10       0.0.0.0/0            icmptype 8
      4    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0




模块(module): -m iprange

[root@basic ~]# iptables -m iprange -h    # 查看模块 iprange 帮助说明, 还可见  man iptables-extensions  #/^   iprange
        iprange match options:
        [!] --src-range ip[-ip]    Match source IP in the specified range
        [!] --dst-range ip[-ip]    Match destination IP in the specified range



[root@basic ~]# iptables -I INPUT -m iprange --src-range 192.168.175.200-192.168.175.210 -d 192.168.175.10 -p tcp --dport 80 -j DROP
[root@basic ~]# iptables -nL --line-numbers
Chain INPUT (policy DROP)
num  target     prot opt source               destination
1    DROP       tcp  --  0.0.0.0/0            192.168.175.10       source IP range 192.168.175.200-192.168.175.210 tcp dpt:80
2    ACCEPT     tcp  --  0.0.0.0/0            192.168.175.10       multiport dports 80,443,22
3    ACCEPT     icmp --  192.168.175.1        192.168.175.10       icmptype 8
4    ACCEPT     icmp --  0.0.0.0/0            192.168.175.10       icmptype 0
5    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0

Chain FORWARD (policy DROP)
num  target     prot opt source               destination

Chain OUTPUT (policy DROP)
num  target     prot opt source               destination
1    ACCEPT     tcp  --  192.168.175.10       0.0.0.0/0            multiport sports 80,443,22
2    ACCEPT     icmp --  192.168.175.10       192.168.175.1        icmptype 0
3    ACCEPT     icmp --  192.168.175.10       0.0.0.0/0            icmptype 8
4    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0





模块(module): -m state

[root@basic ~]# iptables -m state -h    # man iptables-extensions    #/^   state    #/^   conntrack

          state match options:
           [!] --state [INVALID|ESTABLISHED|NEW|RELATED|UNTRACKED][,...]
                                          State(s) to match

[root@basic ~]# man iptables-extensions   #/^   state    #/^   conntrack
   state
       The "state" extension is a subset of the "conntrack" module.  "state" allows access to the connection tracking state for this packet.

       [!] --state state
              Where  state is a comma separated list of the connection states to match. Only a subset of the states unterstood by "conntrack" are recognized: INVALID, ESTABLISHED, NEW,
              RELATED or UNTRACKED. For their description, see the "conntrack" heading in this manpage.

  状态介绍:  man iptables-extensions    #/^   conntrack
       INVALID
              The packet is associated with no known connection.

       NEW    The packet has started a new connection or otherwise associated with a connection which has not seen packets in both directions.

       ESTABLISHED
              The packet is associated with a connection which has seen packets in both directions.

       RELATED
              The packet is starting a new connection, but is associated with an existing connection, such as an FTP data transfer or an ICMP error.

       UNTRACKED
              The packet is not tracked at all, which happens if you explicitly untrack it by using -j CT --notrack in the raw table.


模块 state 与 conntrack 的关系：
    https://superuser.com/questions/1071656/whats-the-difference-between-iptables-state-and-ctstate
    https://serverfault.com/questions/358996/iptables-whats-the-difference-between-m-state-and-m-conntrack
    https://unix.stackexchange.com/questions/108169/what-is-the-difference-between-m-conntrack-ctstate-and-m-state-state
    http://inai.de/documents/Perfect_Ruleset.pdf


[root@basic ~]# iptables-restore  < /etc/iptables-save.rules
[root@basic ~]# iptables -nL --line-numbers
      Chain INPUT (policy DROP)
      num  target     prot opt source               destination
      1    ACCEPT     tcp  --  0.0.0.0/0            192.168.175.10       tcp dpt:80
      2    ACCEPT     tcp  --  0.0.0.0/0            192.168.175.10       tcp dpt:443
      3    ACCEPT     tcp  --  192.168.175.1        192.168.175.10       tcp dpt:22
      4    ACCEPT     tcp  --  192.168.175.20       192.168.175.10       tcp dpt:22
      5    ACCEPT     icmp --  192.168.175.1        192.168.175.10       icmptype 8
      6    ACCEPT     icmp --  0.0.0.0/0            192.168.175.10       icmptype 0
      7    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0

      Chain FORWARD (policy DROP)
      num  target     prot opt source               destination

      Chain OUTPUT (policy DROP)
      num  target     prot opt source               destination
      1    ACCEPT     tcp  --  192.168.175.10       0.0.0.0/0            tcp spt:80
      2    ACCEPT     tcp  --  192.168.175.10       0.0.0.0/0            tcp spt:443
      3    ACCEPT     tcp  --  192.168.175.10       192.168.175.1        tcp spt:22
      4    ACCEPT     tcp  --  192.168.175.10       192.168.175.20       tcp spt:22
      5    ACCEPT     icmp --  192.168.175.10       192.168.175.1        icmptype 0
      6    ACCEPT     icmp --  192.168.175.10       0.0.0.0/0            icmptype 8
      7    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0

// 清空 iptables 中 ruleset 的方法步骤(同时保持当前及后续的远程登录正常)
[root@basic ~]# iptables -I INPUT -s 192.168.175.1 -d 192.168.175.10 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT   # 先执行一下,保证其没有语法错误能正确执行
[root@basic ~]# iptables -F INPUT && iptables -I INPUT -s 192.168.175.1 -d 192.168.175.10 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT # 清空filter表的INPUT chain

[root@basic ~]# iptables -I OUTPUT -s 192.168.175.10 -m state --state ESTABLISHED -j ACCEPT   # 先执行一下,保证其没有语法错误能正确执行
[root@basic ~]# iptables -F OUTPUT && iptables -I OUTPUT -s 192.168.175.10 -m state --state ESTABLISHED -j ACCEPT  # 清空 filter 表的 OUTPUT chain

[root@basic ~]# iptables -nL --line-numbers
      Chain INPUT (policy DROP)
      num  target     prot opt source               destination
      1    ACCEPT     tcp  --  192.168.175.1        192.168.175.10       tcp dpt:22 state NEW,ESTABLISHED

      Chain FORWARD (policy DROP)
      num  target     prot opt source               destination

      Chain OUTPUT (policy DROP)
      num  target     prot opt source               destination
      1    ACCEPT     all  --  192.168.175.10       0.0.0.0/0            state ESTABLISHED


// TODO: 对于 ftp, 还应该设置  ip_nat_ftp 和 ip_conntrack_ftp 模块
[root@basic ~]# iptables -I INPUT -d 192.168.175.10 -p tcp --dport 21 -m state --state NEW,ESTABLISHED -j ACCEPT
[root@basic ~]# iptables -I INPUT 2 -d 192.168.175.10 -p tcp -m state --state RELATED,ESTABLISHED -j ACCEPT   # 生产环境中如果是ftp服务器, 最好是明确规范一下数据连接的端口范围

[root@basic ~]# iptables -nL --line-numbers
    Chain INPUT (policy DROP)
    num  target     prot opt source               destination
    1    ACCEPT     tcp  --  0.0.0.0/0            192.168.175.10       tcp dpt:21 state NEW,ESTABLISHED
    2    ACCEPT     tcp  --  0.0.0.0/0            192.168.175.10       state RELATED,ESTABLISHED
    3    ACCEPT     tcp  --  192.168.175.1        192.168.175.10       tcp dpt:22 state NEW,ESTABLISHED

    Chain FORWARD (policy DROP)
    num  target     prot opt source               destination

    Chain OUTPUT (policy DROP)
    num  target     prot opt source               destination
    1    ACCEPT     all  --  192.168.175.10       0.0.0.0/0            state ESTABLISHED


[root@basic ~]# iptables -I INPUT -d 192.168.175.10 -p tcp -m multiport --dports 80,443 -m state --state NEW,ESTABLISHED -j ACCEPT
[root@basic ~]# iptables -nL --line-numbers
    Chain INPUT (policy DROP)
    num  target     prot opt source               destination
    1    ACCEPT     tcp  --  0.0.0.0/0            192.168.175.10       multiport dports 80,443 state NEW,ESTABLISHED
    2    ACCEPT     tcp  --  0.0.0.0/0            192.168.175.10       tcp dpt:21 state NEW,ESTABLISHED
    3    ACCEPT     tcp  --  0.0.0.0/0            192.168.175.10       state RELATED,ESTABLISHED
    4    ACCEPT     tcp  --  192.168.175.1        192.168.175.10       tcp dpt:22 state NEW,ESTABLISHED

    Chain FORWARD (policy DROP)
    num  target     prot opt source               destination

    Chain OUTPUT (policy DROP)
    num  target     prot opt source               destination
    1    ACCEPT     all  --  192.168.175.10       0.0.0.0/0            state ESTABLISHED





模块(tos):

[root@basic ~]# man iptables-extensions    #/^   tos
   tos
       This module matches the 8-bit Type of Service field in the IPv4 header (i.e.  including the "Precedence" bits) or the (also 8-bit) Priority field in the IPv6 header.

       [!] --tos value[/mask]
              Matches packets with the given TOS mark value. If a mask is specified, it is logically ANDed with the TOS mark before the comparison.

       [!] --tos symbol
              You can specify a symbolic name when using the tos match for IPv4. The list of recognized TOS names can be obtained by calling iptables with -m tos -h.   Note  that  this
              implies a mask of 0x3F, i.e. all but the ECN bits.

[root@basic ~]# iptables -m tos -h
      tos match options:
      [!] --tos value[/mask]    Match Type of Service/Priority field value
      [!] --tos symbol          Match TOS field (IPv4 only) by symbol
                                Accepted symbolic names for value are:
                                (0x10) 16 Minimize-Delay
                                (0x08)  8 Maximize-Throughput
                                (0x04)  4 Maximize-Reliability
                                (0x02)  2 Minimize-Cost
                                (0x00)  0 Normal-Service


常见 服务 与 ip tos 字段的对应表 参考： https://blog.51cto.com/mangguostudy/2107799        <每天五分钟入门TCP/IP协议栈：：IP协议之TOS字段说明>

// 使用 tcpdump 抓包观察 (抓包的工具还有图形化的 wireshark)
[root@basic ~]# tcpdump -i ens33 -nn -vvv port 22    # man tcpdump  # man 7 pcap-filter  # https://hackertarget.com/tcpdump-examples/

允许ssh 远程连接, 但不允许 rsync 或 scp 拷贝数据(注: 仅有下面一条规则无法防止 xftp 利用 sftp 传输, 还需要在 OUTPUT 添加规则):
[root@basic ~]# iptables -I INPUT -s 192.168.175.1 -d 192.168.175.10 -p tcp --dport 22 -m tos ! --tos 0x8 -j ACCEPT
[root@basic ~]# iptables -I OUTPUT -s 192.168.175.10 -d 192.168.175.1 -p tcp --sport 22 -m tos --tos 0x8 -j DROP



模块(module): -m limit

[root@basic ~]# man iptables-extensions  #/^   limit
   limit
       This  module  matches at a limited rate using a token bucket filter.  A rule using this extension will match until this limit is reached.  It can be used in combination with the
       LOG target to give limited logging, for example.

       xt_limit has no negation support - you will have to use -m hashlimit !  --hashlimit rate in this case whilst omitting --hashlimit-mode.

       --limit rate[/second|/minute|/hour|/day]
              Maximum average matching rate: specified as a number, with an optional `/second', `/minute', `/hour', or `/day' suffix; the default is 3/hour.

       --limit-burst number
              Maximum initial number of packets to match: this number gets recharged by one every time the limit specified above is not reached, up to this number; the default is 5.


[root@basic ~]# iptables -m limit -h
        limit match options:
        --limit avg                     max average match rate: default 3/hour
                                        [Packets per second unless followed by
                                        /sec /minute /hour /day postfixes]
        --limit-burst number            number to match in a burst, default 5

[root@basic ~]# iptables -A INPUT -d 192.168.175.10 -p icmp --icmp-type 8 -m limit --limit 5/minute -j ACCEPT   # 算术题: 60/5=12 秒, 平均12秒接受一次ping请求
[root@basic ~]# iptables -nL --line-numbers
Chain INPUT (policy DROP)
num  target     prot opt source               destination
1    ACCEPT     tcp  --  192.168.175.1        192.168.175.10       tcp dpt:22 tos match!0x08/0xff
2    ACCEPT     icmp --  0.0.0.0/0            192.168.175.10       icmptype 8 limit: avg 5/min burst 5

Chain FORWARD (policy DROP)
num  target     prot opt source               destination

Chain OUTPUT (policy DROP)
num  target     prot opt source               destination
1    DROP       tcp  --  192.168.175.10       192.168.175.1        tcp spt:22 tos match0x08/0xff
2    ACCEPT     all  --  192.168.175.10       0.0.0.0/0            state ESTABLISHED


https://askubuntu.com/questions/137233/how-to-command-ping-display-time-and-date-of-ping
[root@client ~]# ping 192.168.175.10 | while read pong; do echo "$(date '+%F %T'): $pong"; done
2019-05-29 13:56:18: PING 192.168.175.10 (192.168.175.10) 56(84) bytes of data.
2019-05-29 13:56:18: 64 bytes from 192.168.175.10: icmp_seq=1 ttl=64 time=0.408 ms   算术题: 18 + 12 = 30
2019-05-29 13:56:19: 64 bytes from 192.168.175.10: icmp_seq=2 ttl=64 time=0.353 ms
2019-05-29 13:56:20: 64 bytes from 192.168.175.10: icmp_seq=3 ttl=64 time=0.551 ms
2019-05-29 13:56:21: 64 bytes from 192.168.175.10: icmp_seq=4 ttl=64 time=0.468 ms
2019-05-29 13:56:22: 64 bytes from 192.168.175.10: icmp_seq=5 ttl=64 time=0.486 ms
2019-05-29 13:56:30: 64 bytes from 192.168.175.10: icmp_seq=13 ttl=64 time=0.509 ms   算术题: 30 - 18 = 12
2019-05-29 13:56:42: 64 bytes from 192.168.175.10: icmp_seq=25 ttl=64 time=0.515 ms
2019-05-29 13:56:54: 64 bytes from 192.168.175.10: icmp_seq=37 ttl=64 time=0.641 ms
2019-05-29 13:57:06: 64 bytes from 192.168.175.10: icmp_seq=49 ttl=64 time=0.200 ms
2019-05-29 13:57:18: 64 bytes from 192.168.175.10: icmp_seq=61 ttl=64 time=0.489 ms
2019-05-29 13:57:30: 64 bytes from 192.168.175.10: icmp_seq=73 ttl=64 time=0.254 ms
2019-05-29 13:57:42: 64 bytes from 192.168.175.10: icmp_seq=85 ttl=64 time=0.497 ms
2019-05-29 13:57:54: 64 bytes from 192.168.175.10: icmp_seq=97 ttl=64 time=0.293 ms
2019-05-29 13:58:06: 64 bytes from 192.168.175.10: icmp_seq=109 ttl=64 time=0.427 ms
2019-05-29 13:58:18: 64 bytes from 192.168.175.10: icmp_seq=121 ttl=64 time=0.251 ms


https://serverfault.com/questions/485400/what-exactly-do-limit-1-s-and-limit-burst-mean-in-iptables-rules
https://netfilter.org/documentation/HOWTO/packet-filtering-HOWTO-7.html

[root@basic ~]# iptables -A INPUT -d 192.168.175.10 -p icmp --icmp-type 8 -m limit --limit 10/minute --limit-burst 10 -j ACCEPT
[root@client ~]# ping 192.168.175.10 | while read pong; do echo "$(date '+%F %T'): $pong"; done
2019-05-29 14:56:12: PING 192.168.175.10 (192.168.175.10) 56(84) bytes of data.
2019-05-29 14:56:12: 64 bytes from 192.168.175.10: icmp_seq=1 ttl=64 time=0.290 ms
2019-05-29 14:56:13: 64 bytes from 192.168.175.10: icmp_seq=2 ttl=64 time=0.412 ms
2019-05-29 14:56:14: 64 bytes from 192.168.175.10: icmp_seq=3 ttl=64 time=0.265 ms
2019-05-29 14:56:15: 64 bytes from 192.168.175.10: icmp_seq=4 ttl=64 time=0.399 ms
2019-05-29 14:56:16: 64 bytes from 192.168.175.10: icmp_seq=5 ttl=64 time=0.615 ms
2019-05-29 14:56:17: 64 bytes from 192.168.175.10: icmp_seq=6 ttl=64 time=0.511 ms
2019-05-29 14:56:18: 64 bytes from 192.168.175.10: icmp_seq=7 ttl=64 time=0.351 ms
2019-05-29 14:56:19: 64 bytes from 192.168.175.10: icmp_seq=8 ttl=64 time=0.303 ms
2019-05-29 14:56:20: 64 bytes from 192.168.175.10: icmp_seq=9 ttl=64 time=0.554 ms
2019-05-29 14:56:21: 64 bytes from 192.168.175.10: icmp_seq=10 ttl=64 time=0.682 ms
2019-05-29 14:56:22: 64 bytes from 192.168.175.10: icmp_seq=11 ttl=64 time=0.591 ms
2019-05-29 14:56:24: 64 bytes from 192.168.175.10: icmp_seq=13 ttl=64 time=0.545 ms
2019-05-29 14:56:30: 64 bytes from 192.168.175.10: icmp_seq=19 ttl=64 time=0.613 ms
2019-05-29 14:56:36: 64 bytes from 192.168.175.10: icmp_seq=25 ttl=64 time=0.338 ms
2019-05-29 14:56:42: 64 bytes from 192.168.175.10: icmp_seq=31 ttl=64 time=1.93 ms
2019-05-29 14:56:48: 64 bytes from 192.168.175.10: icmp_seq=37 ttl=64 time=0.557 ms
2019-05-29 14:56:54: 64 bytes from 192.168.175.10: icmp_seq=43 ttl=64 time=1.04 ms
2019-05-29 14:57:00: 64 bytes from 192.168.175.10: icmp_seq=49 ttl=64 time=0.825 ms
2019-05-29 14:57:06: 64 bytes from 192.168.175.10: icmp_seq=55 ttl=64 time=0.689 ms
2019-05-29 14:57:12: 64 bytes from 192.168.175.10: icmp_seq=61 ttl=64 time=0.593 ms
2019-05-29 14:57:18: 64 bytes from 192.168.175.10: icmp_seq=67 ttl=64 time=0.472 ms





模块(module): -m connlimit

[root@basic ~]# iptables -m connlimit -h
    connlimit match options:
      --connlimit-upto n     match if the number of existing connections is 0..n
      --connlimit-above n    match if the number of existing connections is >n
      --connlimit-mask n     group hosts using prefix length (default: max len)
      --connlimit-saddr      select source address for grouping
      --connlimit-daddr      select destination addresses for grouping

[root@basic ~]# man iptables-extensions   #/^   connlimit
   connlimit
       Allows you to restrict the number of parallel connections to a server per client IP address (or client address block).

       --connlimit-upto n
              Match if the number of existing connections is below or equal n.

       --connlimit-above n
              Match if the number of existing connections is above n.

       --connlimit-mask prefix_length
              Group hosts using the prefix length. For IPv4, this must be a number between (including) 0 and 32. For IPv6, between 0 and 128.  If  not  specified,  the  maximum  prefix
              length for the applicable protocol is used.

       --connlimit-saddr
              Apply the limit onto the source group. This is the default if --connlimit-daddr is not specified.

       --connlimit-daddr
              Apply the limit onto the destination group.

       Examples:

       # allow 2 telnet connections per client host
              iptables -A INPUT -p tcp --syn --dport 23 -m connlimit --connlimit-above 2 -j REJECT

       # you can also match the other way around:
              iptables -A INPUT -p tcp --syn --dport 23 -m connlimit --connlimit-upto 2 -j ACCEPT

       # limit the number of parallel HTTP requests to 16 per class C sized source network (24 bit netmask)
              iptables -p tcp --syn --dport 80 -m connlimit --connlimit-above 16 --connlimit-mask 24 -j REJECT

       # limit the number of parallel HTTP requests to 16 for the link local network
              (ipv6) ip6tables -p tcp --syn --dport 80 -s fe80::/64 -m connlimit --connlimit-above 16 --connlimit-mask 64 -j REJECT

       # Limit the number of connections to a particular host:
              ip6tables -p tcp --syn --dport 49152:65535 -d 2001:db8::1 -m connlimit --connlimit-above 100 -j REJECT


https://www.cyberciti.biz/faq/iptables-connection-limits-howto/
https://blog.csdn.net/pestd/article/details/13628849



模块(module): -m time

[root@basic ~]# iptables -m time -h
      time match options:
          --datestart time     Start and stop time, to be given in ISO 8601
          --datestop time      (YYYY[-MM[-DD[Thh[:mm[:ss]]]]])
          --timestart time     Start and stop daytime (hh:mm[:ss])
          --timestop time      (between 00:00:00 and 23:59:59)
      [!] --monthdays value    List of days on which to match, separated by comma
                               (Possible days: 1 to 31; defaults to all)
      [!] --weekdays value     List of weekdays on which to match, sep. by comma
                               (Possible days: Mon,Tue,Wed,Thu,Fri,Sat,Sun or 1 to 7
                               Defaults to all weekdays.)
          --kerneltz           Work with the kernel timezone instead of UTC   <----  该选项不推荐使用, 避免时间转换错误, 推荐直接使用 默认的 utc 时间

[root@basic ~]# man iptables-extensions    #/^   time

   time
       This matches if the packet arrival time/date is within a given range. All options are optional, but are ANDed when specified. All times are interpreted as UTC by default.

       --datestart YYYY[-MM[-DD[Thh[:mm[:ss]]]]]

       --datestop YYYY[-MM[-DD[Thh[:mm[:ss]]]]]
              Only match during the given time, which must be in ISO 8601 "T" notation.  The possible time range is 1970-01-01T00:00:00 to 2038-01-19T04:17:07.

              If --datestart or --datestop are not specified, it will default to 1970-01-01 and 2038-01-19, respectively.

       --timestart hh:mm[:ss]

       --timestop hh:mm[:ss]
              Only match during the given daytime. The possible time range is 00:00:00 to 23:59:59. Leading zeroes are allowed (e.g. "06:03") and correctly interpreted as base-10.

       [!] --monthdays day[,day...]
              Only  match on the given days of the month. Possible values are 1 to 31. Note that specifying 31 will of course not match on months which do not have a 31st day; the same
              goes for 28- or 29-day February.

       [!] --weekdays day[,day...]
              Only match on the given weekdays. Possible values are Mon, Tue, Wed, Thu, Fri, Sat, Sun, or values from 1 to 7, respectively. You may also use two-character variants (Mo,
              Tu, etc.).

       --contiguous
              When --timestop is smaller than --timestart value, match this as a single time period instead distinct intervals.  See EXAMPLES.

       --kerneltz
              Use the kernel timezone instead of UTC to determine whether a packet meets the time regulations.

       About  kernel  timezones: Linux keeps the system time in UTC, and always does so.  On boot, system time is initialized from a referential time source. Where this time source has
       no timezone information, such as the x86 CMOS RTC, UTC will be assumed. If the time source is however not in UTC, userspace should provide the correct system time  and  timezone
       to the kernel once it has the information.

       Local time is a feature on top of the (timezone independent) system time. Each process has its own idea of local time, specified via the TZ environment variable. The kernel also
       has its own timezone offset variable. The TZ userspace environment variable specifies how the UTC-based system time is displayed, e.g. when you run date(1), or what you  see  on
       your desktop clock.  The TZ string may resolve to different offsets at different dates, which is what enables the automatic time-jumping in userspace. when DST changes. The ker‐
       nel's timezone offset variable is used when it has to convert between non-UTC sources, such as FAT filesystems, to UTC (since the latter is what the rest of the system uses).

       The caveat with the kernel timezone is that Linux distributions may ignore to set the kernel timezone, and instead only set the system time. Even if  a  particular  distribution
       does  set  the timezone at boot, it is usually does not keep the kernel timezone offset - which is what changes on DST - up to date.  ntpd will not touch the kernel timezone, so
       running it will not resolve the issue. As such, one may encounter a timezone that is always +0000, or one that is wrong half of the time of the year. As such,  using  --kerneltz
       is highly discouraged.

       EXAMPLES. To match on weekends, use:

              -m time --weekdays Sa,Su

       Or, to match (once) on a national holiday block:

              -m time --datestart 2007-12-24 --datestop 2007-12-27

       Since the stop time is actually inclusive, you would need the following stop time to not match the first second of the new day:

              -m time --datestart 2007-01-01T17:00 --datestop 2007-01-01T23:59:59

       During lunch hour:

              -m time --timestart 12:30 --timestop 13:30

       The fourth Friday in the month:

              -m time --weekdays Fr --monthdays 22,23,24,25,26,27,28

       (Note that this exploits a certain mathematical property. It is not possible to say "fourth Thursday OR fourth Friday" in one rule. It is possible with multiple rules, though.)

       Matching across days might not do what is expected.  For instance,

              -m time --weekdays Mo --timestart 23:00  --timestop 01:00 Will match Monday, for one hour from midnight to 1 a.m., and then again for another hour from 23:00 onwards.  If
              this is unwanted, e.g. if you would like 'match for two hours from Montay 23:00 onwards' you need to also specify the --contiguous option in the example above.



// 复习一下时间的知识, 更多信息见 https://github.com/yangsg/linux_training_notes/blob/master/linux_basic/centos7.4/01-full/001-date.txt
[root@basic ~]# date '+%F %T %z'      # 显示当前本地时间
2019-05-29 16:35:26 +0800
[root@basic ~]# date -u '+%F %T %z'   # 显示当前本地时间对应的 utc 时间
2019-05-29 08:35:32 +0000


[root@basic ~]# date -u --date='2015-05-04 08:00:00 +0800'  '+%F %T %z'   # 将指定的时间转换为 utc 时间
2015-05-04 00:00:00 +0000

[root@basic ~]# date -u --date='2019-05-29 16:00:00 +0800' '+%F %T %z'
2019-05-29 08:00:00 +0000
[root@basic ~]# date -u --date='2019-05-29 17:00:00 +0800' '+%F %T %z'
2019-05-29 09:00:00 +0000


// 在utc时间 08:00:00 至 09:00:00 这段时间 (即东8区的 16:00:00 至  17:00:00), 禁止对 server 的 ping 操作
[root@basic ~]# iptables -I INPUT -d 192.168.175.10 -p icmp -m time --timestart 08:00:00 --timestop 09:00:00 -j DROP  #注：这里时间是默认的 utc 时间, 避免的时区转换可能导致的错误
[root@basic ~]# iptables -nL --line-numbers
Chain INPUT (policy DROP)
num  target     prot opt source               destination
1    DROP       icmp --  0.0.0.0/0            192.168.175.10       TIME from 08:00:00 to 09:00:00 UTC    <----注：这里是 utc 时间
2    ACCEPT     tcp  --  192.168.175.1        192.168.175.10       tcp dpt:22 tos match!0x08/0xff
3    ACCEPT     icmp --  0.0.0.0/0            192.168.175.10       icmptype 8 limit: avg 10/min burst 10

Chain FORWARD (policy DROP)
num  target     prot opt source               destination

Chain OUTPUT (policy DROP)
num  target     prot opt source               destination
1    DROP       tcp  --  192.168.175.10       192.168.175.1        tcp spt:22 tos match0x08/0xff
2    ACCEPT     all  --  192.168.175.10       0.0.0.0/0            state ESTABLISHED



---------------------------------------------------------------------------------
其他与安全有关的文档或软件:

DDoS Protection With IPtables: The Ultimate Guide (使用 iptables 防止 DDoS 攻击 的终极指南)
  https://javapipe.com/blog/iptables-ddos-protection/

How to Use Linux Iptables To Block Different Attacks
  https://linoxide.com/firewall/block-common-attacks-iptables/

浅谈iptables防SYN Flood攻击和CC攻击
  https://www.cnblogs.com/flying1819/articles/8795912.html


https://blog.myssl.com/
  HTTPS 安全最佳实践（一）之SSL/TLS部署    https://blog.myssl.com/ssl-and-tls-deployment-best-practices/
  HTTPS 安全最佳实践（二）之安全加固       https://blog.myssl.com/https-security-best-practices/
  HTTPS 安全最佳实践（三）之服务器软件     https://blog.myssl.com/https-security-best-practices-2/


在CentOS 7上使用Tripwire监控和检测修改的文件
  https://www.howtoing.com/monitoring-and-detecting-modified-files-using-tripwire-on-centos-7
威胁快报｜首爆新型TLS 1.2协议漏洞，数千网站面临数据泄露风险
  https://www.freebuf.com/company-information/195800.html

https://www.snort.org/
http://www.squid-cache.org/
https://www.tripwire.com/


https://www.tecmint.com/linux-server-hardening-security-tips/






