
# keyword modprobe

man modprobe


作用: modprobe - Add and remove modules from the Linux Kernel

语法: modprobe [-v] [-V] [-C config-file] [-n] [-i] [-q] [-b] [modulename] [module parameters...]
语法: modprobe [-r] [-v] [-n] [-i] [modulename...]
语法: modprobe [-c]
语法: modprobe [--dump-modversions] [filename]

说明:
     modprobe intelligently adds or removes a module from the Linux kernel: note that for convenience, there is no difference between _ and - in module names (automatic underscore
     conversion is performed).  modprobe looks in the module directory /lib/modules/`uname -r` for all the modules and other files, except for the optional configuration files in the
     /etc/modprobe.d directory (see modprobe.d(5)).  modprobe will also use module options specified on the kernel command line in the form of <module>.<option> and blacklists in the
     form of modprobe.blacklist=<module>.

     Note that unlike in 2.4 series Linux kernels (which are not supported by this tool) this version of modprobe does not do anything to the module itself: the work of resolving
     symbols and understanding parameters is done inside the kernel. So module failure is sometimes accompanied by a kernel message: see dmesg(8).

    -------------------------------------
    中文注释:
    modprobe 需要一个 最新(up-to-date) 的由 与modprobe一起发布的 对应的 depmod 工具 生成的 modules.dep.bin 文件.
    该文件列出了 每个 module 之间 的 依赖关系(如果存在), 而 modprobe 使用这些 依赖信息 自动地 add 或 remove 这些 dependencies.
    -------------------------------------
     modprobe expects an up-to-date modules.dep.bin file as generated by the corresponding depmod utility shipped along with modprobe (see depmod(8)). This file lists what other
     modules each module needs (if any), and modprobe uses this to add or remove these dependencies automatically.

     If any arguments are given after the modulename, they are passed to the kernel (in addition to any options listed in the configuration file).



---------------------------------------------------------------------------------------------------

[root@basic ~]# modprobe nf_conntrack_ftp       # 加载(load) 模块 nf_conntrack_ftp

[root@basic ~]# lsmod | grep nf_conntrack_ftp
nf_conntrack_ftp       18638  0
nf_conntrack          133387  1 nf_conntrack_ftp


注: 要使用 systool 命令, 需要先执行命令  yum -y install sysfsutils 对其进行安装
[root@basic ~]# systool -vm nf_conntrack_ftp | grep ports   # 查看 加载 模块  nf_conntrack_ftp 的 ports 参数
    ports               = "21"

---------------------------------------------------------------------------------------------------

     -r, --remove
         This option causes modprobe to remove rather than insert a module. If the modules it depends on are also unused, modprobe will try to remove them too. Unlike insertion, more
         than one module can be specified on the command line (it does not make sense to specify module parameters when removing modules).

         There is usually no reason to remove modules, but some buggy modules require it. Your distribution kernel may not have been built to support removal of modules at all.

[root@basic ~]# lsmod | grep nf_conntrack_ftp
nf_conntrack_ftp       18638  0
nf_conntrack          133387  1 nf_conntrack_ftp

[root@basic ~]# modprobe -r nf_conntrack_ftp  # 卸载(unload) 模块 nf_conntrack_ftp



---------------------------------------------------------------------------------------------------
[root@basic ~]# vim /etc/modprobe.d/myftp.conf   # 编辑 目录下的 /etc/modprobe.d/ 文件, 为其指定参数
    # 为 模块 nf_conntrack_ftp 指定 ports 参数
    options nf_conntrack_ftp ports=555

[root@basic ~]# modprobe nf_conntrack_ftp       # 加载(load) 模块 nf_conntrack_ftp

[root@basic ~]# lsmod | grep nf_conntrack_ftp
nf_conntrack_ftp       18638  0
nf_conntrack          133387  1 nf_conntrack_ftp

[root@basic ~]# systool -vm nf_conntrack_ftp | grep ports   # 查看 加载 模块  nf_conntrack_ftp 的 ports 参数
    ports               = "555"

---------------------------------------------------------------------------------------------------
