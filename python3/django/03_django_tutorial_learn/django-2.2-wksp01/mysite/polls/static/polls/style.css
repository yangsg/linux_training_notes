/*
https://docs.djangoproject.com/en/2.2/intro/tutorial06/
https://docs.djangoproject.com/en/2.2/howto/static-files/
https://docs.djangoproject.com/en/2.2/ref/contrib/staticfiles/
 */

/*
django.contrib.staticfiles 作用:
    it collects static files from each of your applications (and any other places you specify)
    into a single location that can easily be served in production.

(tutorial-venv) [root@python3lang mysite]# mkdir polls/static

    Django 会查找 polls/static 下的 files, 方式类似于 查找 polls/templates/ 下的 templates 文件.


https://docs.djangoproject.com/en/2.2/ref/settings/#staticfiles-finders
https://docs.djangoproject.com/en/2.2/intro/tutorial06/#customize-your-app-s-look-and-feel

STATICFILES_FINDERS 的默认值为:

        [
            'django.contrib.staticfiles.finders.FileSystemFinder',
            'django.contrib.staticfiles.finders.AppDirectoriesFinder',
        ]


  Django’s STATICFILES_FINDERS setting contains a list of finders that
  know how to discover static files from various sources.
  One of the defaults is AppDirectoriesFinder which looks for a “static” subdirectory
  in each of the INSTALLED_APPS, like the one in polls we just created.
  The admin site uses the same directory structure for its static files.

  Within the static directory you have just created, create another directory called
  polls and within that create a file called style.css. In other words,
  your stylesheet should be at polls/static/polls/style.css. Because of
  how the AppDirectoriesFinder staticfile finder works, you can refer to
  this static file in Django simply as polls/style.css, similar to
  how you reference the path for templates.


(tutorial-venv) [root@python3lang mysite]# mkdir -p polls/static/polls
(tutorial-venv) [root@python3lang mysite]# vim polls/static/polls/style.css


    Static file namespacing (静态文件的 名字空间, 其作用和道理和 template file 的名字空间类似 )

      Just like templates, we might be able to get away with putting our static files directly
      in polls/static (rather than creating another polls subdirectory), but it would actually
      be a bad idea. Django will choose the first static file it finds whose name matches,
      and if you had a static file with the same name in a different application,
      Django would be unable to distinguish between them. We need to be able to point
      Django at the right one, and the easiest way to ensure this is by namespacing them.
      That is, by putting those static files inside another directory named for the application itself.


(tutorial-venv) [root@python3lang mysite]# mkdir -p polls/static/polls/images/

放置背景图片:   polls/static/polls/images/background.gif


    Warning:

        Of course the {% static %} template tag is not available for use in static files
        like your stylesheet which aren’t generated by Django. You should always use
        relative paths to link your static files between each other, because then you
        can change STATIC_URL (used by the static template tag to generate its URLs)
        without having to modify a bunch of paths in your static files as well.

 */


body {
    background: white url("images/background.gif") no-repeat;
}

li a {
    color: green;
}

