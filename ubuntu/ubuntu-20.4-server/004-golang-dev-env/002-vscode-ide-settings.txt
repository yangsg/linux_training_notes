

$ vim .vscode/settings.json   #见 https://code.visualstudio.com/docs/getstarted/settings
{
  "editor.tabSize": 2,
  "files.eol": "\n",
  "editor.fontSize": 20,
  "editor.dragAndDrop": false,
  "files.encoding": "utf8",
  "editor.fontFamily": "'Courier New', Consolas, monospace",
  "workbench.colorTheme": "Monokai"
}


安装的扩展插件(extensions):
  Name: Go
  Id: golang.go


--------------------------------------------------
vscode 中安装 vim 插件

	https://github.com/VSCodeVim/Vim

	vscodevim.vim


// 默认禁用该插件的配置, 之后可以使用命令 toggleVim 来切换
"vim.disableExtension": true



--------------------------------------------------

vscode remote 远程开发(注: 这种方式比 采用samba 共享目录的方式时 vscode 的响应速度更快一些)

		https://www.jianshu.com/p/f81858d58c2d
		https://code.visualstudio.com/docs/remote/remote-overview
		https://code.visualstudio.com/docs/remote/ssh

   远程开发插件:
		https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack

			Name: Remote Development
			Id: ms-vscode-remote.vscode-remote-extensionpack


// 打开 git bash，在 windows 本地生成 一堆密钥
$ ssh-keygen -t rsa -b 4096
		Generating public/private rsa key pair.
		Enter file in which to save the key (/c/Users/xxxx/.ssh/id_rsa):
		/c/Users/xxxx/.ssh/id_rsa already exists.  Overwrite (y/n)? n


$ ssh-copy-id ysg@192.168.175.133   #将本地的公钥添加到 remote server 中 ysg 的信任列表中
		/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/c/Users/xxxx/.ssh/id_rsa.pub"
		The authenticity of host '192.168.175.133 (192.168.175.133)' can't be established.
		ECDSA key fingerprint is SHA256:n6RfTFH3xRrSKEw+7xuR7XOBoPYQ92ew40ePnCg2ZeA.
		Are you sure you want to continue connecting (yes/no)? yes <---键入 yes
		/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
		/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys
		ysg@192.168.175.133's password:

		Number of key(s) added: 1

		Now try logging into the machine, with:   "ssh 'ysg@192.168.175.133'"
		and check to make sure that only the key(s) you wanted were added.


安装 "Remote Development" 插件, 该插件安装完成后重启 vscode, 然后利用该 "Remote Development"  建立到 remote server 的 ssh 连接.

随后便可以向在本地一样, 创建项目工程, 并在必要时安装特定的 语言插件等.


	如下是 vscode 安装 golang 的相关开发插件时的 log 信息, 可以观察到插件在 remote server 上的安装情况:
			Tools environment: GOPATH=/home/ysg/go
			Installing 9 tools at /home/ysg/go/bin in module mode.
				gopkgs
				go-outline
				gotests
				gomodifytags
				impl
				goplay
				dlv
				golint
				gopls
				gopls

			Installing github.com/uudashr/gopkgs/v2/cmd/gopkgs (/home/ysg/go/bin/gopkgs)
			SUCCEEDED
			Installing github.com/ramya-rao-a/go-outline (/home/ysg/go/bin/go-outline) SUCCEEDED
			Installing github.com/cweill/gotests/... (/home/ysg/go/bin/gotests) SUCCEEDED
			Installing github.com/fatih/gomodifytags (/home/ysg/go/bin/gomodifytags) SUCCEEDED
			Installing github.com/josharian/impl (/home/ysg/go/bin/impl) SUCCEEDED
			Installing github.com/haya14busa/goplay/cmd/goplay (/home/ysg/go/bin/goplay) SUCCEEDED
			Installing github.com/go-delve/delve/cmd/dlv (/home/ysg/go/bin/dlv) SUCCEEDED
			Installing golang.org/x/lint/golint (/home/ysg/go/bin/golint) SUCCEEDED
			Installing golang.org/x/tools/gopls (/home/ysg/go/bin/gopls) SUCCEEDED

			All tools successfully installed. You are ready to Go :).


--------------------------------------------------




----------------------------------------------------------------------------------------------------

快捷键:

	https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf


注: sogou 输入法的一些快捷键可能有 ide 开发工具的一些工具存在冲突, 所以可以在对 sogou 的 "属性设置|高级|系统功能快捷键" 中将那些没用的快捷键取消掉.


Rich languages editing

		Ctrl+Space            Trigger suggestion
		Ctrl+Shift+Space      Trigger parameter hints  <----显示参数信息
		Shift+Alt+F           Format document
		Ctrl+K Ctrl+F         Format selection
		F12                   Go to Definition
		Alt+F12               Peek Definition
		Ctrl+K F12            Open Definition to the side
		Ctrl+.                Quick Fix
		Shift+F12             Show References
		F2                    Rename Symbol
		Ctrl+K Ctrl+X         Trim trailing whitespace
		Ctrl+K M              Change file language



Ctrl + ` : 显示 terminal

----------------------------------------------------------------------------------------------------

vscode 中 go 的 debug:

	https://www.cnblogs.com/ljhoracle/p/11047083.html
	https://github.com/golang/vscode-go/blob/master/docs/debugging.md
	https://vscode-debug-specs.github.io/go/
	https://blog.csdn.net/turbock/article/details/102665187

  vscode 中的一些 debug 相关的通用概念, 基本适用于各种语言:
		https://code.visualstudio.com/Docs/editor/debugging


配置 .vscode/launch.json (该文件是 vscode 中用于保存调试配置信息的文件)
$ vim  vscode/launch.json
	{
		// Use IntelliSense to learn about possible attributes.
		// Hover to view descriptions of existing attributes.
		// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
		"version": "0.2.0",
		"configurations": [
			{
				"name": "Launch",
				"type": "go",
				"request": "launch",
				"mode": "auto",
				"program": "${fileDirname}/main.go",
				"env": {},
				"args": []
			}
		]
	}
----------------------------------------------------------------------------------------------------











----------------------------------------------------------------------------------------------------
其他 与 vscode ide 无关的, 与 golang 开发相关的知识:


使用 curl 提交 form 表单
	https://davidwalsh.name/curl-post-file

Gin: go 的一个 web 框架
	https://github.com/gin-gonic/gin



-----------goland 补充开始-----------------------------------------------------------------------------------------
补充:
goland 远程调试 go app 的方式(如 windows 上的 goland ide 与远程调试 linux 上的 go app 进程, 其借助的是 delve 这个 remote debugger)

goland(以及其他 jetbrains相关的 ide) 坚持采用的是 "本地开发-部署"的模式,
因为 goland 的一些辅助功能依赖于 index,
而其 re-index 行为的快速执行只有本地文件(local files)才能提供保证。
所以这和 vscode 的 remote development 插件的工作模式有点不一样的。


linux 端执行如下操作------------------------------
step01: 如果还没有安装 delve 这个远程调试器的话，则先对其安装(各种安装方式可参考 delve 的 github 官网):
ysg@vm01:~$ git clone https://github.com/go-delve/delve
ysg@vm01:~$ cd delve/
ysg@vm01:~/delve$ go install github.com/go-delve/delve/cmd/dlv
ysg@vm01:~$ $HOME/go/bin/dlv version
Delve Debugger
Version: 1.7.0
Build: $Id: 03c66357c10892f8b93d05c77ad27c1f4dd0cb2b $

step02: cd 到go project目录:
ysg@vm01:~$ cd ~/wksp_goland/HelloWorld
ysg@vm01:~/wksp_goland/HelloWorld$ $HOME/go/bin/dlv --listen=:2345 --headless=true --api-version=2 debug
API server listening at: [::]:2345

   注: dlv 的其他使用方式还可参考:
		   https://www.jetbrains.com/help/go/attach-to-running-go-processes-with-debugger.html#step-1-build-the-application
		   https://www.jetbrains.com/help/go/attach-to-running-go-processes-with-debugger.html#step-2-run-delve-on-the-host-machine


windows 端执行如下操作---------------------------
goland ide 中 创建 Go Remote run/debug configuration:
1. 菜单 Run|Edit Configuration(或 ctrl + shift + A, 然后键入 edit configuration)
2. 在弹出对话框中点击 Add 按钮(+), 并选择[Go Remote]项。
3. 键入 host(即linux的ip) 以及 port(即linux上执行 dlv 命令时指定的监听端口)
4. 最后,在 goland 编辑器中设置断点, 并选择 toolbar 中 run/debug configurations 列表中被创建好的
   Go Remote configuration, 然后点击 Debug <configuration_name> 即可开始调试了。



参考链接:
https://www.jetbrains.com/help/go/deploying-applications.html
https://www.jetbrains.com/help/go/attach-to-running-go-processes-with-debugger.html#attach-to-a-process-on-a-remote-machine
https://github.com/go-delve/delve
https://github.com/go-delve/delve/blob/master/Documentation/installation/README.md
https://github.com/go-delve/delve/blob/master/Documentation/cli/getting_started.md
https://golangforall.com/en/post/go-docker-delve-remote-debug.html

注: 所谓的将 debugger(如这里的 remote debugger delve) 附加到被调试进程, 
    在linux上实际上就是将 debugger 进程设置成为被调试进程的父进程。
	(参考讲解 linux 内核的一些书籍)
-----------goland 补充结束-----------------------------------------------------------------------------------------





