
16.3.9 Semisynchronous Replication
      https://dev.mysql.com/doc/refman/5.7/en/replication-semisync.html

16.3.9.1 Semisynchronous Replication Administrative Interface
      https://dev.mysql.com/doc/refman/5.7/en/replication-semisync-interface.html

16.3.9.2 Semisynchronous Replication Installation and Configuration
      https://dev.mysql.com/doc/refman/5.7/en/replication-semisync-installation.html

16.3.9.3 Semisynchronous Replication Monitoring
      https://dev.mysql.com/doc/refman/5.7/en/replication-semisync-monitoring.html


---------------------------------------------------------------------------------------------------
16.3.9 Semisynchronous Replication
      https://dev.mysql.com/doc/refman/5.7/en/replication-semisync.html


MySQL 5.7 通过 插件 支持 semisynchronous replication

MySQL replication 默认是 异步的(asynchronous). The master 将 events 写到 其 binary log
但是 并不 知道 a slave 是否(whether) 或 何时(when) 已经取回 并 处理执行了 它们.
使用 asynchronous replication, 如果 the master crashes, transactions 有可能 尚未被 传送给
任何 一台 slave. 结果就是, 在这种情况下 从 master 故障转移(failover) 到 slave 可能导致
故障转移到 相对 master 而言 缺失了(missing) 部分 transactions 的 server 上. (所以无法保证数据的完整,一致性)

Semisynchronous replication 能够被 用作 asynchronous replication 的一种 替代:

    - A slave 在 connects 到 the master 时 执行自己(slave) 是否具有 半同步能力(semisynchronous-capable).

    - 如果 master 端 的 semisynchronous replication 被 enabled 且 至少(at least) 存在 一台 semisynchronous slave,
      performs a transaction commit 的 a thread 会 blocks 并 waits 直到  至少 一台 slave 承认告知(acknowledges) 它
      已经 received 了该 transaction 的 所有 events, 或 直到 a timeout occurs.

    - The slave 仅 在 这些 events 已经被 写入其 relay log 和 被 flushed to disk 之后, 才会 acknowledges 自己接受 到了 transaction's events.

    - 如果 超过一段时间 都 一直没有 any slave having acknowledged the transaction, 则 the master 恢复为 异步复制(semisynchronous replication).
      When at least one semisynchronous slave catches up, the master 又 返回 到 半同步复制(semisynchronous replication).

    - Semisynchronous replication 必须在 the master 端 和 the slave 端 同时(both) 被 enabled. 如果 semisynchronous replication 在
      the master 上 被 disabled, 或者 在 the master 上被 enabled 但 没有在 任何一台 slaves 上被 enabled,
      则 the master 会使用 半同步复制(asynchronous replication)

当 the master 正 处于阻塞(is blocking)时(因 waiting for acknowledgment from a slave), 它 不会 向 performed the transaction
的 session 返回(return). 当 block ends, the master 才会 向 session 返回(return), 然后该 session 能够 proceed to execute other statements.
At this point, the transaction 在 master 端 已经被 committed 了, 且 其 events 已经被 at least one slave 承认告知(acknowledged) 收到.


the master 在 继续之前(before proceeding) 对于 每个 transaction 所必须 收到(receive) 的 slave acknowledgments 的 the number 可以
使用 系统变量 rpl_semi_sync_master_wait_for_slave_count 来 配置. 其 默认值(default value) 为 1.

Blocking 也可以 发生在 rollbacks 被 written 到 the binary log 之后, 这种情况 会在 修改(modifies) nontransactional tables 的 a transaction
被 rolled back 时 发生(occurs). The rolled-back transaction 会被 logged 即使 it has no effect for transactional tables
because the modifications to the nontransactional tables cannot be rolled back and must be sent to slaves.


For statements that do not occur in transactional context (that is,
when no transaction has been started with START TRANSACTION or SET autocommit = 0),
autocommit is enabled and each statement commits implicitly. With semisynchronous replication,
the master blocks for each such statement, just as it does for explicit transaction commits.


理解 “semisynchronous replication” 中 “semi” 的 意思(通过比较 异步 和 完全同步 复制):
To understand what the “semi” in “semisynchronous replication” means, compare it with asynchronous and fully synchronous replication:

  - With asynchronous replication, the master writes events to its binary log and slaves request them when they are ready.
    There is no guarantee that any event will ever reach any slave.

  - With fully synchronous replication, when a master commits a transaction, all slaves also will have
    committed the transaction before the master returns to the session that performed the transaction.
    The drawback of this is that there might be a lot of delay to complete a transaction.

  - Semisynchronous replication falls between asynchronous and fully synchronous replication.
    The master waits only until at least one slave has received and logged the events.
    It does not wait for all slaves to acknowledge receipt, and it requires only receipt,
    not that the events have been fully executed and committed on the slave side.


相较于 异步复制(asynchronous replication), semisynchronous replication 提供了 改进了的 数据完整性(data integrity) 因为
当 a commit 成功 returns 的时候, 则 可以知道 the data 至少 在 两处地方(two places) 已经存在.
在 a semisynchronous master 接受(receives)到 从 由 变量 rpl_semi_sync_master_wait_for_slave_count 配置的
the number of slaves 返回的 acknowledgment 之前, the transaction 一直 处于 hold 状态 且 并未 被 committed.


Semisynchronous replication 还可以 通过 限制 binary log events 能被 从 master 发送(sent) 到 slave 的 speed
来 在 busy sessions 上 设置 a rate limit. When one user is too busy,
this will slow it down, which is useful in some deployment situations.


Semisynchronous replication 确实会对 性能 产生影响, 因为 需要 wait for slaves 而使 commits 变得 slower.
这时为 增加 数据完整性(data integrity) 而做的 交易.The amount of slowdown is at least the
TCP/IP roundtrip time to send the commit to the slave and wait for the acknowledgment of receipt by the slave.
这意味着 semisynchronous replication 最合适工作在 通过 fast networks 通信的 近距离的 servers, 最不适合
工作在 通过 slow networks 通信的 远距离的 servers.

系统变量 rpl_semi_sync_master_wait_point 控制 a semisynchronous replication master 在 向 提交(commit) 该
transaction 的 the client 返回 a status 之前 等待 slave 的 transaction receipt 的 acknowledgment 的时间点.
允许的值 有:

AFTER_SYNC (the default): The master 将 each transaction 写到 its binary log 和 the slave,
                          并 syncs the binary log to disk. The master waits for slave acknowledgment of transaction receipt after the sync.
                          Upon receiving acknowledgment, the master commits the transaction
                          to the storage engine and returns a result to the client, which then can proceed.


AFTER_COMMIT: The master writes each transaction to its binary log and the slave, syncs the binary log,
              and commits the transaction to the storage engine.
              The master waits for slave acknowledgment of transaction receipt after the commit.
              Upon receiving acknowledgment, the master returns a result to the client, which then can proceed.


The replication characteristics of these settings differ as follows:(见官网)
        https://dev.mysql.com/doc/refman/5.7/en/replication-semisync.html
---------------------------------------------------------------------------------------------------


16.3.9.1 Semisynchronous Replication Administrative Interface
      https://dev.mysql.com/doc/refman/5.7/en/replication-semisync-interface.html

The administrative interface to semisynchronous replication has several components:

- Two plugins(两个插件) implement semisynchronous capability. There is one plugin for the master side and one for the slave side.
- System variables(系统变量) control plugin behavior. Some examples:

        rpl_semi_sync_master_enabled   用于控制是否启用 semisynchronous replication(即对应 plugin), 默认值为 0, 即默认该功能没有被启用.

              Controls whether semisynchronous replication is enabled on the master.
              To enable or disable the plugin, set this variable to 1 or 0, respectively. The default is 0 (off).

        rpl_semi_sync_master_timeout   单位为 milliseconds(毫秒), 默认值为 10000，即 10 秒

              A value in milliseconds that controls how long the master waits on a commit for acknowledgment from a slave
              before timing out and reverting to asynchronous replication. The default value is 10000 (10 seconds).

        rpl_semi_sync_slave_enabled  类似于 rpl_semi_sync_master_enabled, 但是控制的是 the slave plugin. 默认值也是 0

              Similar to rpl_semi_sync_master_enabled, but controls the slave plugin.

All rpl_semi_sync_xxx system variables are described at Section 5.1.7, “Server System Variables”.
                                https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html



Status variables(状态变量) enable semisynchronous replication monitoring. Some examples:

        Rpl_semi_sync_master_clients   表示 semisynchronous slaves 数

              The number of semisynchronous slaves.

        Rpl_semi_sync_master_status

              Whether semisynchronous replication currently is operational on the master.
              The value is 1 if the plugin has been enabled and a commit acknowledgment has not occurred.
              It is 0 if the plugin is not enabled or the master has fallen back to asynchronous replication due to commit acknowledgment timeout.

        Rpl_semi_sync_master_no_tx   没有被 a slave 成功 确认的 commits 数.

              The number of commits that were not acknowledged successfully by a slave.

        Rpl_semi_sync_master_yes_tx  被 a slave 成功确认的 commits 数.

              The number of commits that were acknowledged successfully by a slave.

        Rpl_semi_sync_slave_status

              Whether semisynchronous replication currently is operational on the slave.
              This is 1 if the plugin has been enabled and the slave I/O thread is running, 0 otherwise.


All Rpl_semi_sync_xxx status variables are described at Section 5.1.9, “Server Status Variables”.
                                          https://dev.mysql.com/doc/refman/5.7/en/server-status-variables.html

  这些 系统变量 和 状态变量 可用的 前提是 仅当 相应的 master or slave plugin 通过 INSTALL PLUGIN 被安装(installed).

---------------------------------------------------------------------------------------------------


16.3.9.2 Semisynchronous Replication Installation and Configuration  半同步复制的 安装 与 配置

    https://dev.mysql.com/doc/refman/5.7/en/replication-semisync-installation.html

(使用 半同步 复制 的 前置条件)
To use semisynchronous replication, the following requirements must be satisfied:

条件01： The capability of installing plugins requires a MySQL server that supports dynamic loading.
         To verify this, check that the value of the have_dynamic_loading system variable is YES.
         Binary distributions should support dynamic loading.

      可以采用如下任意一种方式可确认 mysql server 是否支持 dynamic loading 功能

          mysql> show global variables like 'have_dynamic_loading';
                    +----------------------+-------+
                    | Variable_name        | Value |
                    +----------------------+-------+
                    | have_dynamic_loading | YES   |     <----- OK
                    +----------------------+-------+

          mysql> select @@global.have_dynamic_loading;
                    +-------------------------------+
                    | @@global.have_dynamic_loading |
                    +-------------------------------+
                    | YES                           |    <----- OK
                    +-------------------------------+

条件02:  Replication must already be working, see Section 16.1, “Configuring Replication”.


条件03:  There must not be multiple replication channels configured. Semisynchronous replication is only compatible
         with the default replication channel. See Section 16.2.3, “Replication Channels”.

         Semisynchronous replication 不支持  multiple replication channels, 其兼容于 the default replication channel


To set up semisynchronous replication, use the following instructions.
The INSTALL PLUGIN, SET GLOBAL, STOP SLAVE, and START SLAVE statements mentioned here require the SUPER privilege.

MySQL distributions 已经包含了 master 端 和 slave 端的  semisynchronous replication plugin files.
MySQL distributions include semisynchronous replication plugin files for the master side and the slave side.



To be usable by a master or slave server, the appropriate plugin library file must be located
in the MySQL plugin directory (the directory named by the plugin_dir system variable).
If necessary, configure the plugin directory location by setting the value of plugin_dir at server startup.

查看 插件 目录的 路径:
mysql> show global variables like 'plugin_dir';
        +---------------+--------------------------+
        | Variable_name | Value                    |
        +---------------+--------------------------+
        | plugin_dir    | /usr/lib64/mysql/plugin/ |
        +---------------+--------------------------+

The plugin library file base names are semisync_master and semisync_slave.
The file name suffix differs per platform (for example, .so for Unix and Unix-like systems, .dll for Windows).

The master plugin library file must be present in the plugin directory of the master server.
The slave plugin library file must be present in the plugin directory of each slave server.

[root@dbserver ~]# find /usr/lib64/mysql/plugin/ | grep -E 'semisync_master|semisync_slave'
          /usr/lib64/mysql/plugin/debug/semisync_master.so
          /usr/lib64/mysql/plugin/debug/semisync_slave.so
          /usr/lib64/mysql/plugin/semisync_master.so       <--------- 半同步复制 的 master 端插件
          /usr/lib64/mysql/plugin/semisync_slave.so        <--------- 半同步复制 的 slave  端插件


更多信息见 官网  https://dev.mysql.com/doc/refman/5.7/en/replication-semisync-installation.html













