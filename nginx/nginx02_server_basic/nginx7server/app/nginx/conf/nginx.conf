
#user  nobody;

# 启动worker进程的数量
# 对于cpu密集型，建议 worker_processes 数量与cpu个数一致
# 如果是IO密集型，如响应大量客户端，worker_processes 个数为cpu个数的2倍
worker_processes  10;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


# http://nginx.org/en/docs/stream/ngx_stream_core_module.html
events {

    #// http://nginx.org/en/docs/ngx_core_module.html#use
    #// epoll — efficient method used on Linux 2.6+.
    #// use epoll; 其实不用明确指定，因为默认nginx采用的就是epoll
    use epoll;

    #// http://nginx.org/en/docs/ngx_core_module.html#worker_connections
    #// 设置一个 a worker process 能打开的最大的并发连接数
    #// 但实际的并发连接数无法超过当前可打开文件最大数的限制,不过可以通过worker_rlimit_core
    #// 来修改这个限制，见 http://nginx.org/en/docs/ngx_core_module.html#worker_rlimit_nofile
    worker_connections  65535;
}


http {
    include       mime.types;      #// /app/nginx/conf/mime.types
    default_type  application/octet-stream;

    #// http://nginx.org/en/docs/varindex.html
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  30;
    keepalive_requests 100;

    gzip  on; #启用压缩功能

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

    include /app/nginx/sites-enabled/*.conf;
}
