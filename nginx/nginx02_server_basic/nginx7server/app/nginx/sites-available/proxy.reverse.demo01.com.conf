#// filepath: /app/nginx/sites-available/proxy.reverse.demo01.com.conf
server {
    listen       80;
    server_name  www.proxy.reverse.demo01.com
                 proxy.reverse.demo01.com
                 *.proxy.reverse.demo01.com;

    error_log    /app/nginx/logs/proxy.reverse.demo01.com/error.log error;
    access_log   /app/nginx/logs/proxy.reverse.demo01.com/access.log main;

    location / {
        root   /www/nginx/proxy.reverse.demo01.com;
        index  index.html index.htm;

    }

    #// proxy_pass with or without appended new backend ser uri=======================================================================
    location /proxy_to_backend_server_but_not_change_original_client_uri {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #// 注意：
        #//  此处 proxy_pass 的值后面没有append任何uri (如'/', '/path/to'),
        #//  所以这里仅是代理到后台服务器上的相同相同uri(这种效果感觉有点和root指令只提供一个基目录的效果类似)
        proxy_pass http://192.168.175.20;  #forward to: http://192.168.175.20/proxy_to_backend_server_but_not_change_original_client_uri
    }

    location /proxy_to_backend_server_and_change_original_client_uri_to_new_uri {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #// 注意：
        #//  此处 proxy_pass 的值后面append了新的uri(此处是'/new_backend_server_uri'),
        #//  所以会向后台服务器访问一个全新的uri请求(有种更彻底的偷梁换柱的感觉)
        proxy_pass http://192.168.175.20/new_backend_server_uri;  #forward to: http:http://192.168.175.20/new_backend_server_uri
        #// 注：如下两行注释中的 proxy_pass 的作用是不同的
        #//   proxy_pass http://192.168.175.20/; #// 加了 '/'这个新的uri信息，所以只会forward to: proxy_pass http://192.168.175.20/
        #//   proxy_pass http://192.168.175.20;
    }


    #// header=======================================================================
    location /difference_between_xRealIp_and_xForwardedFor {
        proxy_set_header Host $host;
        #// https://www.cnblogs.com/diaosir/p/6890825.html
        #// HTTP 请求头中的 X-Forwarded-For，X-Real-IP
        #//   获取client的真实ip应该用X-Real-IP, 而不是X-Forwarded-For(因X-Forwarded-For可以伪造)
        #//   且如果是在多级proxy代理中，应该只在第一个proxy中设置 X-Real-IP, 否则后面的proxy会用
        #//   各自的直接客户端的ip把 X-Real-IP 中的值覆盖掉(好比一个变量被重新赋值一样)
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass http://192.168.175.20;  #forward to: http://192.168.175.20/difference_between_xRealIp_and_xForwardedFor
    }

    #// http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_set_header
    location = /passing_request_headers { #// https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/
        #// By default, NGINX redefines two header fields in proxied requests,
        #// “Host” and “Connection”, and eliminates the header fields whose values are empty strings.
        #// “Host” is set to the $proxy_host variable, and “Connection” is set to close.
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_pass http://192.168.175.20;  #forward to: http://192.168.175.20/passing_request_headers
    }

    location = /prevent_a_header_field_from_being_passed { #// https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/
        proxy_set_header Accept-Encoding "";  #//设置一个header field为空字符串，可以阻止其被传递给被代理的服务器(proxied server)
        proxy_pass http://192.168.175.20;     #forward to: http://192.168.175.20/prevent_a_header_field_from_being_passed
    }

    #// slash ///////===================================================================
    #// http://nginx.org/en/docs/http/ngx_http_core_module.html#location
    #//    If a location is defined by a prefix string that ends with the slash character, and requests are
    #//    processed by one of proxy_pass, fastcgi_pass, uwsgi_pass, scgi_pass, memcached_pass, or grpc_pass,
    #//    then the special processing is performed. In response to a request with URI equal to this string, but
    #//    without the trailing slash, a permanent redirect with the code 301 will be returned to the requested
    #//    URI with the slash appended. If this is not desired, an exact match of the URI and location could be
    #//    defined like this:
    location /user/ {
          #//proxy_pass http://user.example.com;
        proxy_pass http://192.168.175.20;
    }

    location = /user { #// 定义该'location = /user'可以防止重定向到新地址或丢失数据(当然，如果只是防止丢失数据，可使用精确uri或正则表达式的方式定义location)
      #//proxy_pass http://login.example.com;
      proxy_pass http://192.168.175.20;
    }

    location /redirect_301_uri/ {
      #// 特殊情况：(condition: (only /uri/) with xxx_pass)
      #//     因为该配置中没有定义形如 'location /redirect_301_uri'的location,
      #//     所以如果客户端浏览器访问'/redirect_301_uri'(如：http://proxy.reverse.demo01.com/redirect_301_uri),
      #//     则浏览器会被永久重定向到'/redirect_301_uri/'(如：http://proxy.reverse.demo01.com/redirect_301_uri/)
      proxy_pass http://192.168.175.20;  #forward to: http://192.168.175.20/redirect_301_uri/
    }

    #// 此例中客户端浏览器采用下面任意url请求，都可以直接被代理到后台的ip为192.168.175.20的server,而中间没有重定向处理
    #// http://proxy.reverse.demo01.com/no_redirect_301
    #// http://proxy.reverse.demo01.com/no_redirect_301/
    location ~ /(no_redirect_301$|no_redirect_301/) {
       proxy_pass http://192.168.175.20;
    }
}


#// 服务器端
#//  [root@nginx7server ~]# mkdir -p /app/nginx/logs/proxy.reverse.demo01.com/
#//  [root@nginx7server ~]# mkdir -p /www/nginx/proxy.reverse.demo01.com
#//  [root@nginx7server ~]# echo '<h1>proxy.reverse.demo01.com</h1>'  > /www/nginx/proxy.reverse.demo01.com/index.html
#//  [root@nginx7server ~]# ln -s /app/nginx/sites-available/proxy.reverse.demo01.com.conf /app/nginx/sites-enabled/proxy.reverse.demo01.com.conf
#//  [root@nginx7server ~]# /app/nginx/sbin/nginx -t
#//  [root@nginx7server ~]# /app/nginx/sbin/nginx -s reload

#//  被代理的后台服务器端:
#//      简单搭建一个nginx服务器，按如下配置修改后启动即可:
#//          location / {
#//              default_type text/plain;
#//              return 200 'backend: $request_uri';
#//          }


#// 客户端
#// [root@client ~]# vim /etc/hosts
#//      192.168.175.10  proxy.reverse.demo01.com
#//      192.168.175.10  www.proxy.reverse.demo01.com
#//      192.168.175.10  web.proxy.reverse.demo01.com
#//
#//
#//  测试用例:
#// [root@client ~]# curl http://proxy.reverse.demo01.com
#// [root@client ~]# curl http://www.proxy.reverse.demo01.com
#// [root@client ~]# curl http://web.proxy.reverse.demo01.com
#//
#// [root@client ~]# curl http://proxy.reverse.demo01.com/proxy_to_backend_server_but_not_change_original_client_uri
#// [root@client ~]# curl http://proxy.reverse.demo01.com/proxy_to_backend_server_and_change_original_client_uri_to_new_uri
#// [root@client ~]# curl http://proxy.reverse.demo01.com/difference_between_xRealIp_and_xForwardedFor
#// [root@client ~]# curl http://proxy.reverse.demo01.com/passing_request_headers
#// [root@client ~]# curl http://proxy.reverse.demo01.com/prevent_a_header_field_from_being_passed
#// [root@client ~]# curl http://proxy.reverse.demo01.com/user/
#// [root@client ~]# curl http://proxy.reverse.demo01.com/user
#// [root@client ~]# curl http://proxy.reverse.demo01.com/redirect_301_uri/
#// [root@client ~]# curl http://proxy.reverse.demo01.com/redirect_301_uri
#// [root@client ~]# curl http://proxy.reverse.demo01.com/no_redirect_301
#// [root@client ~]# curl http://proxy.reverse.demo01.com/no_redirect_301/


#// 其他关于nginx的location匹配规格的资料： https://artfulrobot.uk/blog/untangling-nginx-location-block-matching-algorithm

