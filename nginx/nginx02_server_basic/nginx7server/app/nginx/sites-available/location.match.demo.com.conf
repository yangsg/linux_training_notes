#// http://nginx.org/en/docs/http/ngx_http_core_module.html#location
    server {
        listen       80;
        server_name  location.match.demo.com;

#// [root@nginx7server ~]# /app/nginx/sbin/nginx -t    #// 检查配置的语法

#// -----------------------------------------------
#// location 指令的语法如下:
#// Syntax: location [ = | ~ | ~* | ^~ ] uri { ... }
#// location @name { ... }
#// Default:  —
#// Context:  server, location
#//
#//  注：= 匹配到后会立刻结束后续其他匹配, ^~ 匹配到后会不再对后续的正则表达式做检查,
#//      ~ ~* 用于正则匹配, 如果什么符号都没加，则默认default为简单的文本包含查找
#//
#//  为了能查找匹配给定request的location, nginx首先检查以prefix strings定义的locations(即(prefix locations)),
#//  在这些成功匹配的locations之中，具有最长匹配prefix的location会被选中和被记住，
#//  (原文：the location with the longest matching prefix is selected and remembered),
#//  然后，正则表达式被检查(按照它们在配置文件中出现的顺序)，
#//  The search of regular expressions terminates on the first match,
#//  and the corresponding configuration is used.
#//  If no match with a regular expression is found then the configuration of the prefix location remembered earlier is used.
#//
#// If the longest matching prefix location has the “^~” modifier then regular expressions are not checked.
#// -----------------------------------------------


#//  ~*  匹配正则表达式(不区分大小写)
        location ~* ^/regular_expression_case-insensitive_match {
          return 200 "Regular expressions are specified with the preceding “~*” modifier (for case-insensitive matching)";
        }

#//  ~  匹配正则表达式(区分大小写)
        location ~ ^/regular_expression_case-sensitive_match {
          return 200 "the “~” modifier (for case-sensitive matching)";
        }


#//  location在匹配规则之前都会对实际的url先做规范化处理,然后再对规范化处理后得出的uri做匹配操作
#// 规范化处理操作类型如下：
#//  1. 解码形如'%XX'这种经过编码的文本
#//  2. 解析路径中相对路径(如'.'或'..')
#//  3. 将毗邻的多个斜线(如'///////')压缩为一个斜线(即'/')
        location = /normalize/uri/ {
          return 200 "location = /normalize/uri/";
#// [root@client ~]# curl 'http://location.match.demo.com/////////////normalize/uri///////////////////////'
#// [root@client ~]# curl 'http://location.match.demo.com/////////////normalize/uri/dir01/dir02/../..//////////////////////'
        }

#// 精确匹配
#// 如果精确匹配一旦被找到，则search过程会立刻结束(If an exact match is found, the search terminates.)
#// 如果某个固定的uri经常大量频繁的被客户端请求，则使用'='这种方式可以加速server端请求的处理过程
        location = / {
           return 200 "location = /";
#// 测试用例：
#// [root@client ~]# curl http://location.match.demo.com/
#// [root@client ~]# curl http://location.match.demo.com
        }

        location / {
           return 200 "location /";
#// 测试用例：
#// [root@client ~]# curl http://location.match.demo.com/aaaaaa
#// [root@client ~]# curl http://location.match.demo.com/bbbbbb
#// [root@client ~]# curl http://location.match.demo.com/cccccc/dddddd
#// [root@client ~]# curl http://location.match.demo.com/path/to/other

        }

        location /documents/ {
           return 200 "location /documents/";

#// 测试用例：
#// [root@client ~]# curl http://location.match.demo.com/aaaaa/documents/
#// [root@client ~]# curl http://location.match.demo.com/documents/aaaaaa
        }

#// 区分大小写的正则匹配 (类似bash中的grep命令, 如：echo 'aaaa/pattern/aaaa'  | grep '/pattern')
        location ~ /pattern {
           return 200 "location ~ /pattern/";
#// 测试用例：
#// [root@client ~]#  curl http://location.match.demo.com/pattern
#// [root@client ~]#  curl http://location.match.demo.com/patternaaaaaa
#// [root@client ~]#  curl http://location.match.demo.com/pattern/aaaaaa
#// [root@client ~]#  curl http://location.match.demo.com/bbbbbb/pattern/aaaaaa
        }


#// 效果有点类似于bash中对grep命令的这种使用: echo '/switchbreak/aaaaaaaaa' | grep -E '^/switchbreak/'
#// ^~ 还有种类似于一些程序语言中switch语句块加了一条break语句的效果(即执行break后立即结束对其他后续语句的处理,
#// 而^~会结束后续正则表达式的检查)
#// If the longest matching prefix location has the “^~” modifier then regular expressions are not checked.
        location ^~ /switchbreak/ {
           return 200 "location ^~ /switchbreak/";
#// 测试用例：
#// [root@client ~]#  curl 'http://location.match.demo.com/switchbreak/'
#// [root@client ~]#  curl 'http://location.match.demo.com/switchbreak/aaaa'
        }

        #// 不区分大小写的正则匹配
        location ~* \.(gif|jpg|jpeg)$ {
           #// return 200 'location ~* \.(gif|jpg|jpeg)$';  <==problem caused by the '$' sign
           return 200 'location ~* \.(gif|jpg|jpeg)';
#// 测试用例：
#// [root@client ~]#  curl http://location.match.demo.com/documents/1.jpg
#// [root@client ~]#  curl http://location.match.demo.com/aaaaaa.jpg
#// [root@client ~]#  curl http://location.match.demo.com/aaaa/bbb.jpg
#// [root@client ~]#  curl http://location.match.demo.com/aaaa/bbb.gif
#// [root@client ~]#  curl http://location.match.demo.com/aaaa/bbb.gif.gif
#// [root@client ~]#  curl http://location.match.demo.com/.gif
#// [root@client ~]#  curl http://location.match.demo.com/aaaa/.gif
#// [root@client ~]#  curl http://location.match.demo.com/aaaa.GIF
#// [root@client ~]#  curl http://location.match.demo.com/aaaa.Gif

        }


#// ------------------------------------------------------------
#// http://nginx.org/en/docs/http/ngx_http_core_module.html#location
#// 特别注意：(一个很奇怪的nginx的特性)
#//     针对proxy_pass, fastcgi_pass, uwsgi_pass, scgi_pass, memcached_pass,or grpc_pass,
#//     prefix string是否带有结尾的斜线符号'/'是否区别的
#//
#//  If a location is defined by a prefix string that ends with the slash character,
#//  and requests are processed by one of
#//  proxy_pass, fastcgi_pass, uwsgi_pass, scgi_pass, memcached_pass,or grpc_pass,
#//  then the special processing is performed. In response to a request with URI equal to this string,
#//  but without the trailing slash, a permanent redirect with the code 301 will be returned to
#//  the requested URI with the slash appended. If this is not desired,
#//  an exact match of the URI and location could be defined like this:


#//  浏览器访问 http://location.match.demo.com/user/ ,
#//  则nginx会将内容 http://192.168.175.20/user/index.html的内容返回
        location /user/ {  #//  此处完成的是反向代理功能
          proxy_pass http://192.168.175.20;
        }

#// 如下，浏览器访问 http://location.match.demo.com/user  时，
#// 将被永久重定向到http://location.match.demo.com/user/ 这个新地址
#//(301 Moved Permanently)  http://location.match.demo.com/user/
        location = /user { #// 此处完成的是重定向功能，且注意不是重定向到http://192.168.175.20/user, 而是重定向到了http://location.match.demo.com/user/
          proxy_pass http://192.168.175.20;
        }


#// ------------------------------------------------------------

#// TODO: add the demo about nested location
#// https://xintron.se/code/nginx-nested-locations-and-pagination
#// https://zakame.net/blog/2017/07/nginx-and-nested-locations.html
#// https://stackoverflow.com/questions/34839823/nested-locations-in-nginx
#// https://serverfault.com/questions/496371/nested-locations-nginx



    }





