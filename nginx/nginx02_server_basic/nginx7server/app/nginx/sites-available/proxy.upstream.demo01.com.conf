#// filepath: /app/nginx/sites-available/proxy.upstream.demo01.com.conf

#//  http://nginx.org/en/docs/http/load_balancing.html
#//  http://nginx.org/en/docs/http/ngx_http_upstream_conf_module.html
#//  https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/

#// 其他示例
#//  https://upcloud.com/community/tutorials/configure-load-balancing-nginx/
#//  https://www.booleanworld.com/configure-nginx-load-balancer/
#//  https://best-web-hosting.org/nginx-load-balancing-centos/

upstream WebServer {
  #// 选择负载均衡Load-Balancing的调度算法
  #// 如果没有明确指定，则默认使用 Round Robin 轮询(注：也不存在能明确指定round robin的执行)
  #least_conn;   #转交给最少活动连接数的后台服务器, 同时考虑服务器权重weight
  #ip_hash;     #通过client ip计算hash value来确认转交的后台服务器，该方式可确保后台服务器可用的前提下,
                #同一client能始终访问同一台后台服务器(此特性是实现会话session保持的方法之一)


  server 192.168.175.101 weight=1 max_fails=2 fail_timeout=5s;
  server 192.168.175.102 weight=1 max_fails=2 fail_timeout=5s;
  server 192.168.175.103 weight=1 max_fails=2 fail_timeout=5s;


  #// 其他所有主服务器都不可用了的时候，该backup后备服务器将顶替上来提供服务,
  #// 不过实际中提供备份服务器太浪费资源，直接让backup服务器一起参与服务也许更好
  #// ip_hash 不支持 backup 参数的server
  #// server 192.168.175.103 weight=1 max_fails=2 fail_timeout=5s backup;

  #// 如果需要临时从load‑balancing rotation中移除某个后台服务器，可以将该服务器标记为 'down'来保存client ip地址
  #// 的当前hash, 那些以前被该服务器处理的请求会被自动地发送到该组中的下一个服务器,如下：
  #//                      upstream backend {
  #//                          server backend1.example.com;
  #//                          server backend2.example.com;
  #//                          server backend3.example.com down;  #// <== 标记为down
  #//                      }
}

server {
    listen       80;
    server_name  www.proxy.upstream.demo01.com
                 proxy.upstream.demo01.com
                 *.proxy.upstream.demo01.com;

    error_log    /app/nginx/logs/proxy.upstream.demo01.com/error.log error;
    access_log   /app/nginx/logs/proxy.upstream.demo01.com/access.log main;

    #// location / {
    #//     root   /www/nginx/proxy.upstream.demo01.com;
    #//     index  index.html index.htm;
    #// }

    location / {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass http://WebServer;
    }
}


#// 服务器端
#//  [root@nginx7server ~]# mkdir -p /app/nginx/logs/proxy.upstream.demo01.com/
#//  [root@nginx7server ~]# mkdir -p /www/nginx/proxy.upstream.demo01.com
#//  [root@nginx7server ~]# echo '<h1>proxy.upstream.demo01.com</h1>'  > /www/nginx/proxy.upstream.demo01.com/index.html
#//  [root@nginx7server ~]# ln -s /app/nginx/sites-available/proxy.upstream.demo01.com.conf /app/nginx/sites-enabled/proxy.upstream.demo01.com.conf
#//  [root@nginx7server ~]# /app/nginx/sbin/nginx -t
#//  [root@nginx7server ~]# /app/nginx/sbin/nginx -s reload

#// 被代理服务器端
#//   ip: 192.168.175.101
#//   [root@webserver01 ~]# yum -y install nginx
#//   [root@webserver01 ~]# systemctl start nginx
#//   [root@webserver01 ~]# systemctl enable nginx.service
#//   [root@webserver01 ~]# echo '<h1>webserver01</h1' > /usr/share/nginx/html/index.html
#//
#//   ip: 192.168.175.102
#//   [root@webserver02 ~]# yum -y install nginx
#//   [root@webserver02 ~]# systemctl start nginx
#//   [root@webserver02 ~]# systemctl enable nginx.service
#//   [root@webserver02 ~]# echo '<h1>webserver02</h1' > /usr/share/nginx/html/index.html
#//
#//   ip: 192.168.175.103
#//   [root@webserver03 ~]# yum -y install nginx
#//   [root@webserver03 ~]# systemctl start nginx
#//   [root@webserver03 ~]# systemctl enable nginx.service
#//   [root@webserver03 ~]# echo '<h1>webserver03</h1' > /usr/share/nginx/html/index.html

#// 客户端
#// [root@client ~]# vim /etc/hosts
#//      192.168.175.10  proxy.upstream.demo01.com
#//      192.168.175.10  www.proxy.upstream.demo01.com
#//      192.168.175.10  web.proxy.upstream.demo01.com
#//
#//
#//  测试用例:
#// [root@client ~]# curl http://proxy.upstream.demo01.com
#// [root@client ~]# curl http://www.proxy.upstream.demo01.com
#// [root@client ~]# curl http://web.proxy.upstream.demo01.com

