#// http://nginx.org/en/docs/http/server_names.html
#// http://nginx.org/en/docs/http/request_processing.html


#// When searching for a virtual server by name, if name matches more than one of the specified variants,
#// e.g. both wildcard name and regular expression match,
#// the first matching variant will be chosen, in the following order of precedence:
#
#//     1. exact name
#//     2. longest wildcard name starting with an asterisk, e.g. “*.example.org”
#//     3. longest wildcard name ending with an asterisk, e.g. “mail.*”
#//     4. first matching regular expression (in order of appearance in a configuration file)

#// 如下四个server是官网的示例(注意它们的优先级)
    server {
      listen       80;
      server_name  example.org  www.example.org;
      location / {
        return 200 'server_name  example.org  www.example.org;';
      }
    }

    server {
      listen       80;
      server_name  *.example.org;
      location / {
        return 200 'server_name  *.example.org';
      }
    }

    server {
      listen       80;
      server_name  mail.*;
      location / {
        return 200 'server_name  mail.*;';
      }
    }

    server {
      listen       80;
      server_name  ~^(?<user>.+)\.example\.net$;
      location / {
        return 200 'server_name  ~^(?<user>.+)\.example\.net';
      }
    }

#// Wildcard names
#// 通配符名可以可以在servername的开始或末尾包含一个唯一星号'*',且只能位于分隔用的点'.'符号的边上。
#// 如“www.*.example.org” and “w*.example.org”都不是合法的通配符名。然而，它们可以用正则表达式来指定，
#// 例如，~^www\..+\.example\.org$” and “~^w.*\.example\.org$”。
#// 一个星号'*'可以匹配servername的多个部分，如 “*.example.org” 不只可以匹配 www.example.org，同样也可以匹配
#// www.sub.example.org。
#// 类似“.example.org”这种特殊的通配符名字可用于同时匹配精确名“example.org”和通配符名“*.example.org”


#// Regular expressions names
#//  nginx使用的正则表达式兼容与perl语言使用的正则表达式(PCRE),为了使用正则表达式，servername必须以波浪符号“~”开头。
#//  如： server_name  ~^www\d+\.example\.net$;
#//  否则，会被当做精确名(exact name)对待,或者，如果包含星号"*",则被当做通配符名。
#//  别让了设置开始锚点和结束锚点(即“^” and “$” anchors), 它们不是语法必须的，但确实语义必须的。
#//  同时注意域名之间的点应该使用反斜线(backslash)进行转义。如果正则表达式包含了字母“{” and “}”
#//  (即开始大括号和结束大括号), 则整个正则表达式应该被引号引起来,如：
#//  server_name  "~^(?<name>\w\d{1,3}+)\.example\.net$";
#//  否则nginx将启动失败并显示如下信息:
#//  directive "server_name" is not terminated by ";" in ...
#//  命令的正则表达式捕获在后面可以当做变量使用，如：
#//  server {
#//      server_name   ~^(www\.)?(?<domain>.+)$;
#//
#//      location / {
#//          root   /sites/$domain;
#//      }
#//  }
#//
#//
#//  The PCRE library supports named captures using the following syntax:
#//
#//  ?<name> Perl 5.10 compatible syntax, supported since PCRE-7.0
#//  ?'name' Perl 5.10 compatible syntax, supported since PCRE-7.0
#//  ?P<name>  Python compatible syntax, supported since PCRE-4.0


#// Miscellaneous names
#//  有一些server names会被特殊的对待
#//  如果一个server block并非默认default,同时又必须处理没有“Host” header field
#//  的请求，那么应该指定一个empty name,如：
#//    server {
#//        listen       80;
#//        server_name  example.org  www.example.org  "";
#//        ...
#//    }
#//  如果一个server block中没有定义server_name, 则nginx使用empty name作为server_name。
#//  如果有人使用ip地址替代server name发起请求，则“Host” request header field将包含ip
#//  地址并且该请求可以靠把ip地址作为server name使用而得到处理,如：
#//     server {
#//         listen       80;
#//         server_name  example.org
#//                      www.example.org
#//                      ""
#//                      192.168.1.1
#//                      ;
#//         ...
#//     }
#//  In catch-all server examples the strange name “_” can be seen:
#//      server {
#//          listen       80  default_server;
#//          server_name  _;
#//          return       444;
#//      }
#//  这个名字("_")没有什么特别之处，它只是无数与任何实际真实的domain name永不相交的非法域名之一，
#//  其他的非法名字如“--” and “!@#” 同样可以被使用。
#//
#// Note that there is no way to specify the catch-all name or the default server using the server_name directive.
#// This is a property of the listen directive and not of the server_name directive. See also “How nginx processes a request”.
#// It is possible to define servers listening on ports *:80 and *:8080, and direct that one will be the
#// default server for port *:8080, while the other will be the default for port *:80:
#//          server {
#//              listen       80;
#//              listen       8080  default_server;
#//              server_name  example.net;
#//              ...
#//          }
#//
#//          server {
#//              listen       80  default_server;
#//              listen       8080;
#//              server_name  example.org;
#//              ...
#//          }

#//  Optimization  优化
#//  只要可以，应尽可能使用exact name, 比如如下第一个server的server_name的形式就比第二个server的
#//  server_name的形式更高效：
#//    server {
#//        listen       80;
#//        server_name  example.org  www.example.org  *.example.org;
#//        ...
#//    }
#//
#//    server {
#//        listen       80;
#//        server_name  .example.org;
#//        ...
#//    }

#// 一些与server_name相关的变量如server_names_hash_max_size 和 server_names_hash_bucket_size 见官网







#// ------------------------------------------------------------------
#// 我的示例
    server {
        listen       80;
        server_name  servername.match.demo.com;
    }






















