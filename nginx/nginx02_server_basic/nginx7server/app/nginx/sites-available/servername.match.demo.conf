#// http://nginx.org/en/docs/http/server_names.html
#// http://nginx.org/en/docs/http/request_processing.html



#// Server names 使用 server_name 指令 来定义 并 确定 哪个 server block 被 用于处理 a given request.
#// See also “How nginx processes a request”.
#// Server names 可以使用 exact names, wildcard names, 或 regular expressions 来定义


#// When searching for a virtual server by name, if name matches more than one of the specified variants,
#// e.g. both wildcard name and regular expression match,
#// the first matching variant will be chosen, in the following order of precedence:
#
#//     1. exact name
#//     2. longest wildcard name starting with an asterisk, e.g. “*.example.org”
#//     3. longest wildcard name ending with an asterisk, e.g. “mail.*”
#//     4. first matching regular expression (in order of appearance in a configuration file)

#// 如下四个server是官网的示例(注意它们的优先级)
    server {
      listen       80;
      server_name  example.org  www.example.org;
      location / {
        return 200 'server_name  example.org  www.example.org;';
      }
    }

    server {
      listen       80;
      server_name  *.example.org;
      location / {
        return 200 'server_name  *.example.org';
      }
    }

    server {
      listen       80;
      server_name  mail.*;
      location / {
        return 200 'server_name  mail.*;';
      }
    }

    server {
      listen       80;
      server_name  ~^(?<user>.+)\.example\.net$;
      location / {
        return 200 'server_name  ~^(?<user>.+)\.example\.net';
      }
    }

#// Wildcard names
#// 通配符名可以可以在servername的开始或末尾包含一个唯一星号'*',且只能位于分隔用的点'.'符号的边上。
#// 如“www.*.example.org” and “w*.example.org”都不是合法的通配符名。然而，它们可以用正则表达式来指定，
#// 例如，~^www\..+\.example\.org$” and “~^w.*\.example\.org$”。
#// 一个星号'*'可以匹配servername的多个部分，如 “*.example.org” 不只可以匹配 www.example.org，同样也可以匹配
#// www.sub.example.org。
#// 类似“.example.org”这种特殊的通配符名字可用于同时匹配精确名“example.org”和通配符名“*.example.org”


#// Regular expressions names
#//  nginx使用的正则表达式兼容与perl语言使用的正则表达式(PCRE),为了使用正则表达式，servername必须以波浪符号“~”开头。
#//  如： server_name  ~^www\d+\.example\.net$;
#//  否则，会被当做精确名(exact name)对待,或者，如果包含星号"*",则被当做通配符名。
#//  别忘了设置开始锚点和结束锚点(即“^” and “$” anchors), 它们不是语法必须的，但确是语义(逻辑)必须的。
#//  同时注意域名之间的点应该使用反斜线(backslash)进行转义。如果正则表达式包含了字母“{” and “}”
#//  (即开始大括号和结束大括号), 则整个正则表达式应该被引号引起来,如：
#//  server_name  "~^(?<name>\w\d{1,3}+)\.example\.net$";
#//  否则nginx将启动失败并显示如下信息:
#//  directive "server_name" is not terminated by ";" in ...
#//  命令的正则表达式捕获在后面可以当做变量使用，如：
#//  server {
#//      server_name   ~^(www\.)?(?<domain>.+)$;
#//
#//      location / {
#//          root   /sites/$domain;
#//      }
#//  }
#//
#//
#//  The PCRE library supports named captures using the following syntax:
#//
#//  ?<name> Perl 5.10 compatible syntax, supported since PCRE-7.0
#//  ?'name' Perl 5.10 compatible syntax, supported since PCRE-7.0
#//  ?P<name>  Python compatible syntax, supported since PCRE-4.0

#// If nginx fails to start and displays the error message:
#//  pcre_compile() failed: unrecognized character after (?< in ...
#//   this means that the PCRE library is old and the syntax “?P<name>”
#//   should be tried instead. The captures can also be used in digital form:
#//   server {
#//       server_name   ~^(www\.)?(.+)$;
#//
#//       location / {
#//           root   /sites/$2;
#//       }
#//   }
#// However, such usage should be limited to simple cases (like the above), since the digital references can easily be overwritten.


#// Miscellaneous names
#//  有一些server names会被特殊的对待
#//  如果一个server block并非默认default,同时又必须处理没有“Host” header field
#//  的请求，那么应该指定一个empty name,如：
#//    server {
#//        listen       80;
#//        server_name  example.org  www.example.org  "";
#//        ...
#//    }
#//  如果一个server block中没有定义server_name, 则nginx使用empty name作为server_name。
#//  如果有人使用ip地址替代server name发起请求，则“Host” request header field将包含ip
#//  地址并且该请求可以靠把ip地址作为server name使用而得到处理,如：
#//     server {
#//         listen       80;
#//         server_name  example.org
#//                      www.example.org
#//                      ""
#//                      192.168.1.1
#//                      ;
#//         ...
#//     }
#//  In catch-all server examples the strange name “_” can be seen:
#//      server {
#//          listen       80  default_server;
#//          server_name  _;
#//          return       444;
#//      }
#//  这个名字("_")没有什么特别之处，它只是无数与任何实际真实的domain name永不相交的非法域名之一，
#//  其他的非法名字如“--” and “!@#” 同样可以被使用。
#//
#// Note that there is no way to specify the catch-all name or the default server using the server_name directive.
#// This is a property of the listen directive and not of the server_name directive. See also “How nginx processes a request”.
#// It is possible to define servers listening on ports *:80 and *:8080, and direct that one will be the
#// default server for port *:8080, while the other will be the default for port *:80:
#//          server {
#//              listen       80;
#//              listen       8080  default_server;
#//              server_name  example.net;
#//              ...
#//          }
#//
#//          server {
#//              listen       80  default_server;
#//              listen       8080;
#//              server_name  example.org;
#//              ...
#//          }

#//  Optimization  优化
#//  只要可以，应尽可能使用exact name, 比如如下第一个server的server_name的形式就比第二个server的
#//  server_name的形式更高效：
#//    server {
#//        listen       80;
#//        server_name  example.org  www.example.org  *.example.org;
#//        ...
#//    }
#//
#//    server {
#//        listen       80;
#//        server_name  .example.org;
#//        ...
#//    }

#// 一些与server_name相关的变量如server_names_hash_max_size 和 server_names_hash_bucket_size 见官网







#// ------------------------------------------------------------------
#// 我的示例
    server {
        listen       80;
        server_name  servername.match.demo.com;
    }



#// -------------------------------------------------------------------------------
#// http://nginx.org/en/docs/http/request_processing.html
#//   How nginx processes a request
#//   --------------------------------------------
#//   Name-based virtual servers
#//   如下例子的3个server block中:
#//       server {  #// 该server为80端口的default server, 因其在配置文件中的最先(第一个)被定义
#//           listen      80;
#//           server_name example.org www.example.org;
#//           ...
#//       }
#//
#//       server {
#//           listen      80;
#//           server_name example.net www.example.net;
#//           ...
#//       }
#//
#//       server {
#//           listen      80;
#//           server_name example.com www.example.com;
#//           ...
#//       }
#//
#//   按如上例子的配置,nginx只会检查 request’s header field “Host”
#//   如果这个请求头字段"Host"的值没有匹配到任何server name, 或者request中
#//   不包含任何header field信息，nginx会将request路由到针对该port的default server上，
#//   按上面例子的配置，这个default server就是the first one, 此为nginx的默认行为，当然，
#//   也可以显示的设定某个server为default server,这可以通过在listen指定中指定default_server
#//   参数来实现,如下：
#//            server {
#//                listen      80 default_server;
#//                server_name example.net www.example.net;
#//                ...
#//            }
#//   --------------------------------------------
#//
#//   How to prevent processing requests with undefined server names
#//  如果没有带the “Host” header field的request是不允许的，一个只是简单drop该request的server可以
#//  按如下定义：
#//       server {
#//           listen      80;
#//           server_name "";   #// 这里empty string(即"")可以匹配没有the “Host” header field的request
#//           return      444;  #// 为了closes the connection,返回了一个nginx特有的而非标准的状态码 444
#//       }
#//
#//
#//   --------------------------------------------
#//
#//   Mixed name-based and IP-based virtual servers
#//
#//   让我们看一个更加复杂的配置，这个配置中多个 virtual servers 监听在不同的地址上: 
#//          server {
#//              listen      192.168.1.1:80;
#//              server_name example.org www.example.org;
#//              ...
#//          }
#//
#//          server {
#//              listen      192.168.1.1:80;
#//              server_name example.net www.example.net;
#//              ...
#//          }
#//
#//          server {
#//              listen      192.168.1.2:80;
#//              server_name example.com www.example.com;
#//              ...
#//          }
#//
#//   在如上配置中，nginx将按server blocks中的listen指令来对request中的ip和port进行检测，然后根据ip:port匹配
#//   成功的server blocks中的server_name entries来对request中的the “Host” header field进行检测,如果没有找到能
#//   匹配的server name, 则该request被转交给default server处理，For example, a request for www.example.com
#//   received on the 192.168.1.1:80 port will be handled by the default server of the 192.168.1.1:80 port,
#//   i.e., by the first server, since there is no www.example.com defined for this port.
#//
#//    As already stated, a default server is a property of the listen port,
#//    and different default servers may be defined for different ports:
#//        server {
#//            listen      192.168.1.1:80;
#//            server_name example.org www.example.org;
#//            ...
#//        }
#//
#//        server {
#//            listen      192.168.1.1:80 default_server;
#//            server_name example.net www.example.net;
#//            ...
#//        }
#//
#//        server {
#//            listen      192.168.1.2:80 default_server;
#//            server_name example.com www.example.com;
#//            ...
#//        }
#//
#//
#//   --------------------------------------------
#//
#//   A simple PHP site configuration
#//
#//   Now let’s look at how nginx chooses a location to process a request for a typical, simple PHP site:
#//        server {
#//            listen      80;
#//            server_name example.org www.example.org;
#//            root        /data/www;
#//
#//            location / {
#//                index   index.html index.php;
#//            }
#//
#//            location ~* \.(gif|jpg|png)$ {
#//                expires 30d;
#//            }
#//
#//            location ~ \.php$ {
#//                fastcgi_pass  localhost:9000;
#//                fastcgi_param SCRIPT_FILENAME
#//                              $document_root$fastcgi_script_name;
#//                include       fastcgi_params;
#//            }
#//        }
#//
#//  nginx first searches for the most specific prefix location given by literal strings regardless of the listed order.
#//  In the configuration above the only prefix location is “/” and since it matches any request it will
#//  be used as a last resort. Then nginx checks locations given by regular expression in the order listed
#//  in the configuration file. The first matching expression stops the search and nginx will use this location.
#//  If no regular expression matches a request, then nginx uses the most specific prefix location found earlier.
#//
#//   Note that locations of all types test only a URI part of request line without arguments.
#//   This is done because arguments in the query string may be given in several ways, for example:
#//       /index.php?user=john&page=1
#//       /index.php?page=1&user=john
#//
#//    Besides, anyone may request anything in the query string:
#//      /index.php?page=1&something+else&user=john
#//
#//    最后的一些内容，参考 http://nginx.org/en/docs/http/request_processing.html
#//


#//     - Now let’s look at how requests would be processed in the configuration above:
#//       A request “/logo.gif” is matched by the prefix location “/” first and
#//       then by the regular expression “\.(gif|jpg|png)$”, therefore, it is handled by the latter location.
#//       Using the directive “root /data/www” the request is mapped to the
#//       file /data/www/logo.gif, and the file is sent to the client.


#//     - A request “/index.php” is also matched by the prefix location “/” first and then
#//       by the regular expression “\.(php)$”. Therefore, it is handled
#//       by the latter location and the request is passed to a FastCGI server
#//       listening on localhost:9000. The fastcgi_param directive sets
#//       the FastCGI parameter SCRIPT_FILENAME to “/data/www/index.php”,
#//       and the FastCGI server executes the file. The variable $document_root
#//       is equal to the value of the root directive and the variable
#//       $fastcgi_script_name is equal to the request URI, i.e. “/index.php”.


#//     - A request “/about.html” is matched by the prefix location “/” only, therefore,
#//       it is handled in this location. Using the directive “root /data/www”
#//       the request is mapped to the file /data/www/about.html, and the file is sent to the client.

#//     - Handling a request “/” is more complex. It is matched by the prefix location “/” only, therefore,
#//       it is handled by this location. Then the index directive tests for the existence of
#//       index files according to its parameters and the “root /data/www” directive.
#//       If the file /data/www/index.html does not exist, and the file /data/www/index.php exists,
#//       then the directive does an internal redirect to “/index.php”, and nginx searches
#//       the locations again as if the request had been sent by a client.
#//       As we saw before, the redirected request will eventually be handled by the FastCGI server.
















